
Servo R5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c40  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  08005d00  08005d00  00015d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063cc  080063cc  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  080063cc  080063cc  000163cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063d4  080063d4  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d4  080063d4  000163d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080063dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  200001f8  080065d4  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  080065d4  00020800  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001999a  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000331c  00000000  00000000  00039bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bcb3  00000000  00000000  0003ced6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000db0  00000000  00000000  00048b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001480  00000000  00000000  00049940  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009a04  00000000  00000000  0004adc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004d34  00000000  00000000  000547c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000594f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eac  00000000  00000000  00059574  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f8 	.word	0x200001f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ce8 	.word	0x08005ce8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001fc 	.word	0x200001fc
 8000104:	08005ce8 	.word	0x08005ce8

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c08      	adds	r0, r1, #0
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 fc37 	bl	8000ab0 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fbb9 	bl	80009c4 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fc29 	bl	8000ab0 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fc1f 	bl	8000ab0 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fbc7 	bl	8000a14 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 fbbd 	bl	8000a14 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__aeabi_uldivmod>:
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d111      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002ac:	2a00      	cmp	r2, #0
 80002ae:	d10f      	bne.n	80002d0 <__aeabi_uldivmod+0x28>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d100      	bne.n	80002b6 <__aeabi_uldivmod+0xe>
 80002b4:	2800      	cmp	r0, #0
 80002b6:	d002      	beq.n	80002be <__aeabi_uldivmod+0x16>
 80002b8:	2100      	movs	r1, #0
 80002ba:	43c9      	mvns	r1, r1
 80002bc:	1c08      	adds	r0, r1, #0
 80002be:	b407      	push	{r0, r1, r2}
 80002c0:	4802      	ldr	r0, [pc, #8]	; (80002cc <__aeabi_uldivmod+0x24>)
 80002c2:	a102      	add	r1, pc, #8	; (adr r1, 80002cc <__aeabi_uldivmod+0x24>)
 80002c4:	1840      	adds	r0, r0, r1
 80002c6:	9002      	str	r0, [sp, #8]
 80002c8:	bd03      	pop	{r0, r1, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	ffffff65 	.word	0xffffff65
 80002d0:	b403      	push	{r0, r1}
 80002d2:	4668      	mov	r0, sp
 80002d4:	b501      	push	{r0, lr}
 80002d6:	9802      	ldr	r0, [sp, #8]
 80002d8:	f000 f806 	bl	80002e8 <__udivmoddi4>
 80002dc:	9b01      	ldr	r3, [sp, #4]
 80002de:	469e      	mov	lr, r3
 80002e0:	b002      	add	sp, #8
 80002e2:	bc0c      	pop	{r2, r3}
 80002e4:	4770      	bx	lr
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__udivmoddi4>:
 80002e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ea:	464f      	mov	r7, r9
 80002ec:	4646      	mov	r6, r8
 80002ee:	46d6      	mov	lr, sl
 80002f0:	b5c0      	push	{r6, r7, lr}
 80002f2:	0004      	movs	r4, r0
 80002f4:	b082      	sub	sp, #8
 80002f6:	000d      	movs	r5, r1
 80002f8:	4691      	mov	r9, r2
 80002fa:	4698      	mov	r8, r3
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d82f      	bhi.n	8000360 <__udivmoddi4+0x78>
 8000300:	d02c      	beq.n	800035c <__udivmoddi4+0x74>
 8000302:	4641      	mov	r1, r8
 8000304:	4648      	mov	r0, r9
 8000306:	f001 fa7b 	bl	8001800 <__clzdi2>
 800030a:	0029      	movs	r1, r5
 800030c:	0006      	movs	r6, r0
 800030e:	0020      	movs	r0, r4
 8000310:	f001 fa76 	bl	8001800 <__clzdi2>
 8000314:	1a33      	subs	r3, r6, r0
 8000316:	469c      	mov	ip, r3
 8000318:	3b20      	subs	r3, #32
 800031a:	469a      	mov	sl, r3
 800031c:	d500      	bpl.n	8000320 <__udivmoddi4+0x38>
 800031e:	e076      	b.n	800040e <__udivmoddi4+0x126>
 8000320:	464b      	mov	r3, r9
 8000322:	4652      	mov	r2, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001f      	movs	r7, r3
 8000328:	464b      	mov	r3, r9
 800032a:	4662      	mov	r2, ip
 800032c:	4093      	lsls	r3, r2
 800032e:	001e      	movs	r6, r3
 8000330:	42af      	cmp	r7, r5
 8000332:	d828      	bhi.n	8000386 <__udivmoddi4+0x9e>
 8000334:	d025      	beq.n	8000382 <__udivmoddi4+0x9a>
 8000336:	4653      	mov	r3, sl
 8000338:	1ba4      	subs	r4, r4, r6
 800033a:	41bd      	sbcs	r5, r7
 800033c:	2b00      	cmp	r3, #0
 800033e:	da00      	bge.n	8000342 <__udivmoddi4+0x5a>
 8000340:	e07b      	b.n	800043a <__udivmoddi4+0x152>
 8000342:	2200      	movs	r2, #0
 8000344:	2300      	movs	r3, #0
 8000346:	9200      	str	r2, [sp, #0]
 8000348:	9301      	str	r3, [sp, #4]
 800034a:	2301      	movs	r3, #1
 800034c:	4652      	mov	r2, sl
 800034e:	4093      	lsls	r3, r2
 8000350:	9301      	str	r3, [sp, #4]
 8000352:	2301      	movs	r3, #1
 8000354:	4662      	mov	r2, ip
 8000356:	4093      	lsls	r3, r2
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	e018      	b.n	800038e <__udivmoddi4+0xa6>
 800035c:	4282      	cmp	r2, r0
 800035e:	d9d0      	bls.n	8000302 <__udivmoddi4+0x1a>
 8000360:	2200      	movs	r2, #0
 8000362:	2300      	movs	r3, #0
 8000364:	9200      	str	r2, [sp, #0]
 8000366:	9301      	str	r3, [sp, #4]
 8000368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <__udivmoddi4+0x8a>
 800036e:	601c      	str	r4, [r3, #0]
 8000370:	605d      	str	r5, [r3, #4]
 8000372:	9800      	ldr	r0, [sp, #0]
 8000374:	9901      	ldr	r1, [sp, #4]
 8000376:	b002      	add	sp, #8
 8000378:	bc1c      	pop	{r2, r3, r4}
 800037a:	4690      	mov	r8, r2
 800037c:	4699      	mov	r9, r3
 800037e:	46a2      	mov	sl, r4
 8000380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000382:	42a3      	cmp	r3, r4
 8000384:	d9d7      	bls.n	8000336 <__udivmoddi4+0x4e>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	4663      	mov	r3, ip
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0e9      	beq.n	8000368 <__udivmoddi4+0x80>
 8000394:	07fb      	lsls	r3, r7, #31
 8000396:	4698      	mov	r8, r3
 8000398:	4641      	mov	r1, r8
 800039a:	0872      	lsrs	r2, r6, #1
 800039c:	430a      	orrs	r2, r1
 800039e:	087b      	lsrs	r3, r7, #1
 80003a0:	4666      	mov	r6, ip
 80003a2:	e00e      	b.n	80003c2 <__udivmoddi4+0xda>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d101      	bne.n	80003ac <__udivmoddi4+0xc4>
 80003a8:	42a2      	cmp	r2, r4
 80003aa:	d80c      	bhi.n	80003c6 <__udivmoddi4+0xde>
 80003ac:	1aa4      	subs	r4, r4, r2
 80003ae:	419d      	sbcs	r5, r3
 80003b0:	2001      	movs	r0, #1
 80003b2:	1924      	adds	r4, r4, r4
 80003b4:	416d      	adcs	r5, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	3e01      	subs	r6, #1
 80003ba:	1824      	adds	r4, r4, r0
 80003bc:	414d      	adcs	r5, r1
 80003be:	2e00      	cmp	r6, #0
 80003c0:	d006      	beq.n	80003d0 <__udivmoddi4+0xe8>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	d9ee      	bls.n	80003a4 <__udivmoddi4+0xbc>
 80003c6:	3e01      	subs	r6, #1
 80003c8:	1924      	adds	r4, r4, r4
 80003ca:	416d      	adcs	r5, r5
 80003cc:	2e00      	cmp	r6, #0
 80003ce:	d1f8      	bne.n	80003c2 <__udivmoddi4+0xda>
 80003d0:	9800      	ldr	r0, [sp, #0]
 80003d2:	9901      	ldr	r1, [sp, #4]
 80003d4:	4653      	mov	r3, sl
 80003d6:	1900      	adds	r0, r0, r4
 80003d8:	4169      	adcs	r1, r5
 80003da:	2b00      	cmp	r3, #0
 80003dc:	db23      	blt.n	8000426 <__udivmoddi4+0x13e>
 80003de:	002b      	movs	r3, r5
 80003e0:	4652      	mov	r2, sl
 80003e2:	40d3      	lsrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	4664      	mov	r4, ip
 80003e8:	40e2      	lsrs	r2, r4
 80003ea:	001c      	movs	r4, r3
 80003ec:	4653      	mov	r3, sl
 80003ee:	0015      	movs	r5, r2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	db2d      	blt.n	8000450 <__udivmoddi4+0x168>
 80003f4:	0026      	movs	r6, r4
 80003f6:	4657      	mov	r7, sl
 80003f8:	40be      	lsls	r6, r7
 80003fa:	0033      	movs	r3, r6
 80003fc:	0026      	movs	r6, r4
 80003fe:	4667      	mov	r7, ip
 8000400:	40be      	lsls	r6, r7
 8000402:	0032      	movs	r2, r6
 8000404:	1a80      	subs	r0, r0, r2
 8000406:	4199      	sbcs	r1, r3
 8000408:	9000      	str	r0, [sp, #0]
 800040a:	9101      	str	r1, [sp, #4]
 800040c:	e7ac      	b.n	8000368 <__udivmoddi4+0x80>
 800040e:	4662      	mov	r2, ip
 8000410:	2320      	movs	r3, #32
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	464a      	mov	r2, r9
 8000416:	40da      	lsrs	r2, r3
 8000418:	4661      	mov	r1, ip
 800041a:	0013      	movs	r3, r2
 800041c:	4642      	mov	r2, r8
 800041e:	408a      	lsls	r2, r1
 8000420:	0017      	movs	r7, r2
 8000422:	431f      	orrs	r7, r3
 8000424:	e780      	b.n	8000328 <__udivmoddi4+0x40>
 8000426:	4662      	mov	r2, ip
 8000428:	2320      	movs	r3, #32
 800042a:	1a9b      	subs	r3, r3, r2
 800042c:	002a      	movs	r2, r5
 800042e:	4666      	mov	r6, ip
 8000430:	409a      	lsls	r2, r3
 8000432:	0023      	movs	r3, r4
 8000434:	40f3      	lsrs	r3, r6
 8000436:	4313      	orrs	r3, r2
 8000438:	e7d4      	b.n	80003e4 <__udivmoddi4+0xfc>
 800043a:	4662      	mov	r2, ip
 800043c:	2320      	movs	r3, #32
 800043e:	2100      	movs	r1, #0
 8000440:	1a9b      	subs	r3, r3, r2
 8000442:	2200      	movs	r2, #0
 8000444:	9100      	str	r1, [sp, #0]
 8000446:	9201      	str	r2, [sp, #4]
 8000448:	2201      	movs	r2, #1
 800044a:	40da      	lsrs	r2, r3
 800044c:	9201      	str	r2, [sp, #4]
 800044e:	e780      	b.n	8000352 <__udivmoddi4+0x6a>
 8000450:	2320      	movs	r3, #32
 8000452:	4662      	mov	r2, ip
 8000454:	0026      	movs	r6, r4
 8000456:	1a9b      	subs	r3, r3, r2
 8000458:	40de      	lsrs	r6, r3
 800045a:	002f      	movs	r7, r5
 800045c:	46b0      	mov	r8, r6
 800045e:	4666      	mov	r6, ip
 8000460:	40b7      	lsls	r7, r6
 8000462:	4646      	mov	r6, r8
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7c8      	b.n	80003fc <__udivmoddi4+0x114>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_fadd>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	4647      	mov	r7, r8
 8000470:	46ce      	mov	lr, r9
 8000472:	0243      	lsls	r3, r0, #9
 8000474:	0a5b      	lsrs	r3, r3, #9
 8000476:	0044      	lsls	r4, r0, #1
 8000478:	0fc2      	lsrs	r2, r0, #31
 800047a:	469c      	mov	ip, r3
 800047c:	0048      	lsls	r0, r1, #1
 800047e:	00dd      	lsls	r5, r3, #3
 8000480:	024b      	lsls	r3, r1, #9
 8000482:	0e24      	lsrs	r4, r4, #24
 8000484:	0a5b      	lsrs	r3, r3, #9
 8000486:	0e00      	lsrs	r0, r0, #24
 8000488:	b580      	push	{r7, lr}
 800048a:	4698      	mov	r8, r3
 800048c:	0026      	movs	r6, r4
 800048e:	4691      	mov	r9, r2
 8000490:	0fc9      	lsrs	r1, r1, #31
 8000492:	00db      	lsls	r3, r3, #3
 8000494:	1a27      	subs	r7, r4, r0
 8000496:	428a      	cmp	r2, r1
 8000498:	d029      	beq.n	80004ee <__aeabi_fadd+0x82>
 800049a:	2f00      	cmp	r7, #0
 800049c:	dd15      	ble.n	80004ca <__aeabi_fadd+0x5e>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d14a      	bne.n	8000538 <__aeabi_fadd+0xcc>
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d000      	beq.n	80004a8 <__aeabi_fadd+0x3c>
 80004a6:	e095      	b.n	80005d4 <__aeabi_fadd+0x168>
 80004a8:	08ed      	lsrs	r5, r5, #3
 80004aa:	2cff      	cmp	r4, #255	; 0xff
 80004ac:	d100      	bne.n	80004b0 <__aeabi_fadd+0x44>
 80004ae:	e088      	b.n	80005c2 <__aeabi_fadd+0x156>
 80004b0:	026b      	lsls	r3, r5, #9
 80004b2:	0a5b      	lsrs	r3, r3, #9
 80004b4:	b2e6      	uxtb	r6, r4
 80004b6:	025b      	lsls	r3, r3, #9
 80004b8:	05f6      	lsls	r6, r6, #23
 80004ba:	0a58      	lsrs	r0, r3, #9
 80004bc:	4330      	orrs	r0, r6
 80004be:	07d2      	lsls	r2, r2, #31
 80004c0:	4310      	orrs	r0, r2
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4690      	mov	r8, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004ca:	2f00      	cmp	r7, #0
 80004cc:	d000      	beq.n	80004d0 <__aeabi_fadd+0x64>
 80004ce:	e087      	b.n	80005e0 <__aeabi_fadd+0x174>
 80004d0:	1c60      	adds	r0, r4, #1
 80004d2:	b2c0      	uxtb	r0, r0
 80004d4:	2801      	cmp	r0, #1
 80004d6:	dc00      	bgt.n	80004da <__aeabi_fadd+0x6e>
 80004d8:	e0b6      	b.n	8000648 <__aeabi_fadd+0x1dc>
 80004da:	1aee      	subs	r6, r5, r3
 80004dc:	0172      	lsls	r2, r6, #5
 80004de:	d500      	bpl.n	80004e2 <__aeabi_fadd+0x76>
 80004e0:	e0c5      	b.n	800066e <__aeabi_fadd+0x202>
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d13d      	bne.n	8000562 <__aeabi_fadd+0xf6>
 80004e6:	2200      	movs	r2, #0
 80004e8:	2600      	movs	r6, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	e7e3      	b.n	80004b6 <__aeabi_fadd+0x4a>
 80004ee:	2f00      	cmp	r7, #0
 80004f0:	dc00      	bgt.n	80004f4 <__aeabi_fadd+0x88>
 80004f2:	e096      	b.n	8000622 <__aeabi_fadd+0x1b6>
 80004f4:	2800      	cmp	r0, #0
 80004f6:	d05d      	beq.n	80005b4 <__aeabi_fadd+0x148>
 80004f8:	2cff      	cmp	r4, #255	; 0xff
 80004fa:	d060      	beq.n	80005be <__aeabi_fadd+0x152>
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	04d2      	lsls	r2, r2, #19
 8000500:	4313      	orrs	r3, r2
 8000502:	2f1b      	cmp	r7, #27
 8000504:	dd00      	ble.n	8000508 <__aeabi_fadd+0x9c>
 8000506:	e0ec      	b.n	80006e2 <__aeabi_fadd+0x276>
 8000508:	2220      	movs	r2, #32
 800050a:	1bd2      	subs	r2, r2, r7
 800050c:	0018      	movs	r0, r3
 800050e:	4093      	lsls	r3, r2
 8000510:	40f8      	lsrs	r0, r7
 8000512:	1e5a      	subs	r2, r3, #1
 8000514:	4193      	sbcs	r3, r2
 8000516:	4303      	orrs	r3, r0
 8000518:	18ed      	adds	r5, r5, r3
 800051a:	016b      	lsls	r3, r5, #5
 800051c:	d57b      	bpl.n	8000616 <__aeabi_fadd+0x1aa>
 800051e:	3401      	adds	r4, #1
 8000520:	2cff      	cmp	r4, #255	; 0xff
 8000522:	d100      	bne.n	8000526 <__aeabi_fadd+0xba>
 8000524:	e0b7      	b.n	8000696 <__aeabi_fadd+0x22a>
 8000526:	2201      	movs	r2, #1
 8000528:	2607      	movs	r6, #7
 800052a:	402a      	ands	r2, r5
 800052c:	086b      	lsrs	r3, r5, #1
 800052e:	4d9a      	ldr	r5, [pc, #616]	; (8000798 <__aeabi_fadd+0x32c>)
 8000530:	401d      	ands	r5, r3
 8000532:	4315      	orrs	r5, r2
 8000534:	402e      	ands	r6, r5
 8000536:	e029      	b.n	800058c <__aeabi_fadd+0x120>
 8000538:	2cff      	cmp	r4, #255	; 0xff
 800053a:	d0b5      	beq.n	80004a8 <__aeabi_fadd+0x3c>
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	04d2      	lsls	r2, r2, #19
 8000540:	4313      	orrs	r3, r2
 8000542:	2f1b      	cmp	r7, #27
 8000544:	dd00      	ble.n	8000548 <__aeabi_fadd+0xdc>
 8000546:	e0b2      	b.n	80006ae <__aeabi_fadd+0x242>
 8000548:	2220      	movs	r2, #32
 800054a:	1bd2      	subs	r2, r2, r7
 800054c:	0019      	movs	r1, r3
 800054e:	4093      	lsls	r3, r2
 8000550:	40f9      	lsrs	r1, r7
 8000552:	1e5a      	subs	r2, r3, #1
 8000554:	4193      	sbcs	r3, r2
 8000556:	430b      	orrs	r3, r1
 8000558:	1aed      	subs	r5, r5, r3
 800055a:	016b      	lsls	r3, r5, #5
 800055c:	d55b      	bpl.n	8000616 <__aeabi_fadd+0x1aa>
 800055e:	01ad      	lsls	r5, r5, #6
 8000560:	09ae      	lsrs	r6, r5, #6
 8000562:	0030      	movs	r0, r6
 8000564:	f001 f92e 	bl	80017c4 <__clzsi2>
 8000568:	3805      	subs	r0, #5
 800056a:	4086      	lsls	r6, r0
 800056c:	4284      	cmp	r4, r0
 800056e:	dc65      	bgt.n	800063c <__aeabi_fadd+0x1d0>
 8000570:	1b04      	subs	r4, r0, r4
 8000572:	0033      	movs	r3, r6
 8000574:	2020      	movs	r0, #32
 8000576:	3401      	adds	r4, #1
 8000578:	40e3      	lsrs	r3, r4
 800057a:	1b04      	subs	r4, r0, r4
 800057c:	40a6      	lsls	r6, r4
 800057e:	1e75      	subs	r5, r6, #1
 8000580:	41ae      	sbcs	r6, r5
 8000582:	4333      	orrs	r3, r6
 8000584:	2607      	movs	r6, #7
 8000586:	001d      	movs	r5, r3
 8000588:	2400      	movs	r4, #0
 800058a:	401e      	ands	r6, r3
 800058c:	2201      	movs	r2, #1
 800058e:	464b      	mov	r3, r9
 8000590:	401a      	ands	r2, r3
 8000592:	2e00      	cmp	r6, #0
 8000594:	d004      	beq.n	80005a0 <__aeabi_fadd+0x134>
 8000596:	230f      	movs	r3, #15
 8000598:	402b      	ands	r3, r5
 800059a:	2b04      	cmp	r3, #4
 800059c:	d000      	beq.n	80005a0 <__aeabi_fadd+0x134>
 800059e:	3504      	adds	r5, #4
 80005a0:	016b      	lsls	r3, r5, #5
 80005a2:	d400      	bmi.n	80005a6 <__aeabi_fadd+0x13a>
 80005a4:	e780      	b.n	80004a8 <__aeabi_fadd+0x3c>
 80005a6:	3401      	adds	r4, #1
 80005a8:	b2e6      	uxtb	r6, r4
 80005aa:	2cff      	cmp	r4, #255	; 0xff
 80005ac:	d12f      	bne.n	800060e <__aeabi_fadd+0x1a2>
 80005ae:	26ff      	movs	r6, #255	; 0xff
 80005b0:	2300      	movs	r3, #0
 80005b2:	e780      	b.n	80004b6 <__aeabi_fadd+0x4a>
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d152      	bne.n	800065e <__aeabi_fadd+0x1f2>
 80005b8:	2cff      	cmp	r4, #255	; 0xff
 80005ba:	d000      	beq.n	80005be <__aeabi_fadd+0x152>
 80005bc:	e774      	b.n	80004a8 <__aeabi_fadd+0x3c>
 80005be:	000a      	movs	r2, r1
 80005c0:	08ed      	lsrs	r5, r5, #3
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	d0f3      	beq.n	80005ae <__aeabi_fadd+0x142>
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	03db      	lsls	r3, r3, #15
 80005ca:	432b      	orrs	r3, r5
 80005cc:	025b      	lsls	r3, r3, #9
 80005ce:	0a5b      	lsrs	r3, r3, #9
 80005d0:	26ff      	movs	r6, #255	; 0xff
 80005d2:	e770      	b.n	80004b6 <__aeabi_fadd+0x4a>
 80005d4:	3f01      	subs	r7, #1
 80005d6:	2f00      	cmp	r7, #0
 80005d8:	d0be      	beq.n	8000558 <__aeabi_fadd+0xec>
 80005da:	2cff      	cmp	r4, #255	; 0xff
 80005dc:	d1b1      	bne.n	8000542 <__aeabi_fadd+0xd6>
 80005de:	e763      	b.n	80004a8 <__aeabi_fadd+0x3c>
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	d047      	beq.n	8000674 <__aeabi_fadd+0x208>
 80005e4:	28ff      	cmp	r0, #255	; 0xff
 80005e6:	d069      	beq.n	80006bc <__aeabi_fadd+0x250>
 80005e8:	2480      	movs	r4, #128	; 0x80
 80005ea:	04e4      	lsls	r4, r4, #19
 80005ec:	427a      	negs	r2, r7
 80005ee:	4325      	orrs	r5, r4
 80005f0:	2a1b      	cmp	r2, #27
 80005f2:	dd00      	ble.n	80005f6 <__aeabi_fadd+0x18a>
 80005f4:	e0c5      	b.n	8000782 <__aeabi_fadd+0x316>
 80005f6:	002c      	movs	r4, r5
 80005f8:	2620      	movs	r6, #32
 80005fa:	40d4      	lsrs	r4, r2
 80005fc:	1ab2      	subs	r2, r6, r2
 80005fe:	4095      	lsls	r5, r2
 8000600:	1e6a      	subs	r2, r5, #1
 8000602:	4195      	sbcs	r5, r2
 8000604:	4325      	orrs	r5, r4
 8000606:	1b5d      	subs	r5, r3, r5
 8000608:	0004      	movs	r4, r0
 800060a:	4689      	mov	r9, r1
 800060c:	e7a5      	b.n	800055a <__aeabi_fadd+0xee>
 800060e:	01ab      	lsls	r3, r5, #6
 8000610:	0a5b      	lsrs	r3, r3, #9
 8000612:	e750      	b.n	80004b6 <__aeabi_fadd+0x4a>
 8000614:	2400      	movs	r4, #0
 8000616:	2201      	movs	r2, #1
 8000618:	464b      	mov	r3, r9
 800061a:	401a      	ands	r2, r3
 800061c:	076b      	lsls	r3, r5, #29
 800061e:	d1ba      	bne.n	8000596 <__aeabi_fadd+0x12a>
 8000620:	e742      	b.n	80004a8 <__aeabi_fadd+0x3c>
 8000622:	2f00      	cmp	r7, #0
 8000624:	d13b      	bne.n	800069e <__aeabi_fadd+0x232>
 8000626:	3401      	adds	r4, #1
 8000628:	b2e0      	uxtb	r0, r4
 800062a:	2801      	cmp	r0, #1
 800062c:	dd4a      	ble.n	80006c4 <__aeabi_fadd+0x258>
 800062e:	2cff      	cmp	r4, #255	; 0xff
 8000630:	d0bd      	beq.n	80005ae <__aeabi_fadd+0x142>
 8000632:	2607      	movs	r6, #7
 8000634:	18ed      	adds	r5, r5, r3
 8000636:	086d      	lsrs	r5, r5, #1
 8000638:	402e      	ands	r6, r5
 800063a:	e7a7      	b.n	800058c <__aeabi_fadd+0x120>
 800063c:	2307      	movs	r3, #7
 800063e:	4d57      	ldr	r5, [pc, #348]	; (800079c <__aeabi_fadd+0x330>)
 8000640:	1a24      	subs	r4, r4, r0
 8000642:	4035      	ands	r5, r6
 8000644:	401e      	ands	r6, r3
 8000646:	e7a1      	b.n	800058c <__aeabi_fadd+0x120>
 8000648:	2c00      	cmp	r4, #0
 800064a:	d11b      	bne.n	8000684 <__aeabi_fadd+0x218>
 800064c:	2d00      	cmp	r5, #0
 800064e:	d16e      	bne.n	800072e <__aeabi_fadd+0x2c2>
 8000650:	2b00      	cmp	r3, #0
 8000652:	d100      	bne.n	8000656 <__aeabi_fadd+0x1ea>
 8000654:	e09a      	b.n	800078c <__aeabi_fadd+0x320>
 8000656:	000a      	movs	r2, r1
 8000658:	001d      	movs	r5, r3
 800065a:	003c      	movs	r4, r7
 800065c:	e724      	b.n	80004a8 <__aeabi_fadd+0x3c>
 800065e:	3f01      	subs	r7, #1
 8000660:	2f00      	cmp	r7, #0
 8000662:	d100      	bne.n	8000666 <__aeabi_fadd+0x1fa>
 8000664:	e758      	b.n	8000518 <__aeabi_fadd+0xac>
 8000666:	2cff      	cmp	r4, #255	; 0xff
 8000668:	d000      	beq.n	800066c <__aeabi_fadd+0x200>
 800066a:	e74a      	b.n	8000502 <__aeabi_fadd+0x96>
 800066c:	e7a7      	b.n	80005be <__aeabi_fadd+0x152>
 800066e:	1b5e      	subs	r6, r3, r5
 8000670:	4689      	mov	r9, r1
 8000672:	e776      	b.n	8000562 <__aeabi_fadd+0xf6>
 8000674:	2d00      	cmp	r5, #0
 8000676:	d11c      	bne.n	80006b2 <__aeabi_fadd+0x246>
 8000678:	000a      	movs	r2, r1
 800067a:	28ff      	cmp	r0, #255	; 0xff
 800067c:	d01f      	beq.n	80006be <__aeabi_fadd+0x252>
 800067e:	0004      	movs	r4, r0
 8000680:	001d      	movs	r5, r3
 8000682:	e711      	b.n	80004a8 <__aeabi_fadd+0x3c>
 8000684:	2d00      	cmp	r5, #0
 8000686:	d15d      	bne.n	8000744 <__aeabi_fadd+0x2d8>
 8000688:	2b00      	cmp	r3, #0
 800068a:	d117      	bne.n	80006bc <__aeabi_fadd+0x250>
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	2200      	movs	r2, #0
 8000690:	03db      	lsls	r3, r3, #15
 8000692:	26ff      	movs	r6, #255	; 0xff
 8000694:	e70f      	b.n	80004b6 <__aeabi_fadd+0x4a>
 8000696:	000a      	movs	r2, r1
 8000698:	26ff      	movs	r6, #255	; 0xff
 800069a:	2300      	movs	r3, #0
 800069c:	e70b      	b.n	80004b6 <__aeabi_fadd+0x4a>
 800069e:	2c00      	cmp	r4, #0
 80006a0:	d121      	bne.n	80006e6 <__aeabi_fadd+0x27a>
 80006a2:	2d00      	cmp	r5, #0
 80006a4:	d166      	bne.n	8000774 <__aeabi_fadd+0x308>
 80006a6:	28ff      	cmp	r0, #255	; 0xff
 80006a8:	d1e9      	bne.n	800067e <__aeabi_fadd+0x212>
 80006aa:	001d      	movs	r5, r3
 80006ac:	e787      	b.n	80005be <__aeabi_fadd+0x152>
 80006ae:	2301      	movs	r3, #1
 80006b0:	e752      	b.n	8000558 <__aeabi_fadd+0xec>
 80006b2:	1c7a      	adds	r2, r7, #1
 80006b4:	d0a7      	beq.n	8000606 <__aeabi_fadd+0x19a>
 80006b6:	43fa      	mvns	r2, r7
 80006b8:	28ff      	cmp	r0, #255	; 0xff
 80006ba:	d199      	bne.n	80005f0 <__aeabi_fadd+0x184>
 80006bc:	000a      	movs	r2, r1
 80006be:	001d      	movs	r5, r3
 80006c0:	24ff      	movs	r4, #255	; 0xff
 80006c2:	e6f1      	b.n	80004a8 <__aeabi_fadd+0x3c>
 80006c4:	2e00      	cmp	r6, #0
 80006c6:	d121      	bne.n	800070c <__aeabi_fadd+0x2a0>
 80006c8:	2d00      	cmp	r5, #0
 80006ca:	d04f      	beq.n	800076c <__aeabi_fadd+0x300>
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d04c      	beq.n	800076a <__aeabi_fadd+0x2fe>
 80006d0:	18ed      	adds	r5, r5, r3
 80006d2:	016b      	lsls	r3, r5, #5
 80006d4:	d59e      	bpl.n	8000614 <__aeabi_fadd+0x1a8>
 80006d6:	4b31      	ldr	r3, [pc, #196]	; (800079c <__aeabi_fadd+0x330>)
 80006d8:	3607      	adds	r6, #7
 80006da:	402e      	ands	r6, r5
 80006dc:	2401      	movs	r4, #1
 80006de:	401d      	ands	r5, r3
 80006e0:	e754      	b.n	800058c <__aeabi_fadd+0x120>
 80006e2:	2301      	movs	r3, #1
 80006e4:	e718      	b.n	8000518 <__aeabi_fadd+0xac>
 80006e6:	28ff      	cmp	r0, #255	; 0xff
 80006e8:	d0df      	beq.n	80006aa <__aeabi_fadd+0x23e>
 80006ea:	2480      	movs	r4, #128	; 0x80
 80006ec:	04e4      	lsls	r4, r4, #19
 80006ee:	427f      	negs	r7, r7
 80006f0:	4325      	orrs	r5, r4
 80006f2:	2f1b      	cmp	r7, #27
 80006f4:	dc4d      	bgt.n	8000792 <__aeabi_fadd+0x326>
 80006f6:	2620      	movs	r6, #32
 80006f8:	1bf6      	subs	r6, r6, r7
 80006fa:	002c      	movs	r4, r5
 80006fc:	40b5      	lsls	r5, r6
 80006fe:	40fc      	lsrs	r4, r7
 8000700:	1e6a      	subs	r2, r5, #1
 8000702:	4195      	sbcs	r5, r2
 8000704:	4325      	orrs	r5, r4
 8000706:	18ed      	adds	r5, r5, r3
 8000708:	0004      	movs	r4, r0
 800070a:	e706      	b.n	800051a <__aeabi_fadd+0xae>
 800070c:	2d00      	cmp	r5, #0
 800070e:	d0cc      	beq.n	80006aa <__aeabi_fadd+0x23e>
 8000710:	2b00      	cmp	r3, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_fadd+0x2aa>
 8000714:	e753      	b.n	80005be <__aeabi_fadd+0x152>
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	4660      	mov	r0, ip
 800071a:	03c9      	lsls	r1, r1, #15
 800071c:	4208      	tst	r0, r1
 800071e:	d003      	beq.n	8000728 <__aeabi_fadd+0x2bc>
 8000720:	4640      	mov	r0, r8
 8000722:	4208      	tst	r0, r1
 8000724:	d100      	bne.n	8000728 <__aeabi_fadd+0x2bc>
 8000726:	001d      	movs	r5, r3
 8000728:	2101      	movs	r1, #1
 800072a:	4011      	ands	r1, r2
 800072c:	e747      	b.n	80005be <__aeabi_fadd+0x152>
 800072e:	2b00      	cmp	r3, #0
 8000730:	d100      	bne.n	8000734 <__aeabi_fadd+0x2c8>
 8000732:	e6b9      	b.n	80004a8 <__aeabi_fadd+0x3c>
 8000734:	1aea      	subs	r2, r5, r3
 8000736:	0150      	lsls	r0, r2, #5
 8000738:	d525      	bpl.n	8000786 <__aeabi_fadd+0x31a>
 800073a:	2607      	movs	r6, #7
 800073c:	1b5d      	subs	r5, r3, r5
 800073e:	402e      	ands	r6, r5
 8000740:	4689      	mov	r9, r1
 8000742:	e723      	b.n	800058c <__aeabi_fadd+0x120>
 8000744:	24ff      	movs	r4, #255	; 0xff
 8000746:	2b00      	cmp	r3, #0
 8000748:	d100      	bne.n	800074c <__aeabi_fadd+0x2e0>
 800074a:	e6ad      	b.n	80004a8 <__aeabi_fadd+0x3c>
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	4660      	mov	r0, ip
 8000750:	03d2      	lsls	r2, r2, #15
 8000752:	4210      	tst	r0, r2
 8000754:	d004      	beq.n	8000760 <__aeabi_fadd+0x2f4>
 8000756:	4640      	mov	r0, r8
 8000758:	4210      	tst	r0, r2
 800075a:	d101      	bne.n	8000760 <__aeabi_fadd+0x2f4>
 800075c:	001d      	movs	r5, r3
 800075e:	4689      	mov	r9, r1
 8000760:	2201      	movs	r2, #1
 8000762:	464b      	mov	r3, r9
 8000764:	24ff      	movs	r4, #255	; 0xff
 8000766:	401a      	ands	r2, r3
 8000768:	e69e      	b.n	80004a8 <__aeabi_fadd+0x3c>
 800076a:	002b      	movs	r3, r5
 800076c:	08dd      	lsrs	r5, r3, #3
 800076e:	000a      	movs	r2, r1
 8000770:	2400      	movs	r4, #0
 8000772:	e69d      	b.n	80004b0 <__aeabi_fadd+0x44>
 8000774:	1c7a      	adds	r2, r7, #1
 8000776:	d0c6      	beq.n	8000706 <__aeabi_fadd+0x29a>
 8000778:	43ff      	mvns	r7, r7
 800077a:	28ff      	cmp	r0, #255	; 0xff
 800077c:	d1b9      	bne.n	80006f2 <__aeabi_fadd+0x286>
 800077e:	001d      	movs	r5, r3
 8000780:	e71d      	b.n	80005be <__aeabi_fadd+0x152>
 8000782:	2501      	movs	r5, #1
 8000784:	e73f      	b.n	8000606 <__aeabi_fadd+0x19a>
 8000786:	1e15      	subs	r5, r2, #0
 8000788:	d000      	beq.n	800078c <__aeabi_fadd+0x320>
 800078a:	e744      	b.n	8000616 <__aeabi_fadd+0x1aa>
 800078c:	2200      	movs	r2, #0
 800078e:	2300      	movs	r3, #0
 8000790:	e691      	b.n	80004b6 <__aeabi_fadd+0x4a>
 8000792:	2501      	movs	r5, #1
 8000794:	e7b7      	b.n	8000706 <__aeabi_fadd+0x29a>
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	7dffffff 	.word	0x7dffffff
 800079c:	fbffffff 	.word	0xfbffffff

080007a0 <__aeabi_fdiv>:
 80007a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a2:	4657      	mov	r7, sl
 80007a4:	464e      	mov	r6, r9
 80007a6:	4645      	mov	r5, r8
 80007a8:	46de      	mov	lr, fp
 80007aa:	0244      	lsls	r4, r0, #9
 80007ac:	b5e0      	push	{r5, r6, r7, lr}
 80007ae:	0046      	lsls	r6, r0, #1
 80007b0:	4688      	mov	r8, r1
 80007b2:	0a64      	lsrs	r4, r4, #9
 80007b4:	0e36      	lsrs	r6, r6, #24
 80007b6:	0fc7      	lsrs	r7, r0, #31
 80007b8:	2e00      	cmp	r6, #0
 80007ba:	d063      	beq.n	8000884 <__aeabi_fdiv+0xe4>
 80007bc:	2eff      	cmp	r6, #255	; 0xff
 80007be:	d024      	beq.n	800080a <__aeabi_fdiv+0x6a>
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	00e4      	lsls	r4, r4, #3
 80007c4:	04db      	lsls	r3, r3, #19
 80007c6:	431c      	orrs	r4, r3
 80007c8:	2300      	movs	r3, #0
 80007ca:	4699      	mov	r9, r3
 80007cc:	469b      	mov	fp, r3
 80007ce:	3e7f      	subs	r6, #127	; 0x7f
 80007d0:	4643      	mov	r3, r8
 80007d2:	4642      	mov	r2, r8
 80007d4:	025d      	lsls	r5, r3, #9
 80007d6:	0fd2      	lsrs	r2, r2, #31
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	0a6d      	lsrs	r5, r5, #9
 80007dc:	0e1b      	lsrs	r3, r3, #24
 80007de:	4690      	mov	r8, r2
 80007e0:	4692      	mov	sl, r2
 80007e2:	d065      	beq.n	80008b0 <__aeabi_fdiv+0x110>
 80007e4:	2bff      	cmp	r3, #255	; 0xff
 80007e6:	d055      	beq.n	8000894 <__aeabi_fdiv+0xf4>
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	2100      	movs	r1, #0
 80007ec:	00ed      	lsls	r5, r5, #3
 80007ee:	04d2      	lsls	r2, r2, #19
 80007f0:	3b7f      	subs	r3, #127	; 0x7f
 80007f2:	4315      	orrs	r5, r2
 80007f4:	1af6      	subs	r6, r6, r3
 80007f6:	4643      	mov	r3, r8
 80007f8:	464a      	mov	r2, r9
 80007fa:	407b      	eors	r3, r7
 80007fc:	2a0f      	cmp	r2, #15
 80007fe:	d900      	bls.n	8000802 <__aeabi_fdiv+0x62>
 8000800:	e08d      	b.n	800091e <__aeabi_fdiv+0x17e>
 8000802:	486d      	ldr	r0, [pc, #436]	; (80009b8 <__aeabi_fdiv+0x218>)
 8000804:	0092      	lsls	r2, r2, #2
 8000806:	5882      	ldr	r2, [r0, r2]
 8000808:	4697      	mov	pc, r2
 800080a:	2c00      	cmp	r4, #0
 800080c:	d154      	bne.n	80008b8 <__aeabi_fdiv+0x118>
 800080e:	2308      	movs	r3, #8
 8000810:	4699      	mov	r9, r3
 8000812:	3b06      	subs	r3, #6
 8000814:	26ff      	movs	r6, #255	; 0xff
 8000816:	469b      	mov	fp, r3
 8000818:	e7da      	b.n	80007d0 <__aeabi_fdiv+0x30>
 800081a:	2500      	movs	r5, #0
 800081c:	4653      	mov	r3, sl
 800081e:	2902      	cmp	r1, #2
 8000820:	d01b      	beq.n	800085a <__aeabi_fdiv+0xba>
 8000822:	2903      	cmp	r1, #3
 8000824:	d100      	bne.n	8000828 <__aeabi_fdiv+0x88>
 8000826:	e0bf      	b.n	80009a8 <__aeabi_fdiv+0x208>
 8000828:	2901      	cmp	r1, #1
 800082a:	d028      	beq.n	800087e <__aeabi_fdiv+0xde>
 800082c:	0030      	movs	r0, r6
 800082e:	307f      	adds	r0, #127	; 0x7f
 8000830:	2800      	cmp	r0, #0
 8000832:	dd20      	ble.n	8000876 <__aeabi_fdiv+0xd6>
 8000834:	076a      	lsls	r2, r5, #29
 8000836:	d004      	beq.n	8000842 <__aeabi_fdiv+0xa2>
 8000838:	220f      	movs	r2, #15
 800083a:	402a      	ands	r2, r5
 800083c:	2a04      	cmp	r2, #4
 800083e:	d000      	beq.n	8000842 <__aeabi_fdiv+0xa2>
 8000840:	3504      	adds	r5, #4
 8000842:	012a      	lsls	r2, r5, #4
 8000844:	d503      	bpl.n	800084e <__aeabi_fdiv+0xae>
 8000846:	0030      	movs	r0, r6
 8000848:	4a5c      	ldr	r2, [pc, #368]	; (80009bc <__aeabi_fdiv+0x21c>)
 800084a:	3080      	adds	r0, #128	; 0x80
 800084c:	4015      	ands	r5, r2
 800084e:	28fe      	cmp	r0, #254	; 0xfe
 8000850:	dc03      	bgt.n	800085a <__aeabi_fdiv+0xba>
 8000852:	01ac      	lsls	r4, r5, #6
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	b2c2      	uxtb	r2, r0
 8000858:	e001      	b.n	800085e <__aeabi_fdiv+0xbe>
 800085a:	22ff      	movs	r2, #255	; 0xff
 800085c:	2400      	movs	r4, #0
 800085e:	0264      	lsls	r4, r4, #9
 8000860:	05d2      	lsls	r2, r2, #23
 8000862:	0a60      	lsrs	r0, r4, #9
 8000864:	07db      	lsls	r3, r3, #31
 8000866:	4310      	orrs	r0, r2
 8000868:	4318      	orrs	r0, r3
 800086a:	bc3c      	pop	{r2, r3, r4, r5}
 800086c:	4690      	mov	r8, r2
 800086e:	4699      	mov	r9, r3
 8000870:	46a2      	mov	sl, r4
 8000872:	46ab      	mov	fp, r5
 8000874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000876:	2201      	movs	r2, #1
 8000878:	1a10      	subs	r0, r2, r0
 800087a:	281b      	cmp	r0, #27
 800087c:	dd7c      	ble.n	8000978 <__aeabi_fdiv+0x1d8>
 800087e:	2200      	movs	r2, #0
 8000880:	2400      	movs	r4, #0
 8000882:	e7ec      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000884:	2c00      	cmp	r4, #0
 8000886:	d11d      	bne.n	80008c4 <__aeabi_fdiv+0x124>
 8000888:	2304      	movs	r3, #4
 800088a:	4699      	mov	r9, r3
 800088c:	3b03      	subs	r3, #3
 800088e:	2600      	movs	r6, #0
 8000890:	469b      	mov	fp, r3
 8000892:	e79d      	b.n	80007d0 <__aeabi_fdiv+0x30>
 8000894:	3eff      	subs	r6, #255	; 0xff
 8000896:	2d00      	cmp	r5, #0
 8000898:	d120      	bne.n	80008dc <__aeabi_fdiv+0x13c>
 800089a:	2102      	movs	r1, #2
 800089c:	4643      	mov	r3, r8
 800089e:	464a      	mov	r2, r9
 80008a0:	407b      	eors	r3, r7
 80008a2:	430a      	orrs	r2, r1
 80008a4:	2a0f      	cmp	r2, #15
 80008a6:	d8d8      	bhi.n	800085a <__aeabi_fdiv+0xba>
 80008a8:	4845      	ldr	r0, [pc, #276]	; (80009c0 <__aeabi_fdiv+0x220>)
 80008aa:	0092      	lsls	r2, r2, #2
 80008ac:	5882      	ldr	r2, [r0, r2]
 80008ae:	4697      	mov	pc, r2
 80008b0:	2d00      	cmp	r5, #0
 80008b2:	d119      	bne.n	80008e8 <__aeabi_fdiv+0x148>
 80008b4:	2101      	movs	r1, #1
 80008b6:	e7f1      	b.n	800089c <__aeabi_fdiv+0xfc>
 80008b8:	230c      	movs	r3, #12
 80008ba:	4699      	mov	r9, r3
 80008bc:	3b09      	subs	r3, #9
 80008be:	26ff      	movs	r6, #255	; 0xff
 80008c0:	469b      	mov	fp, r3
 80008c2:	e785      	b.n	80007d0 <__aeabi_fdiv+0x30>
 80008c4:	0020      	movs	r0, r4
 80008c6:	f000 ff7d 	bl	80017c4 <__clzsi2>
 80008ca:	2676      	movs	r6, #118	; 0x76
 80008cc:	1f43      	subs	r3, r0, #5
 80008ce:	409c      	lsls	r4, r3
 80008d0:	2300      	movs	r3, #0
 80008d2:	4276      	negs	r6, r6
 80008d4:	1a36      	subs	r6, r6, r0
 80008d6:	4699      	mov	r9, r3
 80008d8:	469b      	mov	fp, r3
 80008da:	e779      	b.n	80007d0 <__aeabi_fdiv+0x30>
 80008dc:	464a      	mov	r2, r9
 80008de:	2303      	movs	r3, #3
 80008e0:	431a      	orrs	r2, r3
 80008e2:	4691      	mov	r9, r2
 80008e4:	2103      	movs	r1, #3
 80008e6:	e786      	b.n	80007f6 <__aeabi_fdiv+0x56>
 80008e8:	0028      	movs	r0, r5
 80008ea:	f000 ff6b 	bl	80017c4 <__clzsi2>
 80008ee:	1f43      	subs	r3, r0, #5
 80008f0:	1836      	adds	r6, r6, r0
 80008f2:	409d      	lsls	r5, r3
 80008f4:	3676      	adds	r6, #118	; 0x76
 80008f6:	2100      	movs	r1, #0
 80008f8:	e77d      	b.n	80007f6 <__aeabi_fdiv+0x56>
 80008fa:	2480      	movs	r4, #128	; 0x80
 80008fc:	2300      	movs	r3, #0
 80008fe:	03e4      	lsls	r4, r4, #15
 8000900:	22ff      	movs	r2, #255	; 0xff
 8000902:	e7ac      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000904:	2500      	movs	r5, #0
 8000906:	2380      	movs	r3, #128	; 0x80
 8000908:	03db      	lsls	r3, r3, #15
 800090a:	421c      	tst	r4, r3
 800090c:	d028      	beq.n	8000960 <__aeabi_fdiv+0x1c0>
 800090e:	421d      	tst	r5, r3
 8000910:	d126      	bne.n	8000960 <__aeabi_fdiv+0x1c0>
 8000912:	432b      	orrs	r3, r5
 8000914:	025c      	lsls	r4, r3, #9
 8000916:	0a64      	lsrs	r4, r4, #9
 8000918:	4643      	mov	r3, r8
 800091a:	22ff      	movs	r2, #255	; 0xff
 800091c:	e79f      	b.n	800085e <__aeabi_fdiv+0xbe>
 800091e:	0162      	lsls	r2, r4, #5
 8000920:	016c      	lsls	r4, r5, #5
 8000922:	42a2      	cmp	r2, r4
 8000924:	d224      	bcs.n	8000970 <__aeabi_fdiv+0x1d0>
 8000926:	211b      	movs	r1, #27
 8000928:	2500      	movs	r5, #0
 800092a:	3e01      	subs	r6, #1
 800092c:	2701      	movs	r7, #1
 800092e:	0010      	movs	r0, r2
 8000930:	006d      	lsls	r5, r5, #1
 8000932:	0052      	lsls	r2, r2, #1
 8000934:	2800      	cmp	r0, #0
 8000936:	db01      	blt.n	800093c <__aeabi_fdiv+0x19c>
 8000938:	4294      	cmp	r4, r2
 800093a:	d801      	bhi.n	8000940 <__aeabi_fdiv+0x1a0>
 800093c:	1b12      	subs	r2, r2, r4
 800093e:	433d      	orrs	r5, r7
 8000940:	3901      	subs	r1, #1
 8000942:	2900      	cmp	r1, #0
 8000944:	d1f3      	bne.n	800092e <__aeabi_fdiv+0x18e>
 8000946:	0014      	movs	r4, r2
 8000948:	1e62      	subs	r2, r4, #1
 800094a:	4194      	sbcs	r4, r2
 800094c:	4325      	orrs	r5, r4
 800094e:	e76d      	b.n	800082c <__aeabi_fdiv+0x8c>
 8000950:	46ba      	mov	sl, r7
 8000952:	4659      	mov	r1, fp
 8000954:	0025      	movs	r5, r4
 8000956:	4653      	mov	r3, sl
 8000958:	2902      	cmp	r1, #2
 800095a:	d000      	beq.n	800095e <__aeabi_fdiv+0x1be>
 800095c:	e761      	b.n	8000822 <__aeabi_fdiv+0x82>
 800095e:	e77c      	b.n	800085a <__aeabi_fdiv+0xba>
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	03db      	lsls	r3, r3, #15
 8000964:	431c      	orrs	r4, r3
 8000966:	0264      	lsls	r4, r4, #9
 8000968:	0a64      	lsrs	r4, r4, #9
 800096a:	003b      	movs	r3, r7
 800096c:	22ff      	movs	r2, #255	; 0xff
 800096e:	e776      	b.n	800085e <__aeabi_fdiv+0xbe>
 8000970:	1b12      	subs	r2, r2, r4
 8000972:	211a      	movs	r1, #26
 8000974:	2501      	movs	r5, #1
 8000976:	e7d9      	b.n	800092c <__aeabi_fdiv+0x18c>
 8000978:	369e      	adds	r6, #158	; 0x9e
 800097a:	002a      	movs	r2, r5
 800097c:	40b5      	lsls	r5, r6
 800097e:	002c      	movs	r4, r5
 8000980:	40c2      	lsrs	r2, r0
 8000982:	1e65      	subs	r5, r4, #1
 8000984:	41ac      	sbcs	r4, r5
 8000986:	4314      	orrs	r4, r2
 8000988:	0762      	lsls	r2, r4, #29
 800098a:	d004      	beq.n	8000996 <__aeabi_fdiv+0x1f6>
 800098c:	220f      	movs	r2, #15
 800098e:	4022      	ands	r2, r4
 8000990:	2a04      	cmp	r2, #4
 8000992:	d000      	beq.n	8000996 <__aeabi_fdiv+0x1f6>
 8000994:	3404      	adds	r4, #4
 8000996:	0162      	lsls	r2, r4, #5
 8000998:	d403      	bmi.n	80009a2 <__aeabi_fdiv+0x202>
 800099a:	01a4      	lsls	r4, r4, #6
 800099c:	0a64      	lsrs	r4, r4, #9
 800099e:	2200      	movs	r2, #0
 80009a0:	e75d      	b.n	800085e <__aeabi_fdiv+0xbe>
 80009a2:	2201      	movs	r2, #1
 80009a4:	2400      	movs	r4, #0
 80009a6:	e75a      	b.n	800085e <__aeabi_fdiv+0xbe>
 80009a8:	2480      	movs	r4, #128	; 0x80
 80009aa:	03e4      	lsls	r4, r4, #15
 80009ac:	432c      	orrs	r4, r5
 80009ae:	0264      	lsls	r4, r4, #9
 80009b0:	0a64      	lsrs	r4, r4, #9
 80009b2:	22ff      	movs	r2, #255	; 0xff
 80009b4:	e753      	b.n	800085e <__aeabi_fdiv+0xbe>
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	08005d00 	.word	0x08005d00
 80009bc:	f7ffffff 	.word	0xf7ffffff
 80009c0:	08005d40 	.word	0x08005d40

080009c4 <__eqsf2>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	0042      	lsls	r2, r0, #1
 80009c8:	024e      	lsls	r6, r1, #9
 80009ca:	004c      	lsls	r4, r1, #1
 80009cc:	0245      	lsls	r5, r0, #9
 80009ce:	0a6d      	lsrs	r5, r5, #9
 80009d0:	0e12      	lsrs	r2, r2, #24
 80009d2:	0fc3      	lsrs	r3, r0, #31
 80009d4:	0a76      	lsrs	r6, r6, #9
 80009d6:	0e24      	lsrs	r4, r4, #24
 80009d8:	0fc9      	lsrs	r1, r1, #31
 80009da:	2aff      	cmp	r2, #255	; 0xff
 80009dc:	d00f      	beq.n	80009fe <__eqsf2+0x3a>
 80009de:	2cff      	cmp	r4, #255	; 0xff
 80009e0:	d011      	beq.n	8000a06 <__eqsf2+0x42>
 80009e2:	2001      	movs	r0, #1
 80009e4:	42a2      	cmp	r2, r4
 80009e6:	d000      	beq.n	80009ea <__eqsf2+0x26>
 80009e8:	bd70      	pop	{r4, r5, r6, pc}
 80009ea:	42b5      	cmp	r5, r6
 80009ec:	d1fc      	bne.n	80009e8 <__eqsf2+0x24>
 80009ee:	428b      	cmp	r3, r1
 80009f0:	d00d      	beq.n	8000a0e <__eqsf2+0x4a>
 80009f2:	2a00      	cmp	r2, #0
 80009f4:	d1f8      	bne.n	80009e8 <__eqsf2+0x24>
 80009f6:	0028      	movs	r0, r5
 80009f8:	1e45      	subs	r5, r0, #1
 80009fa:	41a8      	sbcs	r0, r5
 80009fc:	e7f4      	b.n	80009e8 <__eqsf2+0x24>
 80009fe:	2001      	movs	r0, #1
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d1f1      	bne.n	80009e8 <__eqsf2+0x24>
 8000a04:	e7eb      	b.n	80009de <__eqsf2+0x1a>
 8000a06:	2001      	movs	r0, #1
 8000a08:	2e00      	cmp	r6, #0
 8000a0a:	d1ed      	bne.n	80009e8 <__eqsf2+0x24>
 8000a0c:	e7e9      	b.n	80009e2 <__eqsf2+0x1e>
 8000a0e:	2000      	movs	r0, #0
 8000a10:	e7ea      	b.n	80009e8 <__eqsf2+0x24>
 8000a12:	46c0      	nop			; (mov r8, r8)

08000a14 <__gesf2>:
 8000a14:	b570      	push	{r4, r5, r6, lr}
 8000a16:	004a      	lsls	r2, r1, #1
 8000a18:	024e      	lsls	r6, r1, #9
 8000a1a:	0245      	lsls	r5, r0, #9
 8000a1c:	0044      	lsls	r4, r0, #1
 8000a1e:	0a6d      	lsrs	r5, r5, #9
 8000a20:	0e24      	lsrs	r4, r4, #24
 8000a22:	0fc3      	lsrs	r3, r0, #31
 8000a24:	0a76      	lsrs	r6, r6, #9
 8000a26:	0e12      	lsrs	r2, r2, #24
 8000a28:	0fc9      	lsrs	r1, r1, #31
 8000a2a:	2cff      	cmp	r4, #255	; 0xff
 8000a2c:	d015      	beq.n	8000a5a <__gesf2+0x46>
 8000a2e:	2aff      	cmp	r2, #255	; 0xff
 8000a30:	d00e      	beq.n	8000a50 <__gesf2+0x3c>
 8000a32:	2c00      	cmp	r4, #0
 8000a34:	d115      	bne.n	8000a62 <__gesf2+0x4e>
 8000a36:	2a00      	cmp	r2, #0
 8000a38:	d101      	bne.n	8000a3e <__gesf2+0x2a>
 8000a3a:	2e00      	cmp	r6, #0
 8000a3c:	d01c      	beq.n	8000a78 <__gesf2+0x64>
 8000a3e:	2d00      	cmp	r5, #0
 8000a40:	d014      	beq.n	8000a6c <__gesf2+0x58>
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d027      	beq.n	8000a96 <__gesf2+0x82>
 8000a46:	2002      	movs	r0, #2
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	4018      	ands	r0, r3
 8000a4c:	3801      	subs	r0, #1
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	2e00      	cmp	r6, #0
 8000a52:	d0ee      	beq.n	8000a32 <__gesf2+0x1e>
 8000a54:	2002      	movs	r0, #2
 8000a56:	4240      	negs	r0, r0
 8000a58:	e7f9      	b.n	8000a4e <__gesf2+0x3a>
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	d1fa      	bne.n	8000a54 <__gesf2+0x40>
 8000a5e:	2aff      	cmp	r2, #255	; 0xff
 8000a60:	d00e      	beq.n	8000a80 <__gesf2+0x6c>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d10e      	bne.n	8000a84 <__gesf2+0x70>
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	d0ed      	beq.n	8000a46 <__gesf2+0x32>
 8000a6a:	e00b      	b.n	8000a84 <__gesf2+0x70>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	3901      	subs	r1, #1
 8000a70:	4399      	bics	r1, r3
 8000a72:	0008      	movs	r0, r1
 8000a74:	3001      	adds	r0, #1
 8000a76:	e7ea      	b.n	8000a4e <__gesf2+0x3a>
 8000a78:	2000      	movs	r0, #0
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d0e7      	beq.n	8000a4e <__gesf2+0x3a>
 8000a7e:	e7e2      	b.n	8000a46 <__gesf2+0x32>
 8000a80:	2e00      	cmp	r6, #0
 8000a82:	d1e7      	bne.n	8000a54 <__gesf2+0x40>
 8000a84:	428b      	cmp	r3, r1
 8000a86:	d1de      	bne.n	8000a46 <__gesf2+0x32>
 8000a88:	4294      	cmp	r4, r2
 8000a8a:	dd05      	ble.n	8000a98 <__gesf2+0x84>
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	1e58      	subs	r0, r3, #1
 8000a90:	4008      	ands	r0, r1
 8000a92:	3801      	subs	r0, #1
 8000a94:	e7db      	b.n	8000a4e <__gesf2+0x3a>
 8000a96:	2400      	movs	r4, #0
 8000a98:	42a2      	cmp	r2, r4
 8000a9a:	dc04      	bgt.n	8000aa6 <__gesf2+0x92>
 8000a9c:	42b5      	cmp	r5, r6
 8000a9e:	d8d2      	bhi.n	8000a46 <__gesf2+0x32>
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	42b5      	cmp	r5, r6
 8000aa4:	d2d3      	bcs.n	8000a4e <__gesf2+0x3a>
 8000aa6:	1e58      	subs	r0, r3, #1
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	4398      	bics	r0, r3
 8000aac:	3001      	adds	r0, #1
 8000aae:	e7ce      	b.n	8000a4e <__gesf2+0x3a>

08000ab0 <__lesf2>:
 8000ab0:	b530      	push	{r4, r5, lr}
 8000ab2:	0042      	lsls	r2, r0, #1
 8000ab4:	0244      	lsls	r4, r0, #9
 8000ab6:	024d      	lsls	r5, r1, #9
 8000ab8:	0fc3      	lsrs	r3, r0, #31
 8000aba:	0048      	lsls	r0, r1, #1
 8000abc:	0a64      	lsrs	r4, r4, #9
 8000abe:	0e12      	lsrs	r2, r2, #24
 8000ac0:	0a6d      	lsrs	r5, r5, #9
 8000ac2:	0e00      	lsrs	r0, r0, #24
 8000ac4:	0fc9      	lsrs	r1, r1, #31
 8000ac6:	2aff      	cmp	r2, #255	; 0xff
 8000ac8:	d012      	beq.n	8000af0 <__lesf2+0x40>
 8000aca:	28ff      	cmp	r0, #255	; 0xff
 8000acc:	d00c      	beq.n	8000ae8 <__lesf2+0x38>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d112      	bne.n	8000af8 <__lesf2+0x48>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	d119      	bne.n	8000b0a <__lesf2+0x5a>
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d117      	bne.n	8000b0a <__lesf2+0x5a>
 8000ada:	2c00      	cmp	r4, #0
 8000adc:	d02b      	beq.n	8000b36 <__lesf2+0x86>
 8000ade:	2002      	movs	r0, #2
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	4018      	ands	r0, r3
 8000ae4:	3801      	subs	r0, #1
 8000ae6:	e026      	b.n	8000b36 <__lesf2+0x86>
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d0f0      	beq.n	8000ace <__lesf2+0x1e>
 8000aec:	2002      	movs	r0, #2
 8000aee:	e022      	b.n	8000b36 <__lesf2+0x86>
 8000af0:	2c00      	cmp	r4, #0
 8000af2:	d1fb      	bne.n	8000aec <__lesf2+0x3c>
 8000af4:	28ff      	cmp	r0, #255	; 0xff
 8000af6:	d01f      	beq.n	8000b38 <__lesf2+0x88>
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d11f      	bne.n	8000b3c <__lesf2+0x8c>
 8000afc:	2d00      	cmp	r5, #0
 8000afe:	d11d      	bne.n	8000b3c <__lesf2+0x8c>
 8000b00:	2002      	movs	r0, #2
 8000b02:	3b01      	subs	r3, #1
 8000b04:	4018      	ands	r0, r3
 8000b06:	3801      	subs	r0, #1
 8000b08:	e015      	b.n	8000b36 <__lesf2+0x86>
 8000b0a:	2c00      	cmp	r4, #0
 8000b0c:	d00e      	beq.n	8000b2c <__lesf2+0x7c>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d1e5      	bne.n	8000ade <__lesf2+0x2e>
 8000b12:	2200      	movs	r2, #0
 8000b14:	4290      	cmp	r0, r2
 8000b16:	dc04      	bgt.n	8000b22 <__lesf2+0x72>
 8000b18:	42ac      	cmp	r4, r5
 8000b1a:	d8e0      	bhi.n	8000ade <__lesf2+0x2e>
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	42ac      	cmp	r4, r5
 8000b20:	d209      	bcs.n	8000b36 <__lesf2+0x86>
 8000b22:	1e58      	subs	r0, r3, #1
 8000b24:	2301      	movs	r3, #1
 8000b26:	4398      	bics	r0, r3
 8000b28:	3001      	adds	r0, #1
 8000b2a:	e004      	b.n	8000b36 <__lesf2+0x86>
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	3901      	subs	r1, #1
 8000b30:	4399      	bics	r1, r3
 8000b32:	0008      	movs	r0, r1
 8000b34:	3001      	adds	r0, #1
 8000b36:	bd30      	pop	{r4, r5, pc}
 8000b38:	2d00      	cmp	r5, #0
 8000b3a:	d1d7      	bne.n	8000aec <__lesf2+0x3c>
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	d1ce      	bne.n	8000ade <__lesf2+0x2e>
 8000b40:	4282      	cmp	r2, r0
 8000b42:	dde7      	ble.n	8000b14 <__lesf2+0x64>
 8000b44:	2102      	movs	r1, #2
 8000b46:	1e58      	subs	r0, r3, #1
 8000b48:	4008      	ands	r0, r1
 8000b4a:	3801      	subs	r0, #1
 8000b4c:	e7f3      	b.n	8000b36 <__lesf2+0x86>
 8000b4e:	46c0      	nop			; (mov r8, r8)

08000b50 <__aeabi_fmul>:
 8000b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b52:	464e      	mov	r6, r9
 8000b54:	4657      	mov	r7, sl
 8000b56:	4645      	mov	r5, r8
 8000b58:	46de      	mov	lr, fp
 8000b5a:	b5e0      	push	{r5, r6, r7, lr}
 8000b5c:	0243      	lsls	r3, r0, #9
 8000b5e:	0a5b      	lsrs	r3, r3, #9
 8000b60:	0045      	lsls	r5, r0, #1
 8000b62:	b083      	sub	sp, #12
 8000b64:	1c0f      	adds	r7, r1, #0
 8000b66:	4699      	mov	r9, r3
 8000b68:	0e2d      	lsrs	r5, r5, #24
 8000b6a:	0fc6      	lsrs	r6, r0, #31
 8000b6c:	2d00      	cmp	r5, #0
 8000b6e:	d057      	beq.n	8000c20 <__aeabi_fmul+0xd0>
 8000b70:	2dff      	cmp	r5, #255	; 0xff
 8000b72:	d024      	beq.n	8000bbe <__aeabi_fmul+0x6e>
 8000b74:	2080      	movs	r0, #128	; 0x80
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	04c0      	lsls	r0, r0, #19
 8000b7a:	4318      	orrs	r0, r3
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	4681      	mov	r9, r0
 8000b80:	469a      	mov	sl, r3
 8000b82:	469b      	mov	fp, r3
 8000b84:	3d7f      	subs	r5, #127	; 0x7f
 8000b86:	027c      	lsls	r4, r7, #9
 8000b88:	007a      	lsls	r2, r7, #1
 8000b8a:	0ffb      	lsrs	r3, r7, #31
 8000b8c:	0a64      	lsrs	r4, r4, #9
 8000b8e:	0e12      	lsrs	r2, r2, #24
 8000b90:	4698      	mov	r8, r3
 8000b92:	d023      	beq.n	8000bdc <__aeabi_fmul+0x8c>
 8000b94:	2aff      	cmp	r2, #255	; 0xff
 8000b96:	d04b      	beq.n	8000c30 <__aeabi_fmul+0xe0>
 8000b98:	00e3      	lsls	r3, r4, #3
 8000b9a:	2480      	movs	r4, #128	; 0x80
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	04e4      	lsls	r4, r4, #19
 8000ba0:	3a7f      	subs	r2, #127	; 0x7f
 8000ba2:	431c      	orrs	r4, r3
 8000ba4:	18ad      	adds	r5, r5, r2
 8000ba6:	1c6b      	adds	r3, r5, #1
 8000ba8:	4647      	mov	r7, r8
 8000baa:	9301      	str	r3, [sp, #4]
 8000bac:	4653      	mov	r3, sl
 8000bae:	4077      	eors	r7, r6
 8000bb0:	003a      	movs	r2, r7
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	d848      	bhi.n	8000c48 <__aeabi_fmul+0xf8>
 8000bb6:	497d      	ldr	r1, [pc, #500]	; (8000dac <__aeabi_fmul+0x25c>)
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	58cb      	ldr	r3, [r1, r3]
 8000bbc:	469f      	mov	pc, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d000      	beq.n	8000bc4 <__aeabi_fmul+0x74>
 8000bc2:	e085      	b.n	8000cd0 <__aeabi_fmul+0x180>
 8000bc4:	3308      	adds	r3, #8
 8000bc6:	469a      	mov	sl, r3
 8000bc8:	3b06      	subs	r3, #6
 8000bca:	469b      	mov	fp, r3
 8000bcc:	027c      	lsls	r4, r7, #9
 8000bce:	007a      	lsls	r2, r7, #1
 8000bd0:	0ffb      	lsrs	r3, r7, #31
 8000bd2:	25ff      	movs	r5, #255	; 0xff
 8000bd4:	0a64      	lsrs	r4, r4, #9
 8000bd6:	0e12      	lsrs	r2, r2, #24
 8000bd8:	4698      	mov	r8, r3
 8000bda:	d1db      	bne.n	8000b94 <__aeabi_fmul+0x44>
 8000bdc:	2c00      	cmp	r4, #0
 8000bde:	d000      	beq.n	8000be2 <__aeabi_fmul+0x92>
 8000be0:	e090      	b.n	8000d04 <__aeabi_fmul+0x1b4>
 8000be2:	4652      	mov	r2, sl
 8000be4:	2301      	movs	r3, #1
 8000be6:	431a      	orrs	r2, r3
 8000be8:	4692      	mov	sl, r2
 8000bea:	2001      	movs	r0, #1
 8000bec:	e7db      	b.n	8000ba6 <__aeabi_fmul+0x56>
 8000bee:	464c      	mov	r4, r9
 8000bf0:	4658      	mov	r0, fp
 8000bf2:	0017      	movs	r7, r2
 8000bf4:	2802      	cmp	r0, #2
 8000bf6:	d024      	beq.n	8000c42 <__aeabi_fmul+0xf2>
 8000bf8:	2803      	cmp	r0, #3
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_fmul+0xae>
 8000bfc:	e0cf      	b.n	8000d9e <__aeabi_fmul+0x24e>
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2300      	movs	r3, #0
 8000c02:	2801      	cmp	r0, #1
 8000c04:	d14d      	bne.n	8000ca2 <__aeabi_fmul+0x152>
 8000c06:	0258      	lsls	r0, r3, #9
 8000c08:	05d2      	lsls	r2, r2, #23
 8000c0a:	0a40      	lsrs	r0, r0, #9
 8000c0c:	07ff      	lsls	r7, r7, #31
 8000c0e:	4310      	orrs	r0, r2
 8000c10:	4338      	orrs	r0, r7
 8000c12:	b003      	add	sp, #12
 8000c14:	bc3c      	pop	{r2, r3, r4, r5}
 8000c16:	4690      	mov	r8, r2
 8000c18:	4699      	mov	r9, r3
 8000c1a:	46a2      	mov	sl, r4
 8000c1c:	46ab      	mov	fp, r5
 8000c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d15b      	bne.n	8000cdc <__aeabi_fmul+0x18c>
 8000c24:	2304      	movs	r3, #4
 8000c26:	469a      	mov	sl, r3
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	2500      	movs	r5, #0
 8000c2c:	469b      	mov	fp, r3
 8000c2e:	e7aa      	b.n	8000b86 <__aeabi_fmul+0x36>
 8000c30:	35ff      	adds	r5, #255	; 0xff
 8000c32:	2c00      	cmp	r4, #0
 8000c34:	d160      	bne.n	8000cf8 <__aeabi_fmul+0x1a8>
 8000c36:	4652      	mov	r2, sl
 8000c38:	2302      	movs	r3, #2
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	4692      	mov	sl, r2
 8000c3e:	2002      	movs	r0, #2
 8000c40:	e7b1      	b.n	8000ba6 <__aeabi_fmul+0x56>
 8000c42:	22ff      	movs	r2, #255	; 0xff
 8000c44:	2300      	movs	r3, #0
 8000c46:	e7de      	b.n	8000c06 <__aeabi_fmul+0xb6>
 8000c48:	464b      	mov	r3, r9
 8000c4a:	0c1b      	lsrs	r3, r3, #16
 8000c4c:	469c      	mov	ip, r3
 8000c4e:	464b      	mov	r3, r9
 8000c50:	0426      	lsls	r6, r4, #16
 8000c52:	0c36      	lsrs	r6, r6, #16
 8000c54:	0418      	lsls	r0, r3, #16
 8000c56:	4661      	mov	r1, ip
 8000c58:	0033      	movs	r3, r6
 8000c5a:	0c22      	lsrs	r2, r4, #16
 8000c5c:	4664      	mov	r4, ip
 8000c5e:	0c00      	lsrs	r0, r0, #16
 8000c60:	4343      	muls	r3, r0
 8000c62:	434e      	muls	r6, r1
 8000c64:	4350      	muls	r0, r2
 8000c66:	4354      	muls	r4, r2
 8000c68:	1980      	adds	r0, r0, r6
 8000c6a:	0c1a      	lsrs	r2, r3, #16
 8000c6c:	1812      	adds	r2, r2, r0
 8000c6e:	4296      	cmp	r6, r2
 8000c70:	d903      	bls.n	8000c7a <__aeabi_fmul+0x12a>
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	0249      	lsls	r1, r1, #9
 8000c76:	468c      	mov	ip, r1
 8000c78:	4464      	add	r4, ip
 8000c7a:	041b      	lsls	r3, r3, #16
 8000c7c:	0c1b      	lsrs	r3, r3, #16
 8000c7e:	0410      	lsls	r0, r2, #16
 8000c80:	18c0      	adds	r0, r0, r3
 8000c82:	0183      	lsls	r3, r0, #6
 8000c84:	1e5e      	subs	r6, r3, #1
 8000c86:	41b3      	sbcs	r3, r6
 8000c88:	0e80      	lsrs	r0, r0, #26
 8000c8a:	4318      	orrs	r0, r3
 8000c8c:	0c13      	lsrs	r3, r2, #16
 8000c8e:	191b      	adds	r3, r3, r4
 8000c90:	019b      	lsls	r3, r3, #6
 8000c92:	4303      	orrs	r3, r0
 8000c94:	001c      	movs	r4, r3
 8000c96:	0123      	lsls	r3, r4, #4
 8000c98:	d579      	bpl.n	8000d8e <__aeabi_fmul+0x23e>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	0862      	lsrs	r2, r4, #1
 8000c9e:	401c      	ands	r4, r3
 8000ca0:	4314      	orrs	r4, r2
 8000ca2:	9a01      	ldr	r2, [sp, #4]
 8000ca4:	327f      	adds	r2, #127	; 0x7f
 8000ca6:	2a00      	cmp	r2, #0
 8000ca8:	dd4d      	ble.n	8000d46 <__aeabi_fmul+0x1f6>
 8000caa:	0763      	lsls	r3, r4, #29
 8000cac:	d004      	beq.n	8000cb8 <__aeabi_fmul+0x168>
 8000cae:	230f      	movs	r3, #15
 8000cb0:	4023      	ands	r3, r4
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	d000      	beq.n	8000cb8 <__aeabi_fmul+0x168>
 8000cb6:	3404      	adds	r4, #4
 8000cb8:	0123      	lsls	r3, r4, #4
 8000cba:	d503      	bpl.n	8000cc4 <__aeabi_fmul+0x174>
 8000cbc:	4b3c      	ldr	r3, [pc, #240]	; (8000db0 <__aeabi_fmul+0x260>)
 8000cbe:	9a01      	ldr	r2, [sp, #4]
 8000cc0:	401c      	ands	r4, r3
 8000cc2:	3280      	adds	r2, #128	; 0x80
 8000cc4:	2afe      	cmp	r2, #254	; 0xfe
 8000cc6:	dcbc      	bgt.n	8000c42 <__aeabi_fmul+0xf2>
 8000cc8:	01a3      	lsls	r3, r4, #6
 8000cca:	0a5b      	lsrs	r3, r3, #9
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	e79a      	b.n	8000c06 <__aeabi_fmul+0xb6>
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	3b09      	subs	r3, #9
 8000cd6:	25ff      	movs	r5, #255	; 0xff
 8000cd8:	469b      	mov	fp, r3
 8000cda:	e754      	b.n	8000b86 <__aeabi_fmul+0x36>
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f000 fd71 	bl	80017c4 <__clzsi2>
 8000ce2:	464a      	mov	r2, r9
 8000ce4:	1f43      	subs	r3, r0, #5
 8000ce6:	2576      	movs	r5, #118	; 0x76
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	2300      	movs	r3, #0
 8000cec:	426d      	negs	r5, r5
 8000cee:	4691      	mov	r9, r2
 8000cf0:	1a2d      	subs	r5, r5, r0
 8000cf2:	469a      	mov	sl, r3
 8000cf4:	469b      	mov	fp, r3
 8000cf6:	e746      	b.n	8000b86 <__aeabi_fmul+0x36>
 8000cf8:	4652      	mov	r2, sl
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	4692      	mov	sl, r2
 8000d00:	2003      	movs	r0, #3
 8000d02:	e750      	b.n	8000ba6 <__aeabi_fmul+0x56>
 8000d04:	0020      	movs	r0, r4
 8000d06:	f000 fd5d 	bl	80017c4 <__clzsi2>
 8000d0a:	1f43      	subs	r3, r0, #5
 8000d0c:	1a2d      	subs	r5, r5, r0
 8000d0e:	409c      	lsls	r4, r3
 8000d10:	3d76      	subs	r5, #118	; 0x76
 8000d12:	2000      	movs	r0, #0
 8000d14:	e747      	b.n	8000ba6 <__aeabi_fmul+0x56>
 8000d16:	2380      	movs	r3, #128	; 0x80
 8000d18:	2700      	movs	r7, #0
 8000d1a:	03db      	lsls	r3, r3, #15
 8000d1c:	22ff      	movs	r2, #255	; 0xff
 8000d1e:	e772      	b.n	8000c06 <__aeabi_fmul+0xb6>
 8000d20:	4642      	mov	r2, r8
 8000d22:	e766      	b.n	8000bf2 <__aeabi_fmul+0xa2>
 8000d24:	464c      	mov	r4, r9
 8000d26:	0032      	movs	r2, r6
 8000d28:	4658      	mov	r0, fp
 8000d2a:	e762      	b.n	8000bf2 <__aeabi_fmul+0xa2>
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	464a      	mov	r2, r9
 8000d30:	03db      	lsls	r3, r3, #15
 8000d32:	421a      	tst	r2, r3
 8000d34:	d022      	beq.n	8000d7c <__aeabi_fmul+0x22c>
 8000d36:	421c      	tst	r4, r3
 8000d38:	d120      	bne.n	8000d7c <__aeabi_fmul+0x22c>
 8000d3a:	4323      	orrs	r3, r4
 8000d3c:	025b      	lsls	r3, r3, #9
 8000d3e:	0a5b      	lsrs	r3, r3, #9
 8000d40:	4647      	mov	r7, r8
 8000d42:	22ff      	movs	r2, #255	; 0xff
 8000d44:	e75f      	b.n	8000c06 <__aeabi_fmul+0xb6>
 8000d46:	2301      	movs	r3, #1
 8000d48:	1a9a      	subs	r2, r3, r2
 8000d4a:	2a1b      	cmp	r2, #27
 8000d4c:	dc21      	bgt.n	8000d92 <__aeabi_fmul+0x242>
 8000d4e:	0023      	movs	r3, r4
 8000d50:	9901      	ldr	r1, [sp, #4]
 8000d52:	40d3      	lsrs	r3, r2
 8000d54:	319e      	adds	r1, #158	; 0x9e
 8000d56:	408c      	lsls	r4, r1
 8000d58:	001a      	movs	r2, r3
 8000d5a:	0023      	movs	r3, r4
 8000d5c:	1e5c      	subs	r4, r3, #1
 8000d5e:	41a3      	sbcs	r3, r4
 8000d60:	4313      	orrs	r3, r2
 8000d62:	075a      	lsls	r2, r3, #29
 8000d64:	d004      	beq.n	8000d70 <__aeabi_fmul+0x220>
 8000d66:	220f      	movs	r2, #15
 8000d68:	401a      	ands	r2, r3
 8000d6a:	2a04      	cmp	r2, #4
 8000d6c:	d000      	beq.n	8000d70 <__aeabi_fmul+0x220>
 8000d6e:	3304      	adds	r3, #4
 8000d70:	015a      	lsls	r2, r3, #5
 8000d72:	d411      	bmi.n	8000d98 <__aeabi_fmul+0x248>
 8000d74:	019b      	lsls	r3, r3, #6
 8000d76:	0a5b      	lsrs	r3, r3, #9
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e744      	b.n	8000c06 <__aeabi_fmul+0xb6>
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	464a      	mov	r2, r9
 8000d80:	03db      	lsls	r3, r3, #15
 8000d82:	4313      	orrs	r3, r2
 8000d84:	025b      	lsls	r3, r3, #9
 8000d86:	0a5b      	lsrs	r3, r3, #9
 8000d88:	0037      	movs	r7, r6
 8000d8a:	22ff      	movs	r2, #255	; 0xff
 8000d8c:	e73b      	b.n	8000c06 <__aeabi_fmul+0xb6>
 8000d8e:	9501      	str	r5, [sp, #4]
 8000d90:	e787      	b.n	8000ca2 <__aeabi_fmul+0x152>
 8000d92:	2200      	movs	r2, #0
 8000d94:	2300      	movs	r3, #0
 8000d96:	e736      	b.n	8000c06 <__aeabi_fmul+0xb6>
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e733      	b.n	8000c06 <__aeabi_fmul+0xb6>
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	03db      	lsls	r3, r3, #15
 8000da2:	4323      	orrs	r3, r4
 8000da4:	025b      	lsls	r3, r3, #9
 8000da6:	0a5b      	lsrs	r3, r3, #9
 8000da8:	22ff      	movs	r2, #255	; 0xff
 8000daa:	e72c      	b.n	8000c06 <__aeabi_fmul+0xb6>
 8000dac:	08005d80 	.word	0x08005d80
 8000db0:	f7ffffff 	.word	0xf7ffffff

08000db4 <__aeabi_fsub>:
 8000db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db6:	4647      	mov	r7, r8
 8000db8:	46ce      	mov	lr, r9
 8000dba:	0044      	lsls	r4, r0, #1
 8000dbc:	0fc2      	lsrs	r2, r0, #31
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	0247      	lsls	r7, r0, #9
 8000dc2:	0248      	lsls	r0, r1, #9
 8000dc4:	0a40      	lsrs	r0, r0, #9
 8000dc6:	4684      	mov	ip, r0
 8000dc8:	4666      	mov	r6, ip
 8000dca:	0048      	lsls	r0, r1, #1
 8000dcc:	0a7f      	lsrs	r7, r7, #9
 8000dce:	0e24      	lsrs	r4, r4, #24
 8000dd0:	00f6      	lsls	r6, r6, #3
 8000dd2:	0025      	movs	r5, r4
 8000dd4:	4690      	mov	r8, r2
 8000dd6:	00fb      	lsls	r3, r7, #3
 8000dd8:	0e00      	lsrs	r0, r0, #24
 8000dda:	0fc9      	lsrs	r1, r1, #31
 8000ddc:	46b1      	mov	r9, r6
 8000dde:	28ff      	cmp	r0, #255	; 0xff
 8000de0:	d100      	bne.n	8000de4 <__aeabi_fsub+0x30>
 8000de2:	e085      	b.n	8000ef0 <__aeabi_fsub+0x13c>
 8000de4:	2601      	movs	r6, #1
 8000de6:	4071      	eors	r1, r6
 8000de8:	1a26      	subs	r6, r4, r0
 8000dea:	4291      	cmp	r1, r2
 8000dec:	d057      	beq.n	8000e9e <__aeabi_fsub+0xea>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	dd43      	ble.n	8000e7a <__aeabi_fsub+0xc6>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d000      	beq.n	8000df8 <__aeabi_fsub+0x44>
 8000df6:	e07f      	b.n	8000ef8 <__aeabi_fsub+0x144>
 8000df8:	4649      	mov	r1, r9
 8000dfa:	2900      	cmp	r1, #0
 8000dfc:	d100      	bne.n	8000e00 <__aeabi_fsub+0x4c>
 8000dfe:	e0aa      	b.n	8000f56 <__aeabi_fsub+0x1a2>
 8000e00:	3e01      	subs	r6, #1
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	d000      	beq.n	8000e08 <__aeabi_fsub+0x54>
 8000e06:	e0f7      	b.n	8000ff8 <__aeabi_fsub+0x244>
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	015a      	lsls	r2, r3, #5
 8000e0c:	d400      	bmi.n	8000e10 <__aeabi_fsub+0x5c>
 8000e0e:	e08b      	b.n	8000f28 <__aeabi_fsub+0x174>
 8000e10:	019b      	lsls	r3, r3, #6
 8000e12:	099c      	lsrs	r4, r3, #6
 8000e14:	0020      	movs	r0, r4
 8000e16:	f000 fcd5 	bl	80017c4 <__clzsi2>
 8000e1a:	3805      	subs	r0, #5
 8000e1c:	4084      	lsls	r4, r0
 8000e1e:	4285      	cmp	r5, r0
 8000e20:	dd00      	ble.n	8000e24 <__aeabi_fsub+0x70>
 8000e22:	e0d3      	b.n	8000fcc <__aeabi_fsub+0x218>
 8000e24:	1b45      	subs	r5, r0, r5
 8000e26:	0023      	movs	r3, r4
 8000e28:	2020      	movs	r0, #32
 8000e2a:	3501      	adds	r5, #1
 8000e2c:	40eb      	lsrs	r3, r5
 8000e2e:	1b45      	subs	r5, r0, r5
 8000e30:	40ac      	lsls	r4, r5
 8000e32:	1e62      	subs	r2, r4, #1
 8000e34:	4194      	sbcs	r4, r2
 8000e36:	4323      	orrs	r3, r4
 8000e38:	2407      	movs	r4, #7
 8000e3a:	2500      	movs	r5, #0
 8000e3c:	401c      	ands	r4, r3
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4641      	mov	r1, r8
 8000e42:	400a      	ands	r2, r1
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d004      	beq.n	8000e52 <__aeabi_fsub+0x9e>
 8000e48:	210f      	movs	r1, #15
 8000e4a:	4019      	ands	r1, r3
 8000e4c:	2904      	cmp	r1, #4
 8000e4e:	d000      	beq.n	8000e52 <__aeabi_fsub+0x9e>
 8000e50:	3304      	adds	r3, #4
 8000e52:	0159      	lsls	r1, r3, #5
 8000e54:	d400      	bmi.n	8000e58 <__aeabi_fsub+0xa4>
 8000e56:	e080      	b.n	8000f5a <__aeabi_fsub+0x1a6>
 8000e58:	3501      	adds	r5, #1
 8000e5a:	b2ec      	uxtb	r4, r5
 8000e5c:	2dff      	cmp	r5, #255	; 0xff
 8000e5e:	d000      	beq.n	8000e62 <__aeabi_fsub+0xae>
 8000e60:	e0a3      	b.n	8000faa <__aeabi_fsub+0x1f6>
 8000e62:	24ff      	movs	r4, #255	; 0xff
 8000e64:	2300      	movs	r3, #0
 8000e66:	025b      	lsls	r3, r3, #9
 8000e68:	05e4      	lsls	r4, r4, #23
 8000e6a:	0a58      	lsrs	r0, r3, #9
 8000e6c:	07d2      	lsls	r2, r2, #31
 8000e6e:	4320      	orrs	r0, r4
 8000e70:	4310      	orrs	r0, r2
 8000e72:	bc0c      	pop	{r2, r3}
 8000e74:	4690      	mov	r8, r2
 8000e76:	4699      	mov	r9, r3
 8000e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e7a:	2e00      	cmp	r6, #0
 8000e7c:	d174      	bne.n	8000f68 <__aeabi_fsub+0x1b4>
 8000e7e:	1c60      	adds	r0, r4, #1
 8000e80:	b2c0      	uxtb	r0, r0
 8000e82:	2801      	cmp	r0, #1
 8000e84:	dc00      	bgt.n	8000e88 <__aeabi_fsub+0xd4>
 8000e86:	e0a7      	b.n	8000fd8 <__aeabi_fsub+0x224>
 8000e88:	464a      	mov	r2, r9
 8000e8a:	1a9c      	subs	r4, r3, r2
 8000e8c:	0162      	lsls	r2, r4, #5
 8000e8e:	d500      	bpl.n	8000e92 <__aeabi_fsub+0xde>
 8000e90:	e0b6      	b.n	8001000 <__aeabi_fsub+0x24c>
 8000e92:	2c00      	cmp	r4, #0
 8000e94:	d1be      	bne.n	8000e14 <__aeabi_fsub+0x60>
 8000e96:	2200      	movs	r2, #0
 8000e98:	2400      	movs	r4, #0
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e7e3      	b.n	8000e66 <__aeabi_fsub+0xb2>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	dc00      	bgt.n	8000ea4 <__aeabi_fsub+0xf0>
 8000ea2:	e085      	b.n	8000fb0 <__aeabi_fsub+0x1fc>
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	d046      	beq.n	8000f36 <__aeabi_fsub+0x182>
 8000ea8:	2cff      	cmp	r4, #255	; 0xff
 8000eaa:	d049      	beq.n	8000f40 <__aeabi_fsub+0x18c>
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	4648      	mov	r0, r9
 8000eb0:	04d2      	lsls	r2, r2, #19
 8000eb2:	4310      	orrs	r0, r2
 8000eb4:	4681      	mov	r9, r0
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2e1b      	cmp	r6, #27
 8000eba:	dc09      	bgt.n	8000ed0 <__aeabi_fsub+0x11c>
 8000ebc:	2020      	movs	r0, #32
 8000ebe:	464c      	mov	r4, r9
 8000ec0:	1b80      	subs	r0, r0, r6
 8000ec2:	4084      	lsls	r4, r0
 8000ec4:	464a      	mov	r2, r9
 8000ec6:	0020      	movs	r0, r4
 8000ec8:	40f2      	lsrs	r2, r6
 8000eca:	1e44      	subs	r4, r0, #1
 8000ecc:	41a0      	sbcs	r0, r4
 8000ece:	4302      	orrs	r2, r0
 8000ed0:	189b      	adds	r3, r3, r2
 8000ed2:	015a      	lsls	r2, r3, #5
 8000ed4:	d528      	bpl.n	8000f28 <__aeabi_fsub+0x174>
 8000ed6:	3501      	adds	r5, #1
 8000ed8:	2dff      	cmp	r5, #255	; 0xff
 8000eda:	d100      	bne.n	8000ede <__aeabi_fsub+0x12a>
 8000edc:	e0a8      	b.n	8001030 <__aeabi_fsub+0x27c>
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2407      	movs	r4, #7
 8000ee2:	4994      	ldr	r1, [pc, #592]	; (8001134 <__aeabi_fsub+0x380>)
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	085b      	lsrs	r3, r3, #1
 8000ee8:	400b      	ands	r3, r1
 8000eea:	4313      	orrs	r3, r2
 8000eec:	401c      	ands	r4, r3
 8000eee:	e7a6      	b.n	8000e3e <__aeabi_fsub+0x8a>
 8000ef0:	2e00      	cmp	r6, #0
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_fsub+0x142>
 8000ef4:	e778      	b.n	8000de8 <__aeabi_fsub+0x34>
 8000ef6:	e775      	b.n	8000de4 <__aeabi_fsub+0x30>
 8000ef8:	2cff      	cmp	r4, #255	; 0xff
 8000efa:	d054      	beq.n	8000fa6 <__aeabi_fsub+0x1f2>
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	4649      	mov	r1, r9
 8000f00:	04d2      	lsls	r2, r2, #19
 8000f02:	4311      	orrs	r1, r2
 8000f04:	4689      	mov	r9, r1
 8000f06:	2201      	movs	r2, #1
 8000f08:	2e1b      	cmp	r6, #27
 8000f0a:	dc09      	bgt.n	8000f20 <__aeabi_fsub+0x16c>
 8000f0c:	2120      	movs	r1, #32
 8000f0e:	4648      	mov	r0, r9
 8000f10:	1b89      	subs	r1, r1, r6
 8000f12:	4088      	lsls	r0, r1
 8000f14:	464a      	mov	r2, r9
 8000f16:	0001      	movs	r1, r0
 8000f18:	40f2      	lsrs	r2, r6
 8000f1a:	1e48      	subs	r0, r1, #1
 8000f1c:	4181      	sbcs	r1, r0
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	1a9b      	subs	r3, r3, r2
 8000f22:	015a      	lsls	r2, r3, #5
 8000f24:	d500      	bpl.n	8000f28 <__aeabi_fsub+0x174>
 8000f26:	e773      	b.n	8000e10 <__aeabi_fsub+0x5c>
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4641      	mov	r1, r8
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	0759      	lsls	r1, r3, #29
 8000f30:	d000      	beq.n	8000f34 <__aeabi_fsub+0x180>
 8000f32:	e789      	b.n	8000e48 <__aeabi_fsub+0x94>
 8000f34:	e011      	b.n	8000f5a <__aeabi_fsub+0x1a6>
 8000f36:	4648      	mov	r0, r9
 8000f38:	2800      	cmp	r0, #0
 8000f3a:	d158      	bne.n	8000fee <__aeabi_fsub+0x23a>
 8000f3c:	2cff      	cmp	r4, #255	; 0xff
 8000f3e:	d10c      	bne.n	8000f5a <__aeabi_fsub+0x1a6>
 8000f40:	08db      	lsrs	r3, r3, #3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x194>
 8000f46:	e78c      	b.n	8000e62 <__aeabi_fsub+0xae>
 8000f48:	2080      	movs	r0, #128	; 0x80
 8000f4a:	03c0      	lsls	r0, r0, #15
 8000f4c:	4303      	orrs	r3, r0
 8000f4e:	025b      	lsls	r3, r3, #9
 8000f50:	0a5b      	lsrs	r3, r3, #9
 8000f52:	24ff      	movs	r4, #255	; 0xff
 8000f54:	e787      	b.n	8000e66 <__aeabi_fsub+0xb2>
 8000f56:	2cff      	cmp	r4, #255	; 0xff
 8000f58:	d025      	beq.n	8000fa6 <__aeabi_fsub+0x1f2>
 8000f5a:	08db      	lsrs	r3, r3, #3
 8000f5c:	2dff      	cmp	r5, #255	; 0xff
 8000f5e:	d0f0      	beq.n	8000f42 <__aeabi_fsub+0x18e>
 8000f60:	025b      	lsls	r3, r3, #9
 8000f62:	0a5b      	lsrs	r3, r3, #9
 8000f64:	b2ec      	uxtb	r4, r5
 8000f66:	e77e      	b.n	8000e66 <__aeabi_fsub+0xb2>
 8000f68:	2c00      	cmp	r4, #0
 8000f6a:	d04d      	beq.n	8001008 <__aeabi_fsub+0x254>
 8000f6c:	28ff      	cmp	r0, #255	; 0xff
 8000f6e:	d018      	beq.n	8000fa2 <__aeabi_fsub+0x1ee>
 8000f70:	2480      	movs	r4, #128	; 0x80
 8000f72:	04e4      	lsls	r4, r4, #19
 8000f74:	4272      	negs	r2, r6
 8000f76:	4323      	orrs	r3, r4
 8000f78:	2a1b      	cmp	r2, #27
 8000f7a:	dd00      	ble.n	8000f7e <__aeabi_fsub+0x1ca>
 8000f7c:	e0c4      	b.n	8001108 <__aeabi_fsub+0x354>
 8000f7e:	001c      	movs	r4, r3
 8000f80:	2520      	movs	r5, #32
 8000f82:	40d4      	lsrs	r4, r2
 8000f84:	1aaa      	subs	r2, r5, r2
 8000f86:	4093      	lsls	r3, r2
 8000f88:	1e5a      	subs	r2, r3, #1
 8000f8a:	4193      	sbcs	r3, r2
 8000f8c:	4323      	orrs	r3, r4
 8000f8e:	464a      	mov	r2, r9
 8000f90:	0005      	movs	r5, r0
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	4688      	mov	r8, r1
 8000f96:	e738      	b.n	8000e0a <__aeabi_fsub+0x56>
 8000f98:	1c72      	adds	r2, r6, #1
 8000f9a:	d0f8      	beq.n	8000f8e <__aeabi_fsub+0x1da>
 8000f9c:	43f2      	mvns	r2, r6
 8000f9e:	28ff      	cmp	r0, #255	; 0xff
 8000fa0:	d1ea      	bne.n	8000f78 <__aeabi_fsub+0x1c4>
 8000fa2:	000a      	movs	r2, r1
 8000fa4:	464b      	mov	r3, r9
 8000fa6:	25ff      	movs	r5, #255	; 0xff
 8000fa8:	e7d7      	b.n	8000f5a <__aeabi_fsub+0x1a6>
 8000faa:	019b      	lsls	r3, r3, #6
 8000fac:	0a5b      	lsrs	r3, r3, #9
 8000fae:	e75a      	b.n	8000e66 <__aeabi_fsub+0xb2>
 8000fb0:	2e00      	cmp	r6, #0
 8000fb2:	d141      	bne.n	8001038 <__aeabi_fsub+0x284>
 8000fb4:	1c65      	adds	r5, r4, #1
 8000fb6:	b2e9      	uxtb	r1, r5
 8000fb8:	2901      	cmp	r1, #1
 8000fba:	dd45      	ble.n	8001048 <__aeabi_fsub+0x294>
 8000fbc:	2dff      	cmp	r5, #255	; 0xff
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_fsub+0x20e>
 8000fc0:	e74f      	b.n	8000e62 <__aeabi_fsub+0xae>
 8000fc2:	2407      	movs	r4, #7
 8000fc4:	444b      	add	r3, r9
 8000fc6:	085b      	lsrs	r3, r3, #1
 8000fc8:	401c      	ands	r4, r3
 8000fca:	e738      	b.n	8000e3e <__aeabi_fsub+0x8a>
 8000fcc:	2207      	movs	r2, #7
 8000fce:	4b5a      	ldr	r3, [pc, #360]	; (8001138 <__aeabi_fsub+0x384>)
 8000fd0:	1a2d      	subs	r5, r5, r0
 8000fd2:	4023      	ands	r3, r4
 8000fd4:	4014      	ands	r4, r2
 8000fd6:	e732      	b.n	8000e3e <__aeabi_fsub+0x8a>
 8000fd8:	2c00      	cmp	r4, #0
 8000fda:	d11d      	bne.n	8001018 <__aeabi_fsub+0x264>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d17a      	bne.n	80010d6 <__aeabi_fsub+0x322>
 8000fe0:	464b      	mov	r3, r9
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_fsub+0x234>
 8000fe6:	e091      	b.n	800110c <__aeabi_fsub+0x358>
 8000fe8:	000a      	movs	r2, r1
 8000fea:	2500      	movs	r5, #0
 8000fec:	e7b5      	b.n	8000f5a <__aeabi_fsub+0x1a6>
 8000fee:	3e01      	subs	r6, #1
 8000ff0:	2e00      	cmp	r6, #0
 8000ff2:	d119      	bne.n	8001028 <__aeabi_fsub+0x274>
 8000ff4:	444b      	add	r3, r9
 8000ff6:	e76c      	b.n	8000ed2 <__aeabi_fsub+0x11e>
 8000ff8:	2cff      	cmp	r4, #255	; 0xff
 8000ffa:	d184      	bne.n	8000f06 <__aeabi_fsub+0x152>
 8000ffc:	25ff      	movs	r5, #255	; 0xff
 8000ffe:	e7ac      	b.n	8000f5a <__aeabi_fsub+0x1a6>
 8001000:	464a      	mov	r2, r9
 8001002:	4688      	mov	r8, r1
 8001004:	1ad4      	subs	r4, r2, r3
 8001006:	e705      	b.n	8000e14 <__aeabi_fsub+0x60>
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1c5      	bne.n	8000f98 <__aeabi_fsub+0x1e4>
 800100c:	000a      	movs	r2, r1
 800100e:	28ff      	cmp	r0, #255	; 0xff
 8001010:	d0c8      	beq.n	8000fa4 <__aeabi_fsub+0x1f0>
 8001012:	0005      	movs	r5, r0
 8001014:	464b      	mov	r3, r9
 8001016:	e7a0      	b.n	8000f5a <__aeabi_fsub+0x1a6>
 8001018:	2b00      	cmp	r3, #0
 800101a:	d149      	bne.n	80010b0 <__aeabi_fsub+0x2fc>
 800101c:	464b      	mov	r3, r9
 800101e:	2b00      	cmp	r3, #0
 8001020:	d077      	beq.n	8001112 <__aeabi_fsub+0x35e>
 8001022:	000a      	movs	r2, r1
 8001024:	25ff      	movs	r5, #255	; 0xff
 8001026:	e798      	b.n	8000f5a <__aeabi_fsub+0x1a6>
 8001028:	2cff      	cmp	r4, #255	; 0xff
 800102a:	d000      	beq.n	800102e <__aeabi_fsub+0x27a>
 800102c:	e743      	b.n	8000eb6 <__aeabi_fsub+0x102>
 800102e:	e787      	b.n	8000f40 <__aeabi_fsub+0x18c>
 8001030:	000a      	movs	r2, r1
 8001032:	24ff      	movs	r4, #255	; 0xff
 8001034:	2300      	movs	r3, #0
 8001036:	e716      	b.n	8000e66 <__aeabi_fsub+0xb2>
 8001038:	2c00      	cmp	r4, #0
 800103a:	d115      	bne.n	8001068 <__aeabi_fsub+0x2b4>
 800103c:	2b00      	cmp	r3, #0
 800103e:	d157      	bne.n	80010f0 <__aeabi_fsub+0x33c>
 8001040:	28ff      	cmp	r0, #255	; 0xff
 8001042:	d1e6      	bne.n	8001012 <__aeabi_fsub+0x25e>
 8001044:	464b      	mov	r3, r9
 8001046:	e77b      	b.n	8000f40 <__aeabi_fsub+0x18c>
 8001048:	2c00      	cmp	r4, #0
 800104a:	d120      	bne.n	800108e <__aeabi_fsub+0x2da>
 800104c:	2b00      	cmp	r3, #0
 800104e:	d057      	beq.n	8001100 <__aeabi_fsub+0x34c>
 8001050:	4649      	mov	r1, r9
 8001052:	2900      	cmp	r1, #0
 8001054:	d053      	beq.n	80010fe <__aeabi_fsub+0x34a>
 8001056:	444b      	add	r3, r9
 8001058:	015a      	lsls	r2, r3, #5
 800105a:	d568      	bpl.n	800112e <__aeabi_fsub+0x37a>
 800105c:	2407      	movs	r4, #7
 800105e:	4a36      	ldr	r2, [pc, #216]	; (8001138 <__aeabi_fsub+0x384>)
 8001060:	401c      	ands	r4, r3
 8001062:	2501      	movs	r5, #1
 8001064:	4013      	ands	r3, r2
 8001066:	e6ea      	b.n	8000e3e <__aeabi_fsub+0x8a>
 8001068:	28ff      	cmp	r0, #255	; 0xff
 800106a:	d0eb      	beq.n	8001044 <__aeabi_fsub+0x290>
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	04d2      	lsls	r2, r2, #19
 8001070:	4276      	negs	r6, r6
 8001072:	4313      	orrs	r3, r2
 8001074:	2e1b      	cmp	r6, #27
 8001076:	dc53      	bgt.n	8001120 <__aeabi_fsub+0x36c>
 8001078:	2520      	movs	r5, #32
 800107a:	1bad      	subs	r5, r5, r6
 800107c:	001a      	movs	r2, r3
 800107e:	40ab      	lsls	r3, r5
 8001080:	40f2      	lsrs	r2, r6
 8001082:	1e5c      	subs	r4, r3, #1
 8001084:	41a3      	sbcs	r3, r4
 8001086:	4313      	orrs	r3, r2
 8001088:	444b      	add	r3, r9
 800108a:	0005      	movs	r5, r0
 800108c:	e721      	b.n	8000ed2 <__aeabi_fsub+0x11e>
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0d8      	beq.n	8001044 <__aeabi_fsub+0x290>
 8001092:	4649      	mov	r1, r9
 8001094:	2900      	cmp	r1, #0
 8001096:	d100      	bne.n	800109a <__aeabi_fsub+0x2e6>
 8001098:	e752      	b.n	8000f40 <__aeabi_fsub+0x18c>
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	03c9      	lsls	r1, r1, #15
 800109e:	420f      	tst	r7, r1
 80010a0:	d100      	bne.n	80010a4 <__aeabi_fsub+0x2f0>
 80010a2:	e74d      	b.n	8000f40 <__aeabi_fsub+0x18c>
 80010a4:	4660      	mov	r0, ip
 80010a6:	4208      	tst	r0, r1
 80010a8:	d000      	beq.n	80010ac <__aeabi_fsub+0x2f8>
 80010aa:	e749      	b.n	8000f40 <__aeabi_fsub+0x18c>
 80010ac:	464b      	mov	r3, r9
 80010ae:	e747      	b.n	8000f40 <__aeabi_fsub+0x18c>
 80010b0:	4648      	mov	r0, r9
 80010b2:	25ff      	movs	r5, #255	; 0xff
 80010b4:	2800      	cmp	r0, #0
 80010b6:	d100      	bne.n	80010ba <__aeabi_fsub+0x306>
 80010b8:	e74f      	b.n	8000f5a <__aeabi_fsub+0x1a6>
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	03d2      	lsls	r2, r2, #15
 80010be:	4217      	tst	r7, r2
 80010c0:	d004      	beq.n	80010cc <__aeabi_fsub+0x318>
 80010c2:	4660      	mov	r0, ip
 80010c4:	4210      	tst	r0, r2
 80010c6:	d101      	bne.n	80010cc <__aeabi_fsub+0x318>
 80010c8:	464b      	mov	r3, r9
 80010ca:	4688      	mov	r8, r1
 80010cc:	2201      	movs	r2, #1
 80010ce:	4641      	mov	r1, r8
 80010d0:	25ff      	movs	r5, #255	; 0xff
 80010d2:	400a      	ands	r2, r1
 80010d4:	e741      	b.n	8000f5a <__aeabi_fsub+0x1a6>
 80010d6:	4648      	mov	r0, r9
 80010d8:	2800      	cmp	r0, #0
 80010da:	d01f      	beq.n	800111c <__aeabi_fsub+0x368>
 80010dc:	1a1a      	subs	r2, r3, r0
 80010de:	0150      	lsls	r0, r2, #5
 80010e0:	d520      	bpl.n	8001124 <__aeabi_fsub+0x370>
 80010e2:	464a      	mov	r2, r9
 80010e4:	2407      	movs	r4, #7
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	401c      	ands	r4, r3
 80010ea:	4688      	mov	r8, r1
 80010ec:	2500      	movs	r5, #0
 80010ee:	e6a6      	b.n	8000e3e <__aeabi_fsub+0x8a>
 80010f0:	1c74      	adds	r4, r6, #1
 80010f2:	d0c9      	beq.n	8001088 <__aeabi_fsub+0x2d4>
 80010f4:	43f6      	mvns	r6, r6
 80010f6:	28ff      	cmp	r0, #255	; 0xff
 80010f8:	d1bc      	bne.n	8001074 <__aeabi_fsub+0x2c0>
 80010fa:	464b      	mov	r3, r9
 80010fc:	e720      	b.n	8000f40 <__aeabi_fsub+0x18c>
 80010fe:	4699      	mov	r9, r3
 8001100:	464b      	mov	r3, r9
 8001102:	2500      	movs	r5, #0
 8001104:	08db      	lsrs	r3, r3, #3
 8001106:	e72b      	b.n	8000f60 <__aeabi_fsub+0x1ac>
 8001108:	2301      	movs	r3, #1
 800110a:	e740      	b.n	8000f8e <__aeabi_fsub+0x1da>
 800110c:	2200      	movs	r2, #0
 800110e:	2300      	movs	r3, #0
 8001110:	e6a9      	b.n	8000e66 <__aeabi_fsub+0xb2>
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	2200      	movs	r2, #0
 8001116:	03db      	lsls	r3, r3, #15
 8001118:	24ff      	movs	r4, #255	; 0xff
 800111a:	e6a4      	b.n	8000e66 <__aeabi_fsub+0xb2>
 800111c:	2500      	movs	r5, #0
 800111e:	e71c      	b.n	8000f5a <__aeabi_fsub+0x1a6>
 8001120:	2301      	movs	r3, #1
 8001122:	e7b1      	b.n	8001088 <__aeabi_fsub+0x2d4>
 8001124:	2a00      	cmp	r2, #0
 8001126:	d0f1      	beq.n	800110c <__aeabi_fsub+0x358>
 8001128:	0013      	movs	r3, r2
 800112a:	2500      	movs	r5, #0
 800112c:	e6fc      	b.n	8000f28 <__aeabi_fsub+0x174>
 800112e:	2500      	movs	r5, #0
 8001130:	e6fa      	b.n	8000f28 <__aeabi_fsub+0x174>
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	7dffffff 	.word	0x7dffffff
 8001138:	fbffffff 	.word	0xfbffffff

0800113c <__aeabi_i2f>:
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	2800      	cmp	r0, #0
 8001140:	d03d      	beq.n	80011be <__aeabi_i2f+0x82>
 8001142:	17c3      	asrs	r3, r0, #31
 8001144:	18c5      	adds	r5, r0, r3
 8001146:	405d      	eors	r5, r3
 8001148:	0fc4      	lsrs	r4, r0, #31
 800114a:	0028      	movs	r0, r5
 800114c:	f000 fb3a 	bl	80017c4 <__clzsi2>
 8001150:	229e      	movs	r2, #158	; 0x9e
 8001152:	1a12      	subs	r2, r2, r0
 8001154:	2a96      	cmp	r2, #150	; 0x96
 8001156:	dc07      	bgt.n	8001168 <__aeabi_i2f+0x2c>
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	2808      	cmp	r0, #8
 800115c:	dd33      	ble.n	80011c6 <__aeabi_i2f+0x8a>
 800115e:	3808      	subs	r0, #8
 8001160:	4085      	lsls	r5, r0
 8001162:	0268      	lsls	r0, r5, #9
 8001164:	0a40      	lsrs	r0, r0, #9
 8001166:	e023      	b.n	80011b0 <__aeabi_i2f+0x74>
 8001168:	2a99      	cmp	r2, #153	; 0x99
 800116a:	dd0b      	ble.n	8001184 <__aeabi_i2f+0x48>
 800116c:	2305      	movs	r3, #5
 800116e:	0029      	movs	r1, r5
 8001170:	1a1b      	subs	r3, r3, r0
 8001172:	40d9      	lsrs	r1, r3
 8001174:	0003      	movs	r3, r0
 8001176:	331b      	adds	r3, #27
 8001178:	409d      	lsls	r5, r3
 800117a:	002b      	movs	r3, r5
 800117c:	1e5d      	subs	r5, r3, #1
 800117e:	41ab      	sbcs	r3, r5
 8001180:	4319      	orrs	r1, r3
 8001182:	000d      	movs	r5, r1
 8001184:	2805      	cmp	r0, #5
 8001186:	dd01      	ble.n	800118c <__aeabi_i2f+0x50>
 8001188:	1f43      	subs	r3, r0, #5
 800118a:	409d      	lsls	r5, r3
 800118c:	002b      	movs	r3, r5
 800118e:	490f      	ldr	r1, [pc, #60]	; (80011cc <__aeabi_i2f+0x90>)
 8001190:	400b      	ands	r3, r1
 8001192:	076e      	lsls	r6, r5, #29
 8001194:	d009      	beq.n	80011aa <__aeabi_i2f+0x6e>
 8001196:	260f      	movs	r6, #15
 8001198:	4035      	ands	r5, r6
 800119a:	2d04      	cmp	r5, #4
 800119c:	d005      	beq.n	80011aa <__aeabi_i2f+0x6e>
 800119e:	3304      	adds	r3, #4
 80011a0:	015d      	lsls	r5, r3, #5
 80011a2:	d502      	bpl.n	80011aa <__aeabi_i2f+0x6e>
 80011a4:	229f      	movs	r2, #159	; 0x9f
 80011a6:	400b      	ands	r3, r1
 80011a8:	1a12      	subs	r2, r2, r0
 80011aa:	019b      	lsls	r3, r3, #6
 80011ac:	0a58      	lsrs	r0, r3, #9
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	0240      	lsls	r0, r0, #9
 80011b2:	05d2      	lsls	r2, r2, #23
 80011b4:	0a40      	lsrs	r0, r0, #9
 80011b6:	07e4      	lsls	r4, r4, #31
 80011b8:	4310      	orrs	r0, r2
 80011ba:	4320      	orrs	r0, r4
 80011bc:	bd70      	pop	{r4, r5, r6, pc}
 80011be:	2400      	movs	r4, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	e7f4      	b.n	80011b0 <__aeabi_i2f+0x74>
 80011c6:	0268      	lsls	r0, r5, #9
 80011c8:	0a40      	lsrs	r0, r0, #9
 80011ca:	e7f1      	b.n	80011b0 <__aeabi_i2f+0x74>
 80011cc:	fbffffff 	.word	0xfbffffff

080011d0 <__aeabi_dmul>:
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d2:	4657      	mov	r7, sl
 80011d4:	46de      	mov	lr, fp
 80011d6:	464e      	mov	r6, r9
 80011d8:	4645      	mov	r5, r8
 80011da:	b5e0      	push	{r5, r6, r7, lr}
 80011dc:	4683      	mov	fp, r0
 80011de:	0006      	movs	r6, r0
 80011e0:	030f      	lsls	r7, r1, #12
 80011e2:	0048      	lsls	r0, r1, #1
 80011e4:	b087      	sub	sp, #28
 80011e6:	4692      	mov	sl, r2
 80011e8:	001d      	movs	r5, r3
 80011ea:	0b3f      	lsrs	r7, r7, #12
 80011ec:	0d40      	lsrs	r0, r0, #21
 80011ee:	0fcc      	lsrs	r4, r1, #31
 80011f0:	2800      	cmp	r0, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dmul+0x26>
 80011f4:	e06f      	b.n	80012d6 <__aeabi_dmul+0x106>
 80011f6:	4bde      	ldr	r3, [pc, #888]	; (8001570 <__aeabi_dmul+0x3a0>)
 80011f8:	4298      	cmp	r0, r3
 80011fa:	d038      	beq.n	800126e <__aeabi_dmul+0x9e>
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	00ff      	lsls	r7, r7, #3
 8001200:	041b      	lsls	r3, r3, #16
 8001202:	431f      	orrs	r7, r3
 8001204:	0f73      	lsrs	r3, r6, #29
 8001206:	433b      	orrs	r3, r7
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	4bda      	ldr	r3, [pc, #872]	; (8001574 <__aeabi_dmul+0x3a4>)
 800120c:	2700      	movs	r7, #0
 800120e:	4699      	mov	r9, r3
 8001210:	2300      	movs	r3, #0
 8001212:	469b      	mov	fp, r3
 8001214:	00f6      	lsls	r6, r6, #3
 8001216:	4481      	add	r9, r0
 8001218:	032b      	lsls	r3, r5, #12
 800121a:	0069      	lsls	r1, r5, #1
 800121c:	0b1b      	lsrs	r3, r3, #12
 800121e:	4652      	mov	r2, sl
 8001220:	4698      	mov	r8, r3
 8001222:	0d49      	lsrs	r1, r1, #21
 8001224:	0fed      	lsrs	r5, r5, #31
 8001226:	2900      	cmp	r1, #0
 8001228:	d100      	bne.n	800122c <__aeabi_dmul+0x5c>
 800122a:	e085      	b.n	8001338 <__aeabi_dmul+0x168>
 800122c:	4bd0      	ldr	r3, [pc, #832]	; (8001570 <__aeabi_dmul+0x3a0>)
 800122e:	4299      	cmp	r1, r3
 8001230:	d100      	bne.n	8001234 <__aeabi_dmul+0x64>
 8001232:	e073      	b.n	800131c <__aeabi_dmul+0x14c>
 8001234:	4643      	mov	r3, r8
 8001236:	00da      	lsls	r2, r3, #3
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	041b      	lsls	r3, r3, #16
 800123c:	4313      	orrs	r3, r2
 800123e:	4652      	mov	r2, sl
 8001240:	48cc      	ldr	r0, [pc, #816]	; (8001574 <__aeabi_dmul+0x3a4>)
 8001242:	0f52      	lsrs	r2, r2, #29
 8001244:	4684      	mov	ip, r0
 8001246:	4313      	orrs	r3, r2
 8001248:	4652      	mov	r2, sl
 800124a:	2000      	movs	r0, #0
 800124c:	4461      	add	r1, ip
 800124e:	00d2      	lsls	r2, r2, #3
 8001250:	4489      	add	r9, r1
 8001252:	0021      	movs	r1, r4
 8001254:	4069      	eors	r1, r5
 8001256:	9100      	str	r1, [sp, #0]
 8001258:	468c      	mov	ip, r1
 800125a:	2101      	movs	r1, #1
 800125c:	4449      	add	r1, r9
 800125e:	468a      	mov	sl, r1
 8001260:	2f0f      	cmp	r7, #15
 8001262:	d900      	bls.n	8001266 <__aeabi_dmul+0x96>
 8001264:	e090      	b.n	8001388 <__aeabi_dmul+0x1b8>
 8001266:	49c4      	ldr	r1, [pc, #784]	; (8001578 <__aeabi_dmul+0x3a8>)
 8001268:	00bf      	lsls	r7, r7, #2
 800126a:	59cf      	ldr	r7, [r1, r7]
 800126c:	46bf      	mov	pc, r7
 800126e:	465b      	mov	r3, fp
 8001270:	433b      	orrs	r3, r7
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	d000      	beq.n	8001278 <__aeabi_dmul+0xa8>
 8001276:	e16a      	b.n	800154e <__aeabi_dmul+0x37e>
 8001278:	2302      	movs	r3, #2
 800127a:	2708      	movs	r7, #8
 800127c:	2600      	movs	r6, #0
 800127e:	4681      	mov	r9, r0
 8001280:	469b      	mov	fp, r3
 8001282:	e7c9      	b.n	8001218 <__aeabi_dmul+0x48>
 8001284:	0032      	movs	r2, r6
 8001286:	4658      	mov	r0, fp
 8001288:	9b01      	ldr	r3, [sp, #4]
 800128a:	4661      	mov	r1, ip
 800128c:	9100      	str	r1, [sp, #0]
 800128e:	2802      	cmp	r0, #2
 8001290:	d100      	bne.n	8001294 <__aeabi_dmul+0xc4>
 8001292:	e075      	b.n	8001380 <__aeabi_dmul+0x1b0>
 8001294:	2803      	cmp	r0, #3
 8001296:	d100      	bne.n	800129a <__aeabi_dmul+0xca>
 8001298:	e1fe      	b.n	8001698 <__aeabi_dmul+0x4c8>
 800129a:	2801      	cmp	r0, #1
 800129c:	d000      	beq.n	80012a0 <__aeabi_dmul+0xd0>
 800129e:	e12c      	b.n	80014fa <__aeabi_dmul+0x32a>
 80012a0:	2300      	movs	r3, #0
 80012a2:	2700      	movs	r7, #0
 80012a4:	2600      	movs	r6, #0
 80012a6:	2500      	movs	r5, #0
 80012a8:	033f      	lsls	r7, r7, #12
 80012aa:	0d2a      	lsrs	r2, r5, #20
 80012ac:	0b3f      	lsrs	r7, r7, #12
 80012ae:	48b3      	ldr	r0, [pc, #716]	; (800157c <__aeabi_dmul+0x3ac>)
 80012b0:	0512      	lsls	r2, r2, #20
 80012b2:	433a      	orrs	r2, r7
 80012b4:	4002      	ands	r2, r0
 80012b6:	051b      	lsls	r3, r3, #20
 80012b8:	4313      	orrs	r3, r2
 80012ba:	9a00      	ldr	r2, [sp, #0]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	07d1      	lsls	r1, r2, #31
 80012c0:	085b      	lsrs	r3, r3, #1
 80012c2:	430b      	orrs	r3, r1
 80012c4:	0030      	movs	r0, r6
 80012c6:	0019      	movs	r1, r3
 80012c8:	b007      	add	sp, #28
 80012ca:	bc3c      	pop	{r2, r3, r4, r5}
 80012cc:	4690      	mov	r8, r2
 80012ce:	4699      	mov	r9, r3
 80012d0:	46a2      	mov	sl, r4
 80012d2:	46ab      	mov	fp, r5
 80012d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d6:	465b      	mov	r3, fp
 80012d8:	433b      	orrs	r3, r7
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dmul+0x110>
 80012de:	e12f      	b.n	8001540 <__aeabi_dmul+0x370>
 80012e0:	2f00      	cmp	r7, #0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dmul+0x116>
 80012e4:	e1a5      	b.n	8001632 <__aeabi_dmul+0x462>
 80012e6:	0038      	movs	r0, r7
 80012e8:	f000 fa6c 	bl	80017c4 <__clzsi2>
 80012ec:	0003      	movs	r3, r0
 80012ee:	3b0b      	subs	r3, #11
 80012f0:	2b1c      	cmp	r3, #28
 80012f2:	dd00      	ble.n	80012f6 <__aeabi_dmul+0x126>
 80012f4:	e196      	b.n	8001624 <__aeabi_dmul+0x454>
 80012f6:	221d      	movs	r2, #29
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	465a      	mov	r2, fp
 80012fc:	0001      	movs	r1, r0
 80012fe:	40da      	lsrs	r2, r3
 8001300:	465e      	mov	r6, fp
 8001302:	3908      	subs	r1, #8
 8001304:	408f      	lsls	r7, r1
 8001306:	0013      	movs	r3, r2
 8001308:	408e      	lsls	r6, r1
 800130a:	433b      	orrs	r3, r7
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	4b9c      	ldr	r3, [pc, #624]	; (8001580 <__aeabi_dmul+0x3b0>)
 8001310:	2700      	movs	r7, #0
 8001312:	1a1b      	subs	r3, r3, r0
 8001314:	4699      	mov	r9, r3
 8001316:	2300      	movs	r3, #0
 8001318:	469b      	mov	fp, r3
 800131a:	e77d      	b.n	8001218 <__aeabi_dmul+0x48>
 800131c:	4641      	mov	r1, r8
 800131e:	4653      	mov	r3, sl
 8001320:	430b      	orrs	r3, r1
 8001322:	4993      	ldr	r1, [pc, #588]	; (8001570 <__aeabi_dmul+0x3a0>)
 8001324:	468c      	mov	ip, r1
 8001326:	44e1      	add	r9, ip
 8001328:	2b00      	cmp	r3, #0
 800132a:	d000      	beq.n	800132e <__aeabi_dmul+0x15e>
 800132c:	e11a      	b.n	8001564 <__aeabi_dmul+0x394>
 800132e:	2202      	movs	r2, #2
 8001330:	2002      	movs	r0, #2
 8001332:	4317      	orrs	r7, r2
 8001334:	2200      	movs	r2, #0
 8001336:	e78c      	b.n	8001252 <__aeabi_dmul+0x82>
 8001338:	4313      	orrs	r3, r2
 800133a:	d100      	bne.n	800133e <__aeabi_dmul+0x16e>
 800133c:	e10d      	b.n	800155a <__aeabi_dmul+0x38a>
 800133e:	4643      	mov	r3, r8
 8001340:	2b00      	cmp	r3, #0
 8001342:	d100      	bne.n	8001346 <__aeabi_dmul+0x176>
 8001344:	e181      	b.n	800164a <__aeabi_dmul+0x47a>
 8001346:	4640      	mov	r0, r8
 8001348:	f000 fa3c 	bl	80017c4 <__clzsi2>
 800134c:	0002      	movs	r2, r0
 800134e:	3a0b      	subs	r2, #11
 8001350:	2a1c      	cmp	r2, #28
 8001352:	dd00      	ble.n	8001356 <__aeabi_dmul+0x186>
 8001354:	e172      	b.n	800163c <__aeabi_dmul+0x46c>
 8001356:	0001      	movs	r1, r0
 8001358:	4643      	mov	r3, r8
 800135a:	3908      	subs	r1, #8
 800135c:	408b      	lsls	r3, r1
 800135e:	4698      	mov	r8, r3
 8001360:	231d      	movs	r3, #29
 8001362:	1a9a      	subs	r2, r3, r2
 8001364:	4653      	mov	r3, sl
 8001366:	40d3      	lsrs	r3, r2
 8001368:	001a      	movs	r2, r3
 800136a:	4643      	mov	r3, r8
 800136c:	4313      	orrs	r3, r2
 800136e:	4652      	mov	r2, sl
 8001370:	408a      	lsls	r2, r1
 8001372:	4649      	mov	r1, r9
 8001374:	1a08      	subs	r0, r1, r0
 8001376:	4982      	ldr	r1, [pc, #520]	; (8001580 <__aeabi_dmul+0x3b0>)
 8001378:	4689      	mov	r9, r1
 800137a:	4481      	add	r9, r0
 800137c:	2000      	movs	r0, #0
 800137e:	e768      	b.n	8001252 <__aeabi_dmul+0x82>
 8001380:	4b7b      	ldr	r3, [pc, #492]	; (8001570 <__aeabi_dmul+0x3a0>)
 8001382:	2700      	movs	r7, #0
 8001384:	2600      	movs	r6, #0
 8001386:	e78e      	b.n	80012a6 <__aeabi_dmul+0xd6>
 8001388:	0c14      	lsrs	r4, r2, #16
 800138a:	0412      	lsls	r2, r2, #16
 800138c:	0c12      	lsrs	r2, r2, #16
 800138e:	0011      	movs	r1, r2
 8001390:	0c37      	lsrs	r7, r6, #16
 8001392:	0436      	lsls	r6, r6, #16
 8001394:	0c35      	lsrs	r5, r6, #16
 8001396:	4379      	muls	r1, r7
 8001398:	0028      	movs	r0, r5
 800139a:	468c      	mov	ip, r1
 800139c:	002e      	movs	r6, r5
 800139e:	4360      	muls	r0, r4
 80013a0:	4460      	add	r0, ip
 80013a2:	4683      	mov	fp, r0
 80013a4:	4356      	muls	r6, r2
 80013a6:	0021      	movs	r1, r4
 80013a8:	0c30      	lsrs	r0, r6, #16
 80013aa:	4680      	mov	r8, r0
 80013ac:	4658      	mov	r0, fp
 80013ae:	4379      	muls	r1, r7
 80013b0:	4440      	add	r0, r8
 80013b2:	9102      	str	r1, [sp, #8]
 80013b4:	4584      	cmp	ip, r0
 80013b6:	d906      	bls.n	80013c6 <__aeabi_dmul+0x1f6>
 80013b8:	4688      	mov	r8, r1
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	0249      	lsls	r1, r1, #9
 80013be:	468c      	mov	ip, r1
 80013c0:	44e0      	add	r8, ip
 80013c2:	4641      	mov	r1, r8
 80013c4:	9102      	str	r1, [sp, #8]
 80013c6:	0436      	lsls	r6, r6, #16
 80013c8:	0c01      	lsrs	r1, r0, #16
 80013ca:	0c36      	lsrs	r6, r6, #16
 80013cc:	0400      	lsls	r0, r0, #16
 80013ce:	468b      	mov	fp, r1
 80013d0:	1981      	adds	r1, r0, r6
 80013d2:	0c1e      	lsrs	r6, r3, #16
 80013d4:	041b      	lsls	r3, r3, #16
 80013d6:	0c1b      	lsrs	r3, r3, #16
 80013d8:	9103      	str	r1, [sp, #12]
 80013da:	0019      	movs	r1, r3
 80013dc:	4379      	muls	r1, r7
 80013de:	468c      	mov	ip, r1
 80013e0:	0028      	movs	r0, r5
 80013e2:	4375      	muls	r5, r6
 80013e4:	4465      	add	r5, ip
 80013e6:	46a8      	mov	r8, r5
 80013e8:	4358      	muls	r0, r3
 80013ea:	0c05      	lsrs	r5, r0, #16
 80013ec:	4445      	add	r5, r8
 80013ee:	4377      	muls	r7, r6
 80013f0:	42a9      	cmp	r1, r5
 80013f2:	d903      	bls.n	80013fc <__aeabi_dmul+0x22c>
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	0249      	lsls	r1, r1, #9
 80013f8:	468c      	mov	ip, r1
 80013fa:	4467      	add	r7, ip
 80013fc:	0c29      	lsrs	r1, r5, #16
 80013fe:	468c      	mov	ip, r1
 8001400:	0039      	movs	r1, r7
 8001402:	0400      	lsls	r0, r0, #16
 8001404:	0c00      	lsrs	r0, r0, #16
 8001406:	042d      	lsls	r5, r5, #16
 8001408:	182d      	adds	r5, r5, r0
 800140a:	4461      	add	r1, ip
 800140c:	44ab      	add	fp, r5
 800140e:	9105      	str	r1, [sp, #20]
 8001410:	4659      	mov	r1, fp
 8001412:	9104      	str	r1, [sp, #16]
 8001414:	9901      	ldr	r1, [sp, #4]
 8001416:	040f      	lsls	r7, r1, #16
 8001418:	0c3f      	lsrs	r7, r7, #16
 800141a:	0c08      	lsrs	r0, r1, #16
 800141c:	0039      	movs	r1, r7
 800141e:	4351      	muls	r1, r2
 8001420:	4342      	muls	r2, r0
 8001422:	4690      	mov	r8, r2
 8001424:	0002      	movs	r2, r0
 8001426:	468c      	mov	ip, r1
 8001428:	0c09      	lsrs	r1, r1, #16
 800142a:	468b      	mov	fp, r1
 800142c:	4362      	muls	r2, r4
 800142e:	437c      	muls	r4, r7
 8001430:	4444      	add	r4, r8
 8001432:	445c      	add	r4, fp
 8001434:	45a0      	cmp	r8, r4
 8001436:	d903      	bls.n	8001440 <__aeabi_dmul+0x270>
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	0249      	lsls	r1, r1, #9
 800143c:	4688      	mov	r8, r1
 800143e:	4442      	add	r2, r8
 8001440:	0c21      	lsrs	r1, r4, #16
 8001442:	4688      	mov	r8, r1
 8001444:	4661      	mov	r1, ip
 8001446:	0409      	lsls	r1, r1, #16
 8001448:	0c09      	lsrs	r1, r1, #16
 800144a:	468c      	mov	ip, r1
 800144c:	0039      	movs	r1, r7
 800144e:	4359      	muls	r1, r3
 8001450:	4343      	muls	r3, r0
 8001452:	4370      	muls	r0, r6
 8001454:	437e      	muls	r6, r7
 8001456:	0c0f      	lsrs	r7, r1, #16
 8001458:	18f6      	adds	r6, r6, r3
 800145a:	0424      	lsls	r4, r4, #16
 800145c:	19be      	adds	r6, r7, r6
 800145e:	4464      	add	r4, ip
 8001460:	4442      	add	r2, r8
 8001462:	468c      	mov	ip, r1
 8001464:	42b3      	cmp	r3, r6
 8001466:	d903      	bls.n	8001470 <__aeabi_dmul+0x2a0>
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	4698      	mov	r8, r3
 800146e:	4440      	add	r0, r8
 8001470:	9b02      	ldr	r3, [sp, #8]
 8001472:	4661      	mov	r1, ip
 8001474:	4698      	mov	r8, r3
 8001476:	9b04      	ldr	r3, [sp, #16]
 8001478:	0437      	lsls	r7, r6, #16
 800147a:	4443      	add	r3, r8
 800147c:	469b      	mov	fp, r3
 800147e:	45ab      	cmp	fp, r5
 8001480:	41ad      	sbcs	r5, r5
 8001482:	426b      	negs	r3, r5
 8001484:	040d      	lsls	r5, r1, #16
 8001486:	9905      	ldr	r1, [sp, #20]
 8001488:	0c2d      	lsrs	r5, r5, #16
 800148a:	468c      	mov	ip, r1
 800148c:	197f      	adds	r7, r7, r5
 800148e:	4467      	add	r7, ip
 8001490:	18fd      	adds	r5, r7, r3
 8001492:	46a8      	mov	r8, r5
 8001494:	465d      	mov	r5, fp
 8001496:	192d      	adds	r5, r5, r4
 8001498:	42a5      	cmp	r5, r4
 800149a:	41a4      	sbcs	r4, r4
 800149c:	4693      	mov	fp, r2
 800149e:	4264      	negs	r4, r4
 80014a0:	46a4      	mov	ip, r4
 80014a2:	44c3      	add	fp, r8
 80014a4:	44dc      	add	ip, fp
 80014a6:	428f      	cmp	r7, r1
 80014a8:	41bf      	sbcs	r7, r7
 80014aa:	4598      	cmp	r8, r3
 80014ac:	419b      	sbcs	r3, r3
 80014ae:	4593      	cmp	fp, r2
 80014b0:	4192      	sbcs	r2, r2
 80014b2:	45a4      	cmp	ip, r4
 80014b4:	41a4      	sbcs	r4, r4
 80014b6:	425b      	negs	r3, r3
 80014b8:	427f      	negs	r7, r7
 80014ba:	431f      	orrs	r7, r3
 80014bc:	0c36      	lsrs	r6, r6, #16
 80014be:	4252      	negs	r2, r2
 80014c0:	4264      	negs	r4, r4
 80014c2:	19bf      	adds	r7, r7, r6
 80014c4:	4322      	orrs	r2, r4
 80014c6:	18bf      	adds	r7, r7, r2
 80014c8:	4662      	mov	r2, ip
 80014ca:	1838      	adds	r0, r7, r0
 80014cc:	0243      	lsls	r3, r0, #9
 80014ce:	0dd2      	lsrs	r2, r2, #23
 80014d0:	9903      	ldr	r1, [sp, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	026a      	lsls	r2, r5, #9
 80014d6:	430a      	orrs	r2, r1
 80014d8:	1e50      	subs	r0, r2, #1
 80014da:	4182      	sbcs	r2, r0
 80014dc:	4661      	mov	r1, ip
 80014de:	0ded      	lsrs	r5, r5, #23
 80014e0:	432a      	orrs	r2, r5
 80014e2:	024e      	lsls	r6, r1, #9
 80014e4:	4332      	orrs	r2, r6
 80014e6:	01d9      	lsls	r1, r3, #7
 80014e8:	d400      	bmi.n	80014ec <__aeabi_dmul+0x31c>
 80014ea:	e0b3      	b.n	8001654 <__aeabi_dmul+0x484>
 80014ec:	2601      	movs	r6, #1
 80014ee:	0850      	lsrs	r0, r2, #1
 80014f0:	4032      	ands	r2, r6
 80014f2:	4302      	orrs	r2, r0
 80014f4:	07de      	lsls	r6, r3, #31
 80014f6:	4332      	orrs	r2, r6
 80014f8:	085b      	lsrs	r3, r3, #1
 80014fa:	4c22      	ldr	r4, [pc, #136]	; (8001584 <__aeabi_dmul+0x3b4>)
 80014fc:	4454      	add	r4, sl
 80014fe:	2c00      	cmp	r4, #0
 8001500:	dd62      	ble.n	80015c8 <__aeabi_dmul+0x3f8>
 8001502:	0751      	lsls	r1, r2, #29
 8001504:	d009      	beq.n	800151a <__aeabi_dmul+0x34a>
 8001506:	200f      	movs	r0, #15
 8001508:	4010      	ands	r0, r2
 800150a:	2804      	cmp	r0, #4
 800150c:	d005      	beq.n	800151a <__aeabi_dmul+0x34a>
 800150e:	1d10      	adds	r0, r2, #4
 8001510:	4290      	cmp	r0, r2
 8001512:	4192      	sbcs	r2, r2
 8001514:	4252      	negs	r2, r2
 8001516:	189b      	adds	r3, r3, r2
 8001518:	0002      	movs	r2, r0
 800151a:	01d9      	lsls	r1, r3, #7
 800151c:	d504      	bpl.n	8001528 <__aeabi_dmul+0x358>
 800151e:	2480      	movs	r4, #128	; 0x80
 8001520:	4819      	ldr	r0, [pc, #100]	; (8001588 <__aeabi_dmul+0x3b8>)
 8001522:	00e4      	lsls	r4, r4, #3
 8001524:	4003      	ands	r3, r0
 8001526:	4454      	add	r4, sl
 8001528:	4818      	ldr	r0, [pc, #96]	; (800158c <__aeabi_dmul+0x3bc>)
 800152a:	4284      	cmp	r4, r0
 800152c:	dd00      	ble.n	8001530 <__aeabi_dmul+0x360>
 800152e:	e727      	b.n	8001380 <__aeabi_dmul+0x1b0>
 8001530:	075e      	lsls	r6, r3, #29
 8001532:	025b      	lsls	r3, r3, #9
 8001534:	08d2      	lsrs	r2, r2, #3
 8001536:	0b1f      	lsrs	r7, r3, #12
 8001538:	0563      	lsls	r3, r4, #21
 800153a:	4316      	orrs	r6, r2
 800153c:	0d5b      	lsrs	r3, r3, #21
 800153e:	e6b2      	b.n	80012a6 <__aeabi_dmul+0xd6>
 8001540:	2300      	movs	r3, #0
 8001542:	4699      	mov	r9, r3
 8001544:	3301      	adds	r3, #1
 8001546:	2704      	movs	r7, #4
 8001548:	2600      	movs	r6, #0
 800154a:	469b      	mov	fp, r3
 800154c:	e664      	b.n	8001218 <__aeabi_dmul+0x48>
 800154e:	2303      	movs	r3, #3
 8001550:	9701      	str	r7, [sp, #4]
 8001552:	4681      	mov	r9, r0
 8001554:	270c      	movs	r7, #12
 8001556:	469b      	mov	fp, r3
 8001558:	e65e      	b.n	8001218 <__aeabi_dmul+0x48>
 800155a:	2201      	movs	r2, #1
 800155c:	2001      	movs	r0, #1
 800155e:	4317      	orrs	r7, r2
 8001560:	2200      	movs	r2, #0
 8001562:	e676      	b.n	8001252 <__aeabi_dmul+0x82>
 8001564:	2303      	movs	r3, #3
 8001566:	2003      	movs	r0, #3
 8001568:	431f      	orrs	r7, r3
 800156a:	4643      	mov	r3, r8
 800156c:	e671      	b.n	8001252 <__aeabi_dmul+0x82>
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	000007ff 	.word	0x000007ff
 8001574:	fffffc01 	.word	0xfffffc01
 8001578:	08005dc0 	.word	0x08005dc0
 800157c:	800fffff 	.word	0x800fffff
 8001580:	fffffc0d 	.word	0xfffffc0d
 8001584:	000003ff 	.word	0x000003ff
 8001588:	feffffff 	.word	0xfeffffff
 800158c:	000007fe 	.word	0x000007fe
 8001590:	2300      	movs	r3, #0
 8001592:	2780      	movs	r7, #128	; 0x80
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	033f      	lsls	r7, r7, #12
 8001598:	2600      	movs	r6, #0
 800159a:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <__aeabi_dmul+0x4d8>)
 800159c:	e683      	b.n	80012a6 <__aeabi_dmul+0xd6>
 800159e:	9b01      	ldr	r3, [sp, #4]
 80015a0:	0032      	movs	r2, r6
 80015a2:	46a4      	mov	ip, r4
 80015a4:	4658      	mov	r0, fp
 80015a6:	e670      	b.n	800128a <__aeabi_dmul+0xba>
 80015a8:	46ac      	mov	ip, r5
 80015aa:	e66e      	b.n	800128a <__aeabi_dmul+0xba>
 80015ac:	2780      	movs	r7, #128	; 0x80
 80015ae:	9901      	ldr	r1, [sp, #4]
 80015b0:	033f      	lsls	r7, r7, #12
 80015b2:	4239      	tst	r1, r7
 80015b4:	d02d      	beq.n	8001612 <__aeabi_dmul+0x442>
 80015b6:	423b      	tst	r3, r7
 80015b8:	d12b      	bne.n	8001612 <__aeabi_dmul+0x442>
 80015ba:	431f      	orrs	r7, r3
 80015bc:	033f      	lsls	r7, r7, #12
 80015be:	0b3f      	lsrs	r7, r7, #12
 80015c0:	9500      	str	r5, [sp, #0]
 80015c2:	0016      	movs	r6, r2
 80015c4:	4b38      	ldr	r3, [pc, #224]	; (80016a8 <__aeabi_dmul+0x4d8>)
 80015c6:	e66e      	b.n	80012a6 <__aeabi_dmul+0xd6>
 80015c8:	2501      	movs	r5, #1
 80015ca:	1b2d      	subs	r5, r5, r4
 80015cc:	2d38      	cmp	r5, #56	; 0x38
 80015ce:	dd00      	ble.n	80015d2 <__aeabi_dmul+0x402>
 80015d0:	e666      	b.n	80012a0 <__aeabi_dmul+0xd0>
 80015d2:	2d1f      	cmp	r5, #31
 80015d4:	dc40      	bgt.n	8001658 <__aeabi_dmul+0x488>
 80015d6:	4835      	ldr	r0, [pc, #212]	; (80016ac <__aeabi_dmul+0x4dc>)
 80015d8:	001c      	movs	r4, r3
 80015da:	4450      	add	r0, sl
 80015dc:	0016      	movs	r6, r2
 80015de:	4082      	lsls	r2, r0
 80015e0:	4084      	lsls	r4, r0
 80015e2:	40ee      	lsrs	r6, r5
 80015e4:	1e50      	subs	r0, r2, #1
 80015e6:	4182      	sbcs	r2, r0
 80015e8:	4334      	orrs	r4, r6
 80015ea:	4314      	orrs	r4, r2
 80015ec:	40eb      	lsrs	r3, r5
 80015ee:	0762      	lsls	r2, r4, #29
 80015f0:	d009      	beq.n	8001606 <__aeabi_dmul+0x436>
 80015f2:	220f      	movs	r2, #15
 80015f4:	4022      	ands	r2, r4
 80015f6:	2a04      	cmp	r2, #4
 80015f8:	d005      	beq.n	8001606 <__aeabi_dmul+0x436>
 80015fa:	0022      	movs	r2, r4
 80015fc:	1d14      	adds	r4, r2, #4
 80015fe:	4294      	cmp	r4, r2
 8001600:	4180      	sbcs	r0, r0
 8001602:	4240      	negs	r0, r0
 8001604:	181b      	adds	r3, r3, r0
 8001606:	021a      	lsls	r2, r3, #8
 8001608:	d53e      	bpl.n	8001688 <__aeabi_dmul+0x4b8>
 800160a:	2301      	movs	r3, #1
 800160c:	2700      	movs	r7, #0
 800160e:	2600      	movs	r6, #0
 8001610:	e649      	b.n	80012a6 <__aeabi_dmul+0xd6>
 8001612:	2780      	movs	r7, #128	; 0x80
 8001614:	9b01      	ldr	r3, [sp, #4]
 8001616:	033f      	lsls	r7, r7, #12
 8001618:	431f      	orrs	r7, r3
 800161a:	033f      	lsls	r7, r7, #12
 800161c:	0b3f      	lsrs	r7, r7, #12
 800161e:	9400      	str	r4, [sp, #0]
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <__aeabi_dmul+0x4d8>)
 8001622:	e640      	b.n	80012a6 <__aeabi_dmul+0xd6>
 8001624:	0003      	movs	r3, r0
 8001626:	465a      	mov	r2, fp
 8001628:	3b28      	subs	r3, #40	; 0x28
 800162a:	409a      	lsls	r2, r3
 800162c:	2600      	movs	r6, #0
 800162e:	9201      	str	r2, [sp, #4]
 8001630:	e66d      	b.n	800130e <__aeabi_dmul+0x13e>
 8001632:	4658      	mov	r0, fp
 8001634:	f000 f8c6 	bl	80017c4 <__clzsi2>
 8001638:	3020      	adds	r0, #32
 800163a:	e657      	b.n	80012ec <__aeabi_dmul+0x11c>
 800163c:	0003      	movs	r3, r0
 800163e:	4652      	mov	r2, sl
 8001640:	3b28      	subs	r3, #40	; 0x28
 8001642:	409a      	lsls	r2, r3
 8001644:	0013      	movs	r3, r2
 8001646:	2200      	movs	r2, #0
 8001648:	e693      	b.n	8001372 <__aeabi_dmul+0x1a2>
 800164a:	4650      	mov	r0, sl
 800164c:	f000 f8ba 	bl	80017c4 <__clzsi2>
 8001650:	3020      	adds	r0, #32
 8001652:	e67b      	b.n	800134c <__aeabi_dmul+0x17c>
 8001654:	46ca      	mov	sl, r9
 8001656:	e750      	b.n	80014fa <__aeabi_dmul+0x32a>
 8001658:	201f      	movs	r0, #31
 800165a:	001e      	movs	r6, r3
 800165c:	4240      	negs	r0, r0
 800165e:	1b04      	subs	r4, r0, r4
 8001660:	40e6      	lsrs	r6, r4
 8001662:	2d20      	cmp	r5, #32
 8001664:	d003      	beq.n	800166e <__aeabi_dmul+0x49e>
 8001666:	4c12      	ldr	r4, [pc, #72]	; (80016b0 <__aeabi_dmul+0x4e0>)
 8001668:	4454      	add	r4, sl
 800166a:	40a3      	lsls	r3, r4
 800166c:	431a      	orrs	r2, r3
 800166e:	1e50      	subs	r0, r2, #1
 8001670:	4182      	sbcs	r2, r0
 8001672:	4332      	orrs	r2, r6
 8001674:	2607      	movs	r6, #7
 8001676:	2700      	movs	r7, #0
 8001678:	4016      	ands	r6, r2
 800167a:	d009      	beq.n	8001690 <__aeabi_dmul+0x4c0>
 800167c:	200f      	movs	r0, #15
 800167e:	2300      	movs	r3, #0
 8001680:	4010      	ands	r0, r2
 8001682:	0014      	movs	r4, r2
 8001684:	2804      	cmp	r0, #4
 8001686:	d1b9      	bne.n	80015fc <__aeabi_dmul+0x42c>
 8001688:	0022      	movs	r2, r4
 800168a:	075e      	lsls	r6, r3, #29
 800168c:	025b      	lsls	r3, r3, #9
 800168e:	0b1f      	lsrs	r7, r3, #12
 8001690:	08d2      	lsrs	r2, r2, #3
 8001692:	4316      	orrs	r6, r2
 8001694:	2300      	movs	r3, #0
 8001696:	e606      	b.n	80012a6 <__aeabi_dmul+0xd6>
 8001698:	2780      	movs	r7, #128	; 0x80
 800169a:	033f      	lsls	r7, r7, #12
 800169c:	431f      	orrs	r7, r3
 800169e:	033f      	lsls	r7, r7, #12
 80016a0:	0b3f      	lsrs	r7, r7, #12
 80016a2:	0016      	movs	r6, r2
 80016a4:	4b00      	ldr	r3, [pc, #0]	; (80016a8 <__aeabi_dmul+0x4d8>)
 80016a6:	e5fe      	b.n	80012a6 <__aeabi_dmul+0xd6>
 80016a8:	000007ff 	.word	0x000007ff
 80016ac:	0000041e 	.word	0x0000041e
 80016b0:	0000043e 	.word	0x0000043e

080016b4 <__aeabi_d2iz>:
 80016b4:	b530      	push	{r4, r5, lr}
 80016b6:	4d14      	ldr	r5, [pc, #80]	; (8001708 <__aeabi_d2iz+0x54>)
 80016b8:	030a      	lsls	r2, r1, #12
 80016ba:	004b      	lsls	r3, r1, #1
 80016bc:	0b12      	lsrs	r2, r2, #12
 80016be:	0d5b      	lsrs	r3, r3, #21
 80016c0:	0fc9      	lsrs	r1, r1, #31
 80016c2:	2400      	movs	r4, #0
 80016c4:	42ab      	cmp	r3, r5
 80016c6:	dd11      	ble.n	80016ec <__aeabi_d2iz+0x38>
 80016c8:	4c10      	ldr	r4, [pc, #64]	; (800170c <__aeabi_d2iz+0x58>)
 80016ca:	42a3      	cmp	r3, r4
 80016cc:	dc10      	bgt.n	80016f0 <__aeabi_d2iz+0x3c>
 80016ce:	2480      	movs	r4, #128	; 0x80
 80016d0:	0364      	lsls	r4, r4, #13
 80016d2:	4322      	orrs	r2, r4
 80016d4:	4c0e      	ldr	r4, [pc, #56]	; (8001710 <__aeabi_d2iz+0x5c>)
 80016d6:	1ae4      	subs	r4, r4, r3
 80016d8:	2c1f      	cmp	r4, #31
 80016da:	dd0c      	ble.n	80016f6 <__aeabi_d2iz+0x42>
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <__aeabi_d2iz+0x60>)
 80016de:	1ac3      	subs	r3, r0, r3
 80016e0:	40da      	lsrs	r2, r3
 80016e2:	0013      	movs	r3, r2
 80016e4:	425c      	negs	r4, r3
 80016e6:	2900      	cmp	r1, #0
 80016e8:	d100      	bne.n	80016ec <__aeabi_d2iz+0x38>
 80016ea:	001c      	movs	r4, r3
 80016ec:	0020      	movs	r0, r4
 80016ee:	bd30      	pop	{r4, r5, pc}
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <__aeabi_d2iz+0x64>)
 80016f2:	18cc      	adds	r4, r1, r3
 80016f4:	e7fa      	b.n	80016ec <__aeabi_d2iz+0x38>
 80016f6:	4d09      	ldr	r5, [pc, #36]	; (800171c <__aeabi_d2iz+0x68>)
 80016f8:	40e0      	lsrs	r0, r4
 80016fa:	46ac      	mov	ip, r5
 80016fc:	4463      	add	r3, ip
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	4303      	orrs	r3, r0
 8001704:	e7ee      	b.n	80016e4 <__aeabi_d2iz+0x30>
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	000003fe 	.word	0x000003fe
 800170c:	0000041d 	.word	0x0000041d
 8001710:	00000433 	.word	0x00000433
 8001714:	00000413 	.word	0x00000413
 8001718:	7fffffff 	.word	0x7fffffff
 800171c:	fffffbed 	.word	0xfffffbed

08001720 <__aeabi_f2d>:
 8001720:	0041      	lsls	r1, r0, #1
 8001722:	0e09      	lsrs	r1, r1, #24
 8001724:	1c4b      	adds	r3, r1, #1
 8001726:	b570      	push	{r4, r5, r6, lr}
 8001728:	b2db      	uxtb	r3, r3
 800172a:	0246      	lsls	r6, r0, #9
 800172c:	0a75      	lsrs	r5, r6, #9
 800172e:	0fc4      	lsrs	r4, r0, #31
 8001730:	2b01      	cmp	r3, #1
 8001732:	dd14      	ble.n	800175e <__aeabi_f2d+0x3e>
 8001734:	23e0      	movs	r3, #224	; 0xe0
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	076d      	lsls	r5, r5, #29
 800173a:	0b36      	lsrs	r6, r6, #12
 800173c:	18cb      	adds	r3, r1, r3
 800173e:	2100      	movs	r1, #0
 8001740:	0d0a      	lsrs	r2, r1, #20
 8001742:	0028      	movs	r0, r5
 8001744:	0512      	lsls	r2, r2, #20
 8001746:	4d1c      	ldr	r5, [pc, #112]	; (80017b8 <__aeabi_f2d+0x98>)
 8001748:	4332      	orrs	r2, r6
 800174a:	055b      	lsls	r3, r3, #21
 800174c:	402a      	ands	r2, r5
 800174e:	085b      	lsrs	r3, r3, #1
 8001750:	4313      	orrs	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	07e4      	lsls	r4, r4, #31
 8001756:	085b      	lsrs	r3, r3, #1
 8001758:	4323      	orrs	r3, r4
 800175a:	0019      	movs	r1, r3
 800175c:	bd70      	pop	{r4, r5, r6, pc}
 800175e:	2900      	cmp	r1, #0
 8001760:	d114      	bne.n	800178c <__aeabi_f2d+0x6c>
 8001762:	2d00      	cmp	r5, #0
 8001764:	d01e      	beq.n	80017a4 <__aeabi_f2d+0x84>
 8001766:	0028      	movs	r0, r5
 8001768:	f000 f82c 	bl	80017c4 <__clzsi2>
 800176c:	280a      	cmp	r0, #10
 800176e:	dc1c      	bgt.n	80017aa <__aeabi_f2d+0x8a>
 8001770:	230b      	movs	r3, #11
 8001772:	002a      	movs	r2, r5
 8001774:	1a1b      	subs	r3, r3, r0
 8001776:	40da      	lsrs	r2, r3
 8001778:	0003      	movs	r3, r0
 800177a:	3315      	adds	r3, #21
 800177c:	409d      	lsls	r5, r3
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <__aeabi_f2d+0x9c>)
 8001780:	0312      	lsls	r2, r2, #12
 8001782:	1a1b      	subs	r3, r3, r0
 8001784:	055b      	lsls	r3, r3, #21
 8001786:	0b16      	lsrs	r6, r2, #12
 8001788:	0d5b      	lsrs	r3, r3, #21
 800178a:	e7d8      	b.n	800173e <__aeabi_f2d+0x1e>
 800178c:	2d00      	cmp	r5, #0
 800178e:	d006      	beq.n	800179e <__aeabi_f2d+0x7e>
 8001790:	0b32      	lsrs	r2, r6, #12
 8001792:	2680      	movs	r6, #128	; 0x80
 8001794:	0336      	lsls	r6, r6, #12
 8001796:	076d      	lsls	r5, r5, #29
 8001798:	4316      	orrs	r6, r2
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <__aeabi_f2d+0xa0>)
 800179c:	e7cf      	b.n	800173e <__aeabi_f2d+0x1e>
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <__aeabi_f2d+0xa0>)
 80017a0:	2600      	movs	r6, #0
 80017a2:	e7cc      	b.n	800173e <__aeabi_f2d+0x1e>
 80017a4:	2300      	movs	r3, #0
 80017a6:	2600      	movs	r6, #0
 80017a8:	e7c9      	b.n	800173e <__aeabi_f2d+0x1e>
 80017aa:	0003      	movs	r3, r0
 80017ac:	002a      	movs	r2, r5
 80017ae:	3b0b      	subs	r3, #11
 80017b0:	409a      	lsls	r2, r3
 80017b2:	2500      	movs	r5, #0
 80017b4:	e7e3      	b.n	800177e <__aeabi_f2d+0x5e>
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	800fffff 	.word	0x800fffff
 80017bc:	00000389 	.word	0x00000389
 80017c0:	000007ff 	.word	0x000007ff

080017c4 <__clzsi2>:
 80017c4:	211c      	movs	r1, #28
 80017c6:	2301      	movs	r3, #1
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	4298      	cmp	r0, r3
 80017cc:	d301      	bcc.n	80017d2 <__clzsi2+0xe>
 80017ce:	0c00      	lsrs	r0, r0, #16
 80017d0:	3910      	subs	r1, #16
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	4298      	cmp	r0, r3
 80017d6:	d301      	bcc.n	80017dc <__clzsi2+0x18>
 80017d8:	0a00      	lsrs	r0, r0, #8
 80017da:	3908      	subs	r1, #8
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	4298      	cmp	r0, r3
 80017e0:	d301      	bcc.n	80017e6 <__clzsi2+0x22>
 80017e2:	0900      	lsrs	r0, r0, #4
 80017e4:	3904      	subs	r1, #4
 80017e6:	a202      	add	r2, pc, #8	; (adr r2, 80017f0 <__clzsi2+0x2c>)
 80017e8:	5c10      	ldrb	r0, [r2, r0]
 80017ea:	1840      	adds	r0, r0, r1
 80017ec:	4770      	bx	lr
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	02020304 	.word	0x02020304
 80017f4:	01010101 	.word	0x01010101
	...

08001800 <__clzdi2>:
 8001800:	b510      	push	{r4, lr}
 8001802:	2900      	cmp	r1, #0
 8001804:	d103      	bne.n	800180e <__clzdi2+0xe>
 8001806:	f7ff ffdd 	bl	80017c4 <__clzsi2>
 800180a:	3020      	adds	r0, #32
 800180c:	e002      	b.n	8001814 <__clzdi2+0x14>
 800180e:	1c08      	adds	r0, r1, #0
 8001810:	f7ff ffd8 	bl	80017c4 <__clzsi2>
 8001814:	bd10      	pop	{r4, pc}
 8001816:	46c0      	nop			; (mov r8, r8)

08001818 <HAL_MspDeInit>:
 8001818:	4770      	bx	lr
	...

0800181c <HAL_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800181c:	2201      	movs	r2, #1
{
 800181e:	b510      	push	{r4, lr}
  __HAL_RCC_APB1_RELEASE_RESET();
 8001820:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <HAL_DeInit+0x24>)
 8001824:	4252      	negs	r2, r2
 8001826:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_APB1_RELEASE_RESET();
 8001828:	629c      	str	r4, [r3, #40]	; 0x28

  __HAL_RCC_APB2_FORCE_RESET();
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800182c:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB_FORCE_RESET();
 800182e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_AHB_RELEASE_RESET();
 8001830:	621c      	str	r4, [r3, #32]

  __HAL_RCC_IOP_FORCE_RESET();
 8001832:	61da      	str	r2, [r3, #28]
  __HAL_RCC_IOP_RELEASE_RESET();
 8001834:	61dc      	str	r4, [r3, #28]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001836:	f7ff ffef 	bl	8001818 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
}
 800183a:	0020      	movs	r0, r4
 800183c:	bd10      	pop	{r4, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001844:	21fa      	movs	r1, #250	; 0xfa
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_InitTick+0x2c>)
{
 8001848:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800184a:	0089      	lsls	r1, r1, #2
{
 800184c:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	f7fe fc64 	bl	800011c <__udivsi3>
 8001854:	f000 fbbe 	bl	8001fd4 <HAL_SYSTICK_Config>
 8001858:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 800185a:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800185c:	2c00      	cmp	r4, #0
 800185e:	d105      	bne.n	800186c <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001860:	3802      	subs	r0, #2
 8001862:	0022      	movs	r2, r4
 8001864:	0029      	movs	r1, r5
 8001866:	f000 fb81 	bl	8001f6c <HAL_NVIC_SetPriority>
 800186a:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 800186c:	bd70      	pop	{r4, r5, r6, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	20000020 	.word	0x20000020

08001874 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001874:	2340      	movs	r3, #64	; 0x40
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_Init+0x24>)
{
 8001878:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800187a:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187c:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800187e:	430b      	orrs	r3, r1
 8001880:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001882:	f7ff ffdf 	bl	8001844 <HAL_InitTick>
 8001886:	1e04      	subs	r4, r0, #0
 8001888:	d103      	bne.n	8001892 <HAL_Init+0x1e>
    HAL_MspInit();
 800188a:	f003 f931 	bl	8004af0 <HAL_MspInit>
}
 800188e:	0020      	movs	r0, r4
 8001890:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001892:	2401      	movs	r4, #1
 8001894:	e7fb      	b.n	800188e <HAL_Init+0x1a>
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	40022000 	.word	0x40022000

0800189c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800189c:	4a02      	ldr	r2, [pc, #8]	; (80018a8 <HAL_IncTick+0xc>)
 800189e:	6813      	ldr	r3, [r2, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	4770      	bx	lr
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	2000025c 	.word	0x2000025c

080018ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018ac:	4b01      	ldr	r3, [pc, #4]	; (80018b4 <HAL_GetTick+0x8>)
 80018ae:	6818      	ldr	r0, [r3, #0]
}
 80018b0:	4770      	bx	lr
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	2000025c 	.word	0x2000025c

080018b8 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <ADC_DelayMicroSecond+0x24>)
{
 80018ba:	b513      	push	{r0, r1, r4, lr}
 80018bc:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <ADC_DelayMicroSecond+0x28>)
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	f7fe fc2b 	bl	800011c <__udivsi3>
 80018c6:	4344      	muls	r4, r0
 80018c8:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80018ca:	9b01      	ldr	r3, [sp, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d100      	bne.n	80018d2 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 80018d0:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 80018d2:	9b01      	ldr	r3, [sp, #4]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	9301      	str	r3, [sp, #4]
 80018d8:	e7f7      	b.n	80018ca <ADC_DelayMicroSecond+0x12>
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	20000020 	.word	0x20000020
 80018e0:	000f4240 	.word	0x000f4240

080018e4 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018e4:	2103      	movs	r1, #3
 80018e6:	6803      	ldr	r3, [r0, #0]
{
 80018e8:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018ea:	689a      	ldr	r2, [r3, #8]
{
 80018ec:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018ee:	400a      	ands	r2, r1
 80018f0:	2a01      	cmp	r2, #1
 80018f2:	d104      	bne.n	80018fe <ADC_Enable+0x1a>
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	4211      	tst	r1, r2
 80018f8:	d001      	beq.n	80018fe <ADC_Enable+0x1a>
  return HAL_OK;
 80018fa:	2000      	movs	r0, #0
}
 80018fc:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018fe:	6899      	ldr	r1, [r3, #8]
 8001900:	4a13      	ldr	r2, [pc, #76]	; (8001950 <ADC_Enable+0x6c>)
 8001902:	4211      	tst	r1, r2
 8001904:	d008      	beq.n	8001918 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001906:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001908:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800190c:	4313      	orrs	r3, r2
 800190e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001910:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001912:	4303      	orrs	r3, r0
 8001914:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8001916:	e7f1      	b.n	80018fc <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8001918:	2501      	movs	r5, #1
 800191a:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800191c:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 800191e:	432a      	orrs	r2, r5
 8001920:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001922:	f7ff ffc9 	bl	80018b8 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8001926:	f7ff ffc1 	bl	80018ac <HAL_GetTick>
 800192a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800192c:	6823      	ldr	r3, [r4, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	422b      	tst	r3, r5
 8001932:	d1e2      	bne.n	80018fa <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001934:	f7ff ffba 	bl	80018ac <HAL_GetTick>
 8001938:	1b80      	subs	r0, r0, r6
 800193a:	280a      	cmp	r0, #10
 800193c:	d9f6      	bls.n	800192c <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800193e:	2310      	movs	r3, #16
 8001940:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8001942:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001944:	4313      	orrs	r3, r2
 8001946:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001948:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800194a:	431d      	orrs	r5, r3
 800194c:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 800194e:	e7d5      	b.n	80018fc <ADC_Enable+0x18>
 8001950:	80000017 	.word	0x80000017

08001954 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001954:	2103      	movs	r1, #3
 8001956:	6803      	ldr	r3, [r0, #0]
{
 8001958:	b570      	push	{r4, r5, r6, lr}
 800195a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800195c:	6898      	ldr	r0, [r3, #8]
 800195e:	4008      	ands	r0, r1
 8001960:	2801      	cmp	r0, #1
 8001962:	d001      	beq.n	8001968 <ADC_Disable+0x14>
  return HAL_OK;
 8001964:	2000      	movs	r0, #0
}
 8001966:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4202      	tst	r2, r0
 800196c:	d0fa      	beq.n	8001964 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800196e:	2205      	movs	r2, #5
 8001970:	689d      	ldr	r5, [r3, #8]
 8001972:	4015      	ands	r5, r2
 8001974:	2d01      	cmp	r5, #1
 8001976:	d119      	bne.n	80019ac <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8001978:	6898      	ldr	r0, [r3, #8]
 800197a:	3a03      	subs	r2, #3
 800197c:	4302      	orrs	r2, r0
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8001982:	f7ff ff93 	bl	80018ac <HAL_GetTick>
 8001986:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	422b      	tst	r3, r5
 800198e:	d0e9      	beq.n	8001964 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001990:	f7ff ff8c 	bl	80018ac <HAL_GetTick>
 8001994:	1b80      	subs	r0, r0, r6
 8001996:	280a      	cmp	r0, #10
 8001998:	d9f6      	bls.n	8001988 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199a:	2310      	movs	r3, #16
 800199c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a0:	4313      	orrs	r3, r2
 80019a2:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019a6:	431d      	orrs	r5, r3
 80019a8:	65a5      	str	r5, [r4, #88]	; 0x58
 80019aa:	e7dc      	b.n	8001966 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ac:	2310      	movs	r3, #16
 80019ae:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80019b0:	4313      	orrs	r3, r2
 80019b2:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80019b6:	4303      	orrs	r3, r0
 80019b8:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80019ba:	e7d4      	b.n	8001966 <ADC_Disable+0x12>

080019bc <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80019bc:	2204      	movs	r2, #4
 80019be:	6803      	ldr	r3, [r0, #0]
{
 80019c0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80019c2:	6899      	ldr	r1, [r3, #8]
{
 80019c4:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80019c6:	4211      	tst	r1, r2
 80019c8:	d101      	bne.n	80019ce <ADC_ConversionStop+0x12>
  return HAL_OK;
 80019ca:	2000      	movs	r0, #0
}
 80019cc:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80019ce:	6899      	ldr	r1, [r3, #8]
 80019d0:	4211      	tst	r1, r2
 80019d2:	d006      	beq.n	80019e2 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80019d4:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80019d6:	0792      	lsls	r2, r2, #30
 80019d8:	d403      	bmi.n	80019e2 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80019da:	2210      	movs	r2, #16
 80019dc:	6899      	ldr	r1, [r3, #8]
 80019de:	430a      	orrs	r2, r1
 80019e0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80019e2:	f7ff ff63 	bl	80018ac <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80019e6:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 80019e8:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80019ea:	6823      	ldr	r3, [r4, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	422b      	tst	r3, r5
 80019f0:	d0eb      	beq.n	80019ca <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80019f2:	f7ff ff5b 	bl	80018ac <HAL_GetTick>
 80019f6:	1b80      	subs	r0, r0, r6
 80019f8:	280a      	cmp	r0, #10
 80019fa:	d9f6      	bls.n	80019ea <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019fc:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fe:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a00:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001a02:	4313      	orrs	r3, r2
 8001a04:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001a08:	4303      	orrs	r3, r0
 8001a0a:	65a3      	str	r3, [r4, #88]	; 0x58
 8001a0c:	e7de      	b.n	80019cc <ADC_ConversionStop+0x10>
	...

08001a10 <HAL_ADC_Init>:
{
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001a14:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001a16:	2c00      	cmp	r4, #0
 8001a18:	d019      	beq.n	8001a4e <HAL_ADC_Init+0x3e>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d106      	bne.n	8001a2e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8001a20:	0022      	movs	r2, r4
 8001a22:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8001a24:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8001a26:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001a28:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001a2a:	f003 f86f 	bl	8004b0c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001a2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a30:	06db      	lsls	r3, r3, #27
 8001a32:	d404      	bmi.n	8001a3e <HAL_ADC_Init+0x2e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001a34:	2204      	movs	r2, #4
 8001a36:	6823      	ldr	r3, [r4, #0]
 8001a38:	6898      	ldr	r0, [r3, #8]
 8001a3a:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001a3c:	d008      	beq.n	8001a50 <HAL_ADC_Init+0x40>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3e:	2310      	movs	r3, #16
 8001a40:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8001a42:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a44:	4313      	orrs	r3, r2
 8001a46:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001a48:	2300      	movs	r3, #0
 8001a4a:	3450      	adds	r4, #80	; 0x50
 8001a4c:	7023      	strb	r3, [r4, #0]
}
 8001a4e:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8001a50:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001a52:	4955      	ldr	r1, [pc, #340]	; (8001ba8 <HAL_ADC_Init+0x198>)
 8001a54:	4011      	ands	r1, r2
 8001a56:	2202      	movs	r2, #2
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	6899      	ldr	r1, [r3, #8]
 8001a60:	4011      	ands	r1, r2
 8001a62:	4a52      	ldr	r2, [pc, #328]	; (8001bac <HAL_ADC_Init+0x19c>)
 8001a64:	2901      	cmp	r1, #1
 8001a66:	d102      	bne.n	8001a6e <HAL_ADC_Init+0x5e>
 8001a68:	681d      	ldr	r5, [r3, #0]
 8001a6a:	420d      	tst	r5, r1
 8001a6c:	d119      	bne.n	8001aa2 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001a6e:	2680      	movs	r6, #128	; 0x80
 8001a70:	6861      	ldr	r1, [r4, #4]
 8001a72:	05f6      	lsls	r6, r6, #23
 8001a74:	004d      	lsls	r5, r1, #1
 8001a76:	086d      	lsrs	r5, r5, #1
 8001a78:	42b5      	cmp	r5, r6
 8001a7a:	d003      	beq.n	8001a84 <HAL_ADC_Init+0x74>
 8001a7c:	2580      	movs	r5, #128	; 0x80
 8001a7e:	062d      	lsls	r5, r5, #24
 8001a80:	42a9      	cmp	r1, r5
 8001a82:	d176      	bne.n	8001b72 <HAL_ADC_Init+0x162>
 8001a84:	691d      	ldr	r5, [r3, #16]
 8001a86:	00ad      	lsls	r5, r5, #2
 8001a88:	08ad      	lsrs	r5, r5, #2
 8001a8a:	611d      	str	r5, [r3, #16]
 8001a8c:	691d      	ldr	r5, [r3, #16]
 8001a8e:	4329      	orrs	r1, r5
 8001a90:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001a92:	2518      	movs	r5, #24
 8001a94:	68d9      	ldr	r1, [r3, #12]
 8001a96:	43a9      	bics	r1, r5
 8001a98:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001a9a:	68d9      	ldr	r1, [r3, #12]
 8001a9c:	68a5      	ldr	r5, [r4, #8]
 8001a9e:	4329      	orrs	r1, r5
 8001aa0:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001aa2:	6811      	ldr	r1, [r2, #0]
 8001aa4:	4d42      	ldr	r5, [pc, #264]	; (8001bb0 <HAL_ADC_Init+0x1a0>)
 8001aa6:	4029      	ands	r1, r5
 8001aa8:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001aac:	6815      	ldr	r5, [r2, #0]
 8001aae:	0649      	lsls	r1, r1, #25
 8001ab0:	4329      	orrs	r1, r5
 8001ab2:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	6899      	ldr	r1, [r3, #8]
 8001ab8:	0552      	lsls	r2, r2, #21
 8001aba:	4211      	tst	r1, r2
 8001abc:	d102      	bne.n	8001ac4 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001abe:	6899      	ldr	r1, [r3, #8]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	493b      	ldr	r1, [pc, #236]	; (8001bb4 <HAL_ADC_Init+0x1a4>)
 8001ac8:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001aca:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001acc:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ace:	68dd      	ldr	r5, [r3, #12]
 8001ad0:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001ad2:	2902      	cmp	r1, #2
 8001ad4:	d100      	bne.n	8001ad8 <HAL_ADC_Init+0xc8>
 8001ad6:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ad8:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ada:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001adc:	4332      	orrs	r2, r6
 8001ade:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ae0:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ae2:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001ae4:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001ae6:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001ae8:	69e5      	ldr	r5, [r4, #28]
 8001aea:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001aec:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001aee:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001af0:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001af2:	0025      	movs	r5, r4
 8001af4:	352c      	adds	r5, #44	; 0x2c
 8001af6:	782d      	ldrb	r5, [r5, #0]
 8001af8:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001afa:	432a      	orrs	r2, r5
 8001afc:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001afe:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001b00:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b04:	30ff      	adds	r0, #255	; 0xff
 8001b06:	4282      	cmp	r2, r0
 8001b08:	d004      	beq.n	8001b14 <HAL_ADC_Init+0x104>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001b0a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001b0c:	68d8      	ldr	r0, [r3, #12]
 8001b0e:	432a      	orrs	r2, r5
 8001b10:	4302      	orrs	r2, r0
 8001b12:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b14:	1ca2      	adds	r2, r4, #2
 8001b16:	7fd2      	ldrb	r2, [r2, #31]
 8001b18:	2a01      	cmp	r2, #1
 8001b1a:	d106      	bne.n	8001b2a <HAL_ADC_Init+0x11a>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b1c:	2900      	cmp	r1, #0
 8001b1e:	d134      	bne.n	8001b8a <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	68d9      	ldr	r1, [r3, #12]
 8001b24:	0252      	lsls	r2, r2, #9
 8001b26:	430a      	orrs	r2, r1
 8001b28:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8001b2a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001b2c:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8001b2e:	2901      	cmp	r1, #1
 8001b30:	d133      	bne.n	8001b9a <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001b32:	4821      	ldr	r0, [pc, #132]	; (8001bb8 <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001b34:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001b36:	4002      	ands	r2, r0
 8001b38:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001b3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b3c:	6918      	ldr	r0, [r3, #16]
 8001b3e:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8001b40:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001b42:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001b44:	4302      	orrs	r2, r0
 8001b46:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	4311      	orrs	r1, r2
 8001b4c:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001b4e:	2107      	movs	r1, #7
 8001b50:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8001b52:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001b54:	438a      	bics	r2, r1
 8001b56:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8001b60:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8001b62:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8001b64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b66:	4393      	bics	r3, r2
 8001b68:	001a      	movs	r2, r3
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8001b70:	e76d      	b.n	8001a4e <HAL_ADC_Init+0x3e>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001b72:	691d      	ldr	r5, [r3, #16]
 8001b74:	4e11      	ldr	r6, [pc, #68]	; (8001bbc <HAL_ADC_Init+0x1ac>)
 8001b76:	00ad      	lsls	r5, r5, #2
 8001b78:	08ad      	lsrs	r5, r5, #2
 8001b7a:	611d      	str	r5, [r3, #16]
 8001b7c:	6815      	ldr	r5, [r2, #0]
 8001b7e:	4035      	ands	r5, r6
 8001b80:	6015      	str	r5, [r2, #0]
 8001b82:	6815      	ldr	r5, [r2, #0]
 8001b84:	4329      	orrs	r1, r5
 8001b86:	6011      	str	r1, [r2, #0]
 8001b88:	e783      	b.n	8001a92 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8a:	2120      	movs	r1, #32
 8001b8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001b8e:	4301      	orrs	r1, r0
 8001b90:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b92:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001b94:	430a      	orrs	r2, r1
 8001b96:	65a2      	str	r2, [r4, #88]	; 0x58
 8001b98:	e7c7      	b.n	8001b2a <HAL_ADC_Init+0x11a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	420a      	tst	r2, r1
 8001b9e:	d0d6      	beq.n	8001b4e <HAL_ADC_Init+0x13e>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	438a      	bics	r2, r1
 8001ba4:	611a      	str	r2, [r3, #16]
 8001ba6:	e7d2      	b.n	8001b4e <HAL_ADC_Init+0x13e>
 8001ba8:	fffffefd 	.word	0xfffffefd
 8001bac:	40012708 	.word	0x40012708
 8001bb0:	fdffffff 	.word	0xfdffffff
 8001bb4:	fffe0219 	.word	0xfffe0219
 8001bb8:	fffffc03 	.word	0xfffffc03
 8001bbc:	ffc3ffff 	.word	0xffc3ffff

08001bc0 <HAL_ADC_DeInit>:
{
 8001bc0:	b570      	push	{r4, r5, r6, lr}
 8001bc2:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001bc4:	2501      	movs	r5, #1
  if(hadc == NULL)
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	d011      	beq.n	8001bee <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001bca:	2302      	movs	r3, #2
 8001bcc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001bd2:	f7ff fef3 	bl	80019bc <ADC_ConversionStop>
 8001bd6:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8001bd8:	d137      	bne.n	8001c4a <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 8001bda:	0020      	movs	r0, r4
 8001bdc:	f7ff feba 	bl	8001954 <ADC_Disable>
 8001be0:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8001be2:	2801      	cmp	r0, #1
 8001be4:	d105      	bne.n	8001bf2 <HAL_ADC_DeInit+0x32>
{
 8001be6:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8001be8:	2300      	movs	r3, #0
 8001bea:	3450      	adds	r4, #80	; 0x50
 8001bec:	7023      	strb	r3, [r4, #0]
}
 8001bee:	0028      	movs	r0, r5
 8001bf0:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	4915      	ldr	r1, [pc, #84]	; (8001c50 <HAL_ADC_DeInit+0x90>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 8001bfc:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8001bfe:	400a      	ands	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8001c02:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8001c04:	4914      	ldr	r1, [pc, #80]	; (8001c58 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8001c06:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	400a      	ands	r2, r1
 8001c0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	4912      	ldr	r1, [pc, #72]	; (8001c5c <HAL_ADC_DeInit+0x9c>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	4911      	ldr	r1, [pc, #68]	; (8001c60 <HAL_ADC_DeInit+0xa0>)
 8001c1a:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8001c1c:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8001c1e:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	438a      	bics	r2, r1
 8001c24:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8001c26:	6a1a      	ldr	r2, [r3, #32]
 8001c28:	490e      	ldr	r1, [pc, #56]	; (8001c64 <HAL_ADC_DeInit+0xa4>)
 8001c2a:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8001c2c:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8001c2e:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8001c30:	33b4      	adds	r3, #180	; 0xb4
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	438a      	bics	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	438a      	bics	r2, r1
 8001c3c:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 8001c3e:	f002 ff8f 	bl	8004b60 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001c42:	2300      	movs	r3, #0
 8001c44:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8001c46:	6563      	str	r3, [r4, #84]	; 0x54
 8001c48:	e7ce      	b.n	8001be8 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 8001c4a:	2801      	cmp	r0, #1
 8001c4c:	d0cb      	beq.n	8001be6 <HAL_ADC_DeInit+0x26>
 8001c4e:	e7d2      	b.n	8001bf6 <HAL_ADC_DeInit+0x36>
 8001c50:	fffff760 	.word	0xfffff760
 8001c54:	0000089f 	.word	0x0000089f
 8001c58:	efffffff 	.word	0xefffffff
 8001c5c:	833e0200 	.word	0x833e0200
 8001c60:	3ffffc02 	.word	0x3ffffc02
 8001c64:	f000f000 	.word	0xf000f000

08001c68 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c68:	6803      	ldr	r3, [r0, #0]
{
 8001c6a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c6c:	689b      	ldr	r3, [r3, #8]
{
 8001c6e:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8001c70:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c72:	075b      	lsls	r3, r3, #29
 8001c74:	d41a      	bmi.n	8001cac <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8001c76:	0025      	movs	r5, r4
 8001c78:	3550      	adds	r5, #80	; 0x50
 8001c7a:	782b      	ldrb	r3, [r5, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d015      	beq.n	8001cac <HAL_ADC_Start+0x44>
 8001c80:	2301      	movs	r3, #1
 8001c82:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001c84:	69e3      	ldr	r3, [r4, #28]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d111      	bne.n	8001cae <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001c8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8001c8e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001c90:	401a      	ands	r2, r3
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c98:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8001c9a:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c9c:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 8001c9e:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8001ca0:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ca2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001ca4:	6899      	ldr	r1, [r3, #8]
 8001ca6:	3a18      	subs	r2, #24
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	609a      	str	r2, [r3, #8]
}
 8001cac:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001cae:	0020      	movs	r0, r4
 8001cb0:	f7ff fe18 	bl	80018e4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d0e8      	beq.n	8001c8a <HAL_ADC_Start+0x22>
 8001cb8:	e7f8      	b.n	8001cac <HAL_ADC_Start+0x44>
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	fffff0fe 	.word	0xfffff0fe

08001cc0 <HAL_ADC_Stop>:
{
 8001cc0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8001cc2:	0006      	movs	r6, r0
 8001cc4:	3650      	adds	r6, #80	; 0x50
 8001cc6:	7833      	ldrb	r3, [r6, #0]
{
 8001cc8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001cca:	2002      	movs	r0, #2
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d012      	beq.n	8001cf6 <HAL_ADC_Stop+0x36>
 8001cd0:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001cd2:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8001cd4:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001cd6:	f7ff fe71 	bl	80019bc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d109      	bne.n	8001cf2 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8001cde:	0020      	movs	r0, r4
 8001ce0:	f7ff fe38 	bl	8001954 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	d104      	bne.n	8001cf2 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001ce8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001cea:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <HAL_ADC_Stop+0x38>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	431d      	orrs	r5, r3
 8001cf0:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	7033      	strb	r3, [r6, #0]
}
 8001cf6:	bd70      	pop	{r4, r5, r6, pc}
 8001cf8:	fffffefe 	.word	0xfffffefe

08001cfc <HAL_ADC_PollForConversion>:
{
 8001cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001cfe:	6945      	ldr	r5, [r0, #20]
{
 8001d00:	0004      	movs	r4, r0
 8001d02:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d04:	2d08      	cmp	r5, #8
 8001d06:	d00d      	beq.n	8001d24 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001d08:	6803      	ldr	r3, [r0, #0]
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001d0e:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001d10:	4203      	tst	r3, r0
 8001d12:	d007      	beq.n	8001d24 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d14:	2320      	movs	r3, #32
 8001d16:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8001d18:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8001d1e:	2300      	movs	r3, #0
 8001d20:	7023      	strb	r3, [r4, #0]
}
 8001d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8001d24:	f7ff fdc2 	bl	80018ac <HAL_GetTick>
 8001d28:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4215      	tst	r5, r2
 8001d30:	d024      	beq.n	8001d7c <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d32:	2280      	movs	r2, #128	; 0x80
 8001d34:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d3c:	22c0      	movs	r2, #192	; 0xc0
 8001d3e:	68d9      	ldr	r1, [r3, #12]
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	4211      	tst	r1, r2
 8001d44:	d113      	bne.n	8001d6e <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d46:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d48:	7fd2      	ldrb	r2, [r2, #31]
 8001d4a:	2a00      	cmp	r2, #0
 8001d4c:	d10f      	bne.n	8001d6e <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	0712      	lsls	r2, r2, #28
 8001d52:	d50c      	bpl.n	8001d6e <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	0752      	lsls	r2, r2, #29
 8001d58:	d423      	bmi.n	8001da2 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d5a:	210c      	movs	r1, #12
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	438a      	bics	r2, r1
 8001d60:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8001d62:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001d64:	4913      	ldr	r1, [pc, #76]	; (8001db4 <HAL_ADC_PollForConversion+0xb8>)
 8001d66:	4011      	ands	r1, r2
 8001d68:	2201      	movs	r2, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 8001d6e:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001d70:	69a2      	ldr	r2, [r4, #24]
 8001d72:	4282      	cmp	r2, r0
 8001d74:	d1d5      	bne.n	8001d22 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e7d2      	b.n	8001d22 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8001d7c:	1c72      	adds	r2, r6, #1
 8001d7e:	d0d5      	beq.n	8001d2c <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001d80:	2e00      	cmp	r6, #0
 8001d82:	d108      	bne.n	8001d96 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d84:	2304      	movs	r3, #4
 8001d86:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8001d88:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8001d8e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001d90:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8001d92:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8001d94:	e7c5      	b.n	8001d22 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001d96:	f7ff fd89 	bl	80018ac <HAL_GetTick>
 8001d9a:	1bc0      	subs	r0, r0, r7
 8001d9c:	42b0      	cmp	r0, r6
 8001d9e:	d9c4      	bls.n	8001d2a <HAL_ADC_PollForConversion+0x2e>
 8001da0:	e7f0      	b.n	8001d84 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da2:	2220      	movs	r2, #32
 8001da4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001da6:	430a      	orrs	r2, r1
 8001da8:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001daa:	2201      	movs	r2, #1
 8001dac:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001dae:	430a      	orrs	r2, r1
 8001db0:	65a2      	str	r2, [r4, #88]	; 0x58
 8001db2:	e7dc      	b.n	8001d6e <HAL_ADC_PollForConversion+0x72>
 8001db4:	fffffefe 	.word	0xfffffefe

08001db8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001db8:	6803      	ldr	r3, [r0, #0]
 8001dba:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_ADC_ConfigChannel>:
{
 8001dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001dc2:	0004      	movs	r4, r0
 8001dc4:	3450      	adds	r4, #80	; 0x50
 8001dc6:	7823      	ldrb	r3, [r4, #0]
{
 8001dc8:	0006      	movs	r6, r0
 8001dca:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8001dcc:	2002      	movs	r0, #2
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d00b      	beq.n	8001dea <HAL_ADC_ConfigChannel+0x2a>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001dd2:	6832      	ldr	r2, [r6, #0]
  __HAL_LOCK(hadc);
 8001dd4:	3801      	subs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001dd6:	6891      	ldr	r1, [r2, #8]
  __HAL_LOCK(hadc);
 8001dd8:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001dda:	074b      	lsls	r3, r1, #29
 8001ddc:	d506      	bpl.n	8001dec <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dde:	2220      	movs	r2, #32
 8001de0:	6d71      	ldr	r1, [r6, #84]	; 0x54
 8001de2:	430a      	orrs	r2, r1
 8001de4:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001de6:	2200      	movs	r2, #0
 8001de8:	7022      	strb	r2, [r4, #0]
}
 8001dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	6828      	ldr	r0, [r5, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8001df0:	4e19      	ldr	r6, [pc, #100]	; (8001e58 <HAL_ADC_ConfigChannel+0x98>)
 8001df2:	686f      	ldr	r7, [r5, #4]
 8001df4:	0341      	lsls	r1, r0, #13
 8001df6:	02db      	lsls	r3, r3, #11
 8001df8:	0b49      	lsrs	r1, r1, #13
 8001dfa:	4003      	ands	r3, r0
 8001dfc:	42b7      	cmp	r7, r6
 8001dfe:	d019      	beq.n	8001e34 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001e00:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001e02:	4301      	orrs	r1, r0
 8001e04:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d008      	beq.n	8001e1c <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	4a13      	ldr	r2, [pc, #76]	; (8001e5c <HAL_ADC_ConfigChannel+0x9c>)
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001e12:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8001e14:	430b      	orrs	r3, r1
 8001e16:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001e18:	f7ff fd4e 	bl	80018b8 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001e1c:	682b      	ldr	r3, [r5, #0]
 8001e1e:	039b      	lsls	r3, r3, #14
 8001e20:	d505      	bpl.n	8001e2e <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <HAL_ADC_ConfigChannel+0x9c>)
 8001e26:	03db      	lsls	r3, r3, #15
 8001e28:	6811      	ldr	r1, [r2, #0]
 8001e2a:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001e2c:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8001e32:	e7da      	b.n	8001dea <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001e34:	6a95      	ldr	r5, [r2, #40]	; 0x28
 8001e36:	438d      	bics	r5, r1
 8001e38:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d004      	beq.n	8001e48 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001e3e:	4a07      	ldr	r2, [pc, #28]	; (8001e5c <HAL_ADC_ConfigChannel+0x9c>)
 8001e40:	4907      	ldr	r1, [pc, #28]	; (8001e60 <HAL_ADC_ConfigChannel+0xa0>)
 8001e42:	6813      	ldr	r3, [r2, #0]
 8001e44:	400b      	ands	r3, r1
 8001e46:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001e48:	0383      	lsls	r3, r0, #14
 8001e4a:	d5f0      	bpl.n	8001e2e <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001e4c:	4a03      	ldr	r2, [pc, #12]	; (8001e5c <HAL_ADC_ConfigChannel+0x9c>)
 8001e4e:	4905      	ldr	r1, [pc, #20]	; (8001e64 <HAL_ADC_ConfigChannel+0xa4>)
 8001e50:	6813      	ldr	r3, [r2, #0]
 8001e52:	400b      	ands	r3, r1
 8001e54:	e7ea      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x6c>
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	00001001 	.word	0x00001001
 8001e5c:	40012708 	.word	0x40012708
 8001e60:	ff7fffff 	.word	0xff7fffff
 8001e64:	ffbfffff 	.word	0xffbfffff

08001e68 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e6a:	0005      	movs	r5, r0
 8001e6c:	3550      	adds	r5, #80	; 0x50
 8001e6e:	782b      	ldrb	r3, [r5, #0]
{
 8001e70:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001e72:	2002      	movs	r0, #2
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d044      	beq.n	8001f02 <HAL_ADCEx_Calibration_Start+0x9a>
 8001e78:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e7a:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8001e7c:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	6898      	ldr	r0, [r3, #8]
 8001e82:	4010      	ands	r0, r2
 8001e84:	2801      	cmp	r0, #1
 8001e86:	d109      	bne.n	8001e9c <HAL_ADCEx_Calibration_Start+0x34>
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4202      	tst	r2, r0
 8001e8c:	d006      	beq.n	8001e9c <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8e:	2320      	movs	r3, #32
 8001e90:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e92:	4313      	orrs	r3, r2
 8001e94:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e96:	2300      	movs	r3, #0
 8001e98:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8001e9a:	e032      	b.n	8001f02 <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 8001e9c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e9e:	4919      	ldr	r1, [pc, #100]	; (8001f04 <HAL_ADCEx_Calibration_Start+0x9c>)
 8001ea0:	4011      	ands	r1, r2
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001ea6:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8001ea8:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001eaa:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	438a      	bics	r2, r1
 8001eb0:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	6899      	ldr	r1, [r3, #8]
 8001eb6:	0612      	lsls	r2, r2, #24
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8001ebc:	f7ff fcf6 	bl	80018ac <HAL_GetTick>
 8001ec0:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	2a00      	cmp	r2, #0
 8001ec8:	db0c      	blt.n	8001ee4 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001eca:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001ecc:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001ece:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001ed0:	430e      	orrs	r6, r1
 8001ed2:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8001ed4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed6:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8001ed8:	4393      	bics	r3, r2
 8001eda:	001a      	movs	r2, r3
 8001edc:	2301      	movs	r3, #1
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	6563      	str	r3, [r4, #84]	; 0x54
 8001ee2:	e7d8      	b.n	8001e96 <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ee4:	f7ff fce2 	bl	80018ac <HAL_GetTick>
 8001ee8:	1bc0      	subs	r0, r0, r7
 8001eea:	280a      	cmp	r0, #10
 8001eec:	d9e9      	bls.n	8001ec2 <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 8001eee:	2212      	movs	r2, #18
 8001ef0:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8001ef2:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	001a      	movs	r2, r3
 8001ef8:	2310      	movs	r3, #16
 8001efa:	4313      	orrs	r3, r2
 8001efc:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8001efe:	2300      	movs	r3, #0
 8001f00:	702b      	strb	r3, [r5, #0]
}
 8001f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f04:	fffffefd 	.word	0xfffffefd

08001f08 <HAL_ADCEx_Calibration_GetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff)); 
  
  /* Return the ADC calibration value */ 
  return ((hadc->Instance->CALFACT) & 0x0000007FU);
 8001f08:	6803      	ldr	r3, [r0, #0]
 8001f0a:	33b4      	adds	r3, #180	; 0xb4
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	237f      	movs	r3, #127	; 0x7f
 8001f10:	4018      	ands	r0, r3
}
 8001f12:	4770      	bx	lr

08001f14 <HAL_ADCEx_Calibration_SetValue>:
  *           @arg ADC_SINGLE_ENDED: Channel in mode input single ended.
  * @param  CalibrationFactor Calibration factor (coded on 7 bits maximum)
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef* hadc, uint32_t SingleDiff, uint32_t CalibrationFactor)
{
 8001f14:	b530      	push	{r4, r5, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff)); 
  assert_param(IS_ADC_CALFACT(CalibrationFactor)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f16:	0005      	movs	r5, r0
 8001f18:	3550      	adds	r5, #80	; 0x50
 8001f1a:	782b      	ldrb	r3, [r5, #0]
{
 8001f1c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001f1e:	2002      	movs	r0, #2
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d019      	beq.n	8001f58 <HAL_ADCEx_Calibration_SetValue+0x44>
 8001f24:	2301      	movs	r3, #1
  
  /* Verification of hardware constraints before modifying the calibration    */
  /* factors register: ADC must be enabled, no conversion on going.           */
  if ( (ADC_IS_ENABLE(hadc) != RESET)                            &&
 8001f26:	6821      	ldr	r1, [r4, #0]
  __HAL_LOCK(hadc);
 8001f28:	702b      	strb	r3, [r5, #0]
  if ( (ADC_IS_ENABLE(hadc) != RESET)                            &&
 8001f2a:	688b      	ldr	r3, [r1, #8]
 8001f2c:	3001      	adds	r0, #1
 8001f2e:	4003      	ands	r3, r0
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d112      	bne.n	8001f5a <HAL_ADCEx_Calibration_SetValue+0x46>
 8001f34:	6808      	ldr	r0, [r1, #0]
 8001f36:	4218      	tst	r0, r3
 8001f38:	d00f      	beq.n	8001f5a <HAL_ADCEx_Calibration_SetValue+0x46>
       (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
 8001f3a:	2004      	movs	r0, #4
 8001f3c:	688b      	ldr	r3, [r1, #8]
 8001f3e:	4003      	ands	r3, r0
  if ( (ADC_IS_ENABLE(hadc) != RESET)                            &&
 8001f40:	d10b      	bne.n	8001f5a <HAL_ADCEx_Calibration_SetValue+0x46>
  {
    /* Set the selected ADC calibration value */ 
    hadc->Instance->CALFACT &= ~ADC_CALFACT_CALFACT;
 8001f42:	247f      	movs	r4, #127	; 0x7f
 8001f44:	31b4      	adds	r1, #180	; 0xb4
 8001f46:	6808      	ldr	r0, [r1, #0]
 8001f48:	43a0      	bics	r0, r4
 8001f4a:	6008      	str	r0, [r1, #0]
    hadc->Instance->CALFACT |= CalibrationFactor;
 8001f4c:	6808      	ldr	r0, [r1, #0]
 8001f4e:	4302      	orrs	r2, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f50:	0018      	movs	r0, r3
    hadc->Instance->CALFACT |= CalibrationFactor;
 8001f52:	600a      	str	r2, [r1, #0]
    /* Update ADC state machine to error */
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f54:	2300      	movs	r3, #0
 8001f56:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001f58:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5a:	2310      	movs	r3, #16
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f60:	4313      	orrs	r3, r2
 8001f62:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f64:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001f66:	4302      	orrs	r2, r0
 8001f68:	65a2      	str	r2, [r4, #88]	; 0x58
 8001f6a:	e7f3      	b.n	8001f54 <HAL_ADCEx_Calibration_SetValue+0x40>

08001f6c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f6c:	b530      	push	{r4, r5, lr}
 8001f6e:	25ff      	movs	r5, #255	; 0xff
 8001f70:	2403      	movs	r4, #3
 8001f72:	002a      	movs	r2, r5
 8001f74:	b2c3      	uxtb	r3, r0
 8001f76:	401c      	ands	r4, r3
 8001f78:	00e4      	lsls	r4, r4, #3
 8001f7a:	40a2      	lsls	r2, r4
 8001f7c:	0189      	lsls	r1, r1, #6
 8001f7e:	4029      	ands	r1, r5
 8001f80:	43d2      	mvns	r2, r2
 8001f82:	40a1      	lsls	r1, r4
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001f84:	2800      	cmp	r0, #0
 8001f86:	da0b      	bge.n	8001fa0 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f88:	200f      	movs	r0, #15
 8001f8a:	4003      	ands	r3, r0
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	480a      	ldr	r0, [pc, #40]	; (8001fb8 <HAL_NVIC_SetPriority+0x4c>)
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	181b      	adds	r3, r3, r0
 8001f96:	69d8      	ldr	r0, [r3, #28]
 8001f98:	4002      	ands	r2, r0
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001f9e:	bd30      	pop	{r4, r5, pc}
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_NVIC_SetPriority+0x50>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa2:	0880      	lsrs	r0, r0, #2
 8001fa4:	0080      	lsls	r0, r0, #2
 8001fa6:	18c0      	adds	r0, r0, r3
 8001fa8:	23c0      	movs	r3, #192	; 0xc0
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	58c4      	ldr	r4, [r0, r3]
 8001fae:	4022      	ands	r2, r4
 8001fb0:	4311      	orrs	r1, r2
 8001fb2:	50c1      	str	r1, [r0, r3]
 8001fb4:	e7f3      	b.n	8001f9e <HAL_NVIC_SetPriority+0x32>
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	e000ed00 	.word	0xe000ed00
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001fc0:	231f      	movs	r3, #31
 8001fc2:	4018      	ands	r0, r3
 8001fc4:	3b1e      	subs	r3, #30
 8001fc6:	4083      	lsls	r3, r0
 8001fc8:	4a01      	ldr	r2, [pc, #4]	; (8001fd0 <HAL_NVIC_EnableIRQ+0x10>)
 8001fca:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001fcc:	4770      	bx	lr
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd4:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_SYSTICK_Config+0x28>)
 8001fd6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fd8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d80d      	bhi.n	8001ffa <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fde:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe0:	4a07      	ldr	r2, [pc, #28]	; (8002000 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe2:	4808      	ldr	r0, [pc, #32]	; (8002004 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fe4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe6:	6a03      	ldr	r3, [r0, #32]
 8001fe8:	0609      	lsls	r1, r1, #24
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	430b      	orrs	r3, r1
 8001ff0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff6:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001ffa:	4770      	bx	lr
 8001ffc:	00ffffff 	.word	0x00ffffff
 8002000:	e000e010 	.word	0xe000e010
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200a:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800200c:	2001      	movs	r0, #1
  if(hdma == NULL)
 800200e:	2c00      	cmp	r4, #0
 8002010:	d035      	beq.n	800207e <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002012:	6825      	ldr	r5, [r4, #0]
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_DMA_Init+0x78>)
 8002016:	2114      	movs	r1, #20
 8002018:	18e8      	adds	r0, r5, r3
 800201a:	f7fe f87f 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002020:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8002022:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002024:	2302      	movs	r3, #2
 8002026:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002028:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800202a:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800202c:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800202e:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002030:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002032:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8002034:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002036:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8002038:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800203a:	433b      	orrs	r3, r7
 800203c:	6967      	ldr	r7, [r4, #20]
 800203e:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002040:	69a7      	ldr	r7, [r4, #24]
 8002042:	433b      	orrs	r3, r7
 8002044:	69e7      	ldr	r7, [r4, #28]
 8002046:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8002048:	6a27      	ldr	r7, [r4, #32]
 800204a:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 800204c:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800204e:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	01db      	lsls	r3, r3, #7
 8002054:	4299      	cmp	r1, r3
 8002056:	d00c      	beq.n	8002072 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002058:	251c      	movs	r5, #28
 800205a:	4028      	ands	r0, r5
 800205c:	3d0d      	subs	r5, #13
 800205e:	4085      	lsls	r5, r0
 8002060:	490a      	ldr	r1, [pc, #40]	; (800208c <HAL_DMA_Init+0x84>)
 8002062:	680b      	ldr	r3, [r1, #0]
 8002064:	43ab      	bics	r3, r5
 8002066:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002068:	6863      	ldr	r3, [r4, #4]
 800206a:	680d      	ldr	r5, [r1, #0]
 800206c:	4083      	lsls	r3, r0
 800206e:	432b      	orrs	r3, r5
 8002070:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002072:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002074:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002076:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002078:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800207a:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 800207c:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800207e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002080:	bffdfff8 	.word	0xbffdfff8
 8002084:	40020000 	.word	0x40020000
 8002088:	ffff800f 	.word	0xffff800f
 800208c:	400200a8 	.word	0x400200a8

08002090 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002090:	b570      	push	{r4, r5, r6, lr}
 8002092:	2501      	movs	r5, #1
 8002094:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 8002096:	0028      	movs	r0, r5
  if (NULL == hdma )
 8002098:	2c00      	cmp	r4, #0
 800209a:	d021      	beq.n	80020e0 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800209c:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800209e:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 80020a0:	6833      	ldr	r3, [r6, #0]
 80020a2:	43ab      	bics	r3, r5
 80020a4:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020a6:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <HAL_DMA_DeInit+0x54>)
 80020a8:	18f0      	adds	r0, r6, r3
 80020aa:	f7fe f837 	bl	800011c <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80020ae:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020b0:	0083      	lsls	r3, r0, #2
 80020b2:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80020b4:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 80020b6:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80020b8:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020ba:	390d      	subs	r1, #13
 80020bc:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80020c0:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 80020c2:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 80020c4:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80020c6:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80020c8:	4d08      	ldr	r5, [pc, #32]	; (80020ec <HAL_DMA_DeInit+0x5c>)
 80020ca:	682a      	ldr	r2, [r5, #0]
 80020cc:	438a      	bics	r2, r1
 80020ce:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 80020d0:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80020d2:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80020d4:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80020d6:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d8:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80020da:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 80020dc:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 80020de:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	bffdfff8 	.word	0xbffdfff8
 80020e8:	40020000 	.word	0x40020000
 80020ec:	400200a8 	.word	0x400200a8

080020f0 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020f2:	1d44      	adds	r4, r0, #5
 80020f4:	7fe6      	ldrb	r6, [r4, #31]
{
 80020f6:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 80020f8:	2002      	movs	r0, #2
 80020fa:	2e01      	cmp	r6, #1
 80020fc:	d023      	beq.n	8002146 <HAL_DMA_Start+0x56>
 80020fe:	3801      	subs	r0, #1
 8002100:	77e0      	strb	r0, [r4, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002102:	1da8      	adds	r0, r5, #6
 8002104:	7fc6      	ldrb	r6, [r0, #31]
 8002106:	4684      	mov	ip, r0
 8002108:	b2f6      	uxtb	r6, r6
 800210a:	2002      	movs	r0, #2
 800210c:	2700      	movs	r7, #0
 800210e:	2e01      	cmp	r6, #1
 8002110:	d11d      	bne.n	800214e <HAL_DMA_Start+0x5e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002112:	4664      	mov	r4, ip
 8002114:	77e0      	strb	r0, [r4, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002116:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002118:	63ef      	str	r7, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800211a:	6820      	ldr	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800211c:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 800211e:	43b0      	bics	r0, r6
 8002120:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002122:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8002124:	9001      	str	r0, [sp, #4]
 8002126:	6c68      	ldr	r0, [r5, #68]	; 0x44
 8002128:	4007      	ands	r7, r0
 800212a:	40be      	lsls	r6, r7
 800212c:	9801      	ldr	r0, [sp, #4]
 800212e:	6046      	str	r6, [r0, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002130:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002132:	68ab      	ldr	r3, [r5, #8]
 8002134:	2b10      	cmp	r3, #16
 8002136:	d107      	bne.n	8002148 <HAL_DMA_Start+0x58>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002138:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800213a:	60e1      	str	r1, [r4, #12]
    __HAL_DMA_ENABLE(hdma);
 800213c:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800213e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002140:	6822      	ldr	r2, [r4, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	6023      	str	r3, [r4, #0]
}
 8002146:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002148:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800214a:	60e2      	str	r2, [r4, #12]
 800214c:	e7f6      	b.n	800213c <HAL_DMA_Start+0x4c>
    __HAL_UNLOCK(hdma);
 800214e:	77e7      	strb	r7, [r4, #31]
 8002150:	e7f9      	b.n	8002146 <HAL_DMA_Start+0x56>

08002152 <HAL_DMA_IRQHandler>:
{
 8002152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002154:	221c      	movs	r2, #28
 8002156:	2704      	movs	r7, #4
 8002158:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800215a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800215c:	4032      	ands	r2, r6
 800215e:	003e      	movs	r6, r7
 8002160:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002162:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002164:	6803      	ldr	r3, [r0, #0]
 8002166:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002168:	4235      	tst	r5, r6
 800216a:	d00d      	beq.n	8002188 <HAL_DMA_IRQHandler+0x36>
 800216c:	423c      	tst	r4, r7
 800216e:	d00b      	beq.n	8002188 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	0692      	lsls	r2, r2, #26
 8002174:	d402      	bmi.n	800217c <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	43ba      	bics	r2, r7
 800217a:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 800217c:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800217e:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8002180:	2b00      	cmp	r3, #0
 8002182:	d019      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8002184:	4798      	blx	r3
  return;
 8002186:	e017      	b.n	80021b8 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002188:	2702      	movs	r7, #2
 800218a:	003e      	movs	r6, r7
 800218c:	4096      	lsls	r6, r2
 800218e:	4235      	tst	r5, r6
 8002190:	d013      	beq.n	80021ba <HAL_DMA_IRQHandler+0x68>
 8002192:	423c      	tst	r4, r7
 8002194:	d011      	beq.n	80021ba <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	0692      	lsls	r2, r2, #26
 800219a:	d406      	bmi.n	80021aa <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800219c:	240a      	movs	r4, #10
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	43a2      	bics	r2, r4
 80021a2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80021a4:	2201      	movs	r2, #1
 80021a6:	1d83      	adds	r3, r0, #6
 80021a8:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 80021aa:	2200      	movs	r2, #0
 80021ac:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80021ae:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 80021b0:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 80021b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d1e5      	bne.n	8002184 <HAL_DMA_IRQHandler+0x32>
}
 80021b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80021ba:	2608      	movs	r6, #8
 80021bc:	0037      	movs	r7, r6
 80021be:	4097      	lsls	r7, r2
 80021c0:	423d      	tst	r5, r7
 80021c2:	d0f9      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x66>
 80021c4:	4234      	tst	r4, r6
 80021c6:	d0f7      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c8:	250e      	movs	r5, #14
 80021ca:	681c      	ldr	r4, [r3, #0]
 80021cc:	43ac      	bics	r4, r5
 80021ce:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021d0:	2301      	movs	r3, #1
 80021d2:	001c      	movs	r4, r3
 80021d4:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 80021d6:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80021d8:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80021da:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80021dc:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80021de:	2200      	movs	r2, #0
 80021e0:	1d43      	adds	r3, r0, #5
 80021e2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80021e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80021e6:	e7e5      	b.n	80021b4 <HAL_DMA_IRQHandler+0x62>

080021e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80021ea:	4a4f      	ldr	r2, [pc, #316]	; (8002328 <HAL_GPIO_Init+0x140>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80021ec:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80021ee:	1882      	adds	r2, r0, r2
 80021f0:	1e54      	subs	r4, r2, #1
 80021f2:	41a2      	sbcs	r2, r4
{
 80021f4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 80021f6:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 80021f8:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80021fa:	3205      	adds	r2, #5
 80021fc:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80021fe:	9a03      	ldr	r2, [sp, #12]
 8002200:	40da      	lsrs	r2, r3
 8002202:	d101      	bne.n	8002208 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8002204:	b007      	add	sp, #28
 8002206:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002208:	2501      	movs	r5, #1
 800220a:	409d      	lsls	r5, r3
 800220c:	9a03      	ldr	r2, [sp, #12]
 800220e:	402a      	ands	r2, r5
 8002210:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 8002212:	d100      	bne.n	8002216 <HAL_GPIO_Init+0x2e>
 8002214:	e086      	b.n	8002324 <HAL_GPIO_Init+0x13c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002216:	684a      	ldr	r2, [r1, #4]
 8002218:	9201      	str	r2, [sp, #4]
 800221a:	2210      	movs	r2, #16
 800221c:	9e01      	ldr	r6, [sp, #4]
 800221e:	4396      	bics	r6, r2
 8002220:	2e02      	cmp	r6, #2
 8002222:	d10f      	bne.n	8002244 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8002224:	08da      	lsrs	r2, r3, #3
 8002226:	0092      	lsls	r2, r2, #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002228:	2407      	movs	r4, #7
 800222a:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 800222c:	6a17      	ldr	r7, [r2, #32]
 800222e:	9204      	str	r2, [sp, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002230:	220f      	movs	r2, #15
 8002232:	401c      	ands	r4, r3
 8002234:	00a4      	lsls	r4, r4, #2
 8002236:	40a2      	lsls	r2, r4
 8002238:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800223a:	690a      	ldr	r2, [r1, #16]
 800223c:	40a2      	lsls	r2, r4
 800223e:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 8002240:	9a04      	ldr	r2, [sp, #16]
 8002242:	6217      	str	r7, [r2, #32]
 8002244:	2203      	movs	r2, #3
 8002246:	005f      	lsls	r7, r3, #1
 8002248:	40ba      	lsls	r2, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800224a:	3e01      	subs	r6, #1
 800224c:	43d2      	mvns	r2, r2
 800224e:	2e01      	cmp	r6, #1
 8002250:	d80e      	bhi.n	8002270 <HAL_GPIO_Init+0x88>
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002252:	68cc      	ldr	r4, [r1, #12]
        temp = GPIOx->OSPEEDR;
 8002254:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002256:	40bc      	lsls	r4, r7
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002258:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800225c:	6084      	str	r4, [r0, #8]
        temp= GPIOx->OTYPER;
 800225e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002260:	43ac      	bics	r4, r5
 8002262:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002264:	9c01      	ldr	r4, [sp, #4]
 8002266:	06e4      	lsls	r4, r4, #27
 8002268:	0fe4      	lsrs	r4, r4, #31
 800226a:	409c      	lsls	r4, r3
 800226c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800226e:	6044      	str	r4, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002270:	2403      	movs	r4, #3
 8002272:	9d01      	ldr	r5, [sp, #4]
      temp = GPIOx->MODER;
 8002274:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002276:	4025      	ands	r5, r4
 8002278:	40bd      	lsls	r5, r7
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800227a:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800227c:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 800227e:	6005      	str	r5, [r0, #0]
      temp = GPIOx->PUPDR;
 8002280:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002282:	402a      	ands	r2, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8002284:	688d      	ldr	r5, [r1, #8]
 8002286:	40bd      	lsls	r5, r7
 8002288:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 800228a:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800228c:	9a01      	ldr	r2, [sp, #4]
 800228e:	00d2      	lsls	r2, r2, #3
 8002290:	d548      	bpl.n	8002324 <HAL_GPIO_Init+0x13c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002292:	2701      	movs	r7, #1
 8002294:	4d25      	ldr	r5, [pc, #148]	; (800232c <HAL_GPIO_Init+0x144>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002296:	401c      	ands	r4, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002298:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800229a:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229c:	433a      	orrs	r2, r7
 800229e:	636a      	str	r2, [r5, #52]	; 0x34
 80022a0:	4a23      	ldr	r2, [pc, #140]	; (8002330 <HAL_GPIO_Init+0x148>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80022a2:	089d      	lsrs	r5, r3, #2
 80022a4:	00ad      	lsls	r5, r5, #2
 80022a6:	18ad      	adds	r5, r5, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80022a8:	220f      	movs	r2, #15
 80022aa:	40a2      	lsls	r2, r4
        temp = SYSCFG->EXTICR[position >> 2U];
 80022ac:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80022ae:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80022b0:	22a0      	movs	r2, #160	; 0xa0
 80022b2:	05d2      	lsls	r2, r2, #23
 80022b4:	4694      	mov	ip, r2
 80022b6:	2200      	movs	r2, #0
 80022b8:	4560      	cmp	r0, ip
 80022ba:	d009      	beq.n	80022d0 <HAL_GPIO_Init+0xe8>
 80022bc:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <HAL_GPIO_Init+0x14c>)
 80022be:	4694      	mov	ip, r2
 80022c0:	003a      	movs	r2, r7
 80022c2:	4560      	cmp	r0, ip
 80022c4:	d004      	beq.n	80022d0 <HAL_GPIO_Init+0xe8>
 80022c6:	4f1c      	ldr	r7, [pc, #112]	; (8002338 <HAL_GPIO_Init+0x150>)
 80022c8:	1892      	adds	r2, r2, r2
 80022ca:	42b8      	cmp	r0, r7
 80022cc:	d000      	beq.n	80022d0 <HAL_GPIO_Init+0xe8>
 80022ce:	9a05      	ldr	r2, [sp, #20]
 80022d0:	40a2      	lsls	r2, r4
 80022d2:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022d4:	60aa      	str	r2, [r5, #8]
        temp = EXTI->IMR;
 80022d6:	4a19      	ldr	r2, [pc, #100]	; (800233c <HAL_GPIO_Init+0x154>)
        temp &= ~((uint32_t)iocurrent);
 80022d8:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 80022da:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80022dc:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022de:	9f01      	ldr	r7, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 80022e0:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80022e2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022e4:	03ff      	lsls	r7, r7, #15
 80022e6:	d401      	bmi.n	80022ec <HAL_GPIO_Init+0x104>
        temp &= ~((uint32_t)iocurrent);
 80022e8:	0035      	movs	r5, r6
 80022ea:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 80022ec:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80022ee:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80022f0:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f2:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80022f4:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022f6:	03bf      	lsls	r7, r7, #14
 80022f8:	d401      	bmi.n	80022fe <HAL_GPIO_Init+0x116>
        temp &= ~((uint32_t)iocurrent);
 80022fa:	0035      	movs	r5, r6
 80022fc:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 80022fe:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002300:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8002302:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002304:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8002306:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002308:	02ff      	lsls	r7, r7, #11
 800230a:	d401      	bmi.n	8002310 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 800230c:	0035      	movs	r5, r6
 800230e:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8002310:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002312:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8002314:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002316:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8002318:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800231a:	02bf      	lsls	r7, r7, #10
 800231c:	d401      	bmi.n	8002322 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 800231e:	4025      	ands	r5, r4
 8002320:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8002322:	60d6      	str	r6, [r2, #12]
    position++;
 8002324:	3301      	adds	r3, #1
 8002326:	e76a      	b.n	80021fe <HAL_GPIO_Init+0x16>
 8002328:	afffe400 	.word	0xafffe400
 800232c:	40021000 	.word	0x40021000
 8002330:	40010000 	.word	0x40010000
 8002334:	50000400 	.word	0x50000400
 8002338:	50000800 	.word	0x50000800
 800233c:	40010400 	.word	0x40010400

08002340 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{ 
 8002340:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002342:	4a31      	ldr	r2, [pc, #196]	; (8002408 <HAL_GPIO_DeInit+0xc8>)
{ 
 8002344:	b085      	sub	sp, #20
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002346:	1882      	adds	r2, r0, r2
{ 
 8002348:	9102      	str	r1, [sp, #8]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800234a:	1e51      	subs	r1, r2, #1
 800234c:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 800234e:	2300      	movs	r3, #0
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002350:	3205      	adds	r2, #5
 8002352:	9203      	str	r2, [sp, #12]
  while ((GPIO_Pin >> position) != 0)
 8002354:	9a02      	ldr	r2, [sp, #8]
 8002356:	40da      	lsrs	r2, r3
 8002358:	d101      	bne.n	800235e <HAL_GPIO_DeInit+0x1e>
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
     position++;
  }
}
 800235a:	b005      	add	sp, #20
 800235c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 800235e:	2201      	movs	r2, #1
 8002360:	409a      	lsls	r2, r3
 8002362:	4694      	mov	ip, r2
 8002364:	4661      	mov	r1, ip
 8002366:	9a02      	ldr	r2, [sp, #8]
 8002368:	400a      	ands	r2, r1
 800236a:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 800236c:	d049      	beq.n	8002402 <HAL_GPIO_DeInit+0xc2>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800236e:	2503      	movs	r5, #3
 8002370:	005c      	lsls	r4, r3, #1
 8002372:	40a5      	lsls	r5, r4
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002374:	240f      	movs	r4, #15
 8002376:	2607      	movs	r6, #7
 8002378:	0022      	movs	r2, r4
 800237a:	401e      	ands	r6, r3
 800237c:	00b6      	lsls	r6, r6, #2
 800237e:	40b2      	lsls	r2, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002380:	6801      	ldr	r1, [r0, #0]
 8002382:	4329      	orrs	r1, r5
 8002384:	6001      	str	r1, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002386:	08d9      	lsrs	r1, r3, #3
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002388:	43ed      	mvns	r5, r5
 800238a:	0089      	lsls	r1, r1, #2
 800238c:	1841      	adds	r1, r0, r1
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800238e:	6a0f      	ldr	r7, [r1, #32]
 8002390:	4397      	bics	r7, r2
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002392:	4662      	mov	r2, ip
      GPIOx->AFR[position >> 3U] &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002394:	620f      	str	r7, [r1, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002396:	6881      	ldr	r1, [r0, #8]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002398:	27a0      	movs	r7, #160	; 0xa0
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800239a:	4029      	ands	r1, r5
 800239c:	6081      	str	r1, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800239e:	6841      	ldr	r1, [r0, #4]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80023a0:	05ff      	lsls	r7, r7, #23
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a2:	4391      	bics	r1, r2
 80023a4:	6041      	str	r1, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023a6:	68c1      	ldr	r1, [r0, #12]
 80023a8:	4a18      	ldr	r2, [pc, #96]	; (800240c <HAL_GPIO_DeInit+0xcc>)
 80023aa:	400d      	ands	r5, r1
      tmp = SYSCFG->EXTICR[position >> 2U];
 80023ac:	0899      	lsrs	r1, r3, #2
 80023ae:	0089      	lsls	r1, r1, #2
 80023b0:	1889      	adds	r1, r1, r2
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80023b2:	2203      	movs	r2, #3
 80023b4:	401a      	ands	r2, r3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4094      	lsls	r4, r2
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023ba:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2U];
 80023bc:	688e      	ldr	r6, [r1, #8]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80023be:	2500      	movs	r5, #0
      tmp &= (((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80023c0:	4026      	ands	r6, r4
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80023c2:	42b8      	cmp	r0, r7
 80023c4:	d008      	beq.n	80023d8 <HAL_GPIO_DeInit+0x98>
 80023c6:	4f12      	ldr	r7, [pc, #72]	; (8002410 <HAL_GPIO_DeInit+0xd0>)
 80023c8:	3501      	adds	r5, #1
 80023ca:	42b8      	cmp	r0, r7
 80023cc:	d004      	beq.n	80023d8 <HAL_GPIO_DeInit+0x98>
 80023ce:	4f11      	ldr	r7, [pc, #68]	; (8002414 <HAL_GPIO_DeInit+0xd4>)
 80023d0:	3501      	adds	r5, #1
 80023d2:	42b8      	cmp	r0, r7
 80023d4:	d000      	beq.n	80023d8 <HAL_GPIO_DeInit+0x98>
 80023d6:	9d03      	ldr	r5, [sp, #12]
 80023d8:	4095      	lsls	r5, r2
 80023da:	42b5      	cmp	r5, r6
 80023dc:	d111      	bne.n	8002402 <HAL_GPIO_DeInit+0xc2>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80023de:	688a      	ldr	r2, [r1, #8]
 80023e0:	43a2      	bics	r2, r4
 80023e2:	608a      	str	r2, [r1, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80023e4:	9901      	ldr	r1, [sp, #4]
 80023e6:	4a0c      	ldr	r2, [pc, #48]	; (8002418 <HAL_GPIO_DeInit+0xd8>)
 80023e8:	43c9      	mvns	r1, r1
 80023ea:	6814      	ldr	r4, [r2, #0]
 80023ec:	400c      	ands	r4, r1
 80023ee:	6014      	str	r4, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80023f0:	6854      	ldr	r4, [r2, #4]
 80023f2:	400c      	ands	r4, r1
 80023f4:	6054      	str	r4, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80023f6:	6894      	ldr	r4, [r2, #8]
 80023f8:	400c      	ands	r4, r1
 80023fa:	6094      	str	r4, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80023fc:	68d4      	ldr	r4, [r2, #12]
 80023fe:	4021      	ands	r1, r4
 8002400:	60d1      	str	r1, [r2, #12]
     position++;
 8002402:	3301      	adds	r3, #1
 8002404:	e7a6      	b.n	8002354 <HAL_GPIO_DeInit+0x14>
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	afffe400 	.word	0xafffe400
 800240c:	40010000 	.word	0x40010000
 8002410:	50000400 	.word	0x50000400
 8002414:	50000800 	.word	0x50000800
 8002418:	40010400 	.word	0x40010400

0800241c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800241c:	2a00      	cmp	r2, #0
 800241e:	d001      	beq.n	8002424 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002420:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002422:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8002424:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002426:	e7fc      	b.n	8002422 <HAL_GPIO_WritePin+0x6>

08002428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 800242c:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800242e:	2c00      	cmp	r4, #0
 8002430:	d03f      	beq.n	80024b2 <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002432:	0025      	movs	r5, r4
 8002434:	3541      	adds	r5, #65	; 0x41
 8002436:	782b      	ldrb	r3, [r5, #0]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d105      	bne.n	800244a <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800243e:	0022      	movs	r2, r4
 8002440:	3240      	adds	r2, #64	; 0x40
 8002442:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002444:	0020      	movs	r0, r4
 8002446:	f002 fba1 	bl	8004b8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800244a:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800244c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800244e:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002450:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002452:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68a6      	ldr	r6, [r4, #8]
 8002458:	438a      	bics	r2, r1
 800245a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800245c:	6861      	ldr	r1, [r4, #4]
 800245e:	4a1a      	ldr	r2, [pc, #104]	; (80024c8 <HAL_I2C_Init+0xa0>)
 8002460:	400a      	ands	r2, r1
 8002462:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002464:	6899      	ldr	r1, [r3, #8]
 8002466:	4a19      	ldr	r2, [pc, #100]	; (80024cc <HAL_I2C_Init+0xa4>)
 8002468:	4011      	ands	r1, r2
 800246a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800246c:	2801      	cmp	r0, #1
 800246e:	d121      	bne.n	80024b4 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	0209      	lsls	r1, r1, #8
 8002474:	4331      	orrs	r1, r6
 8002476:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002478:	6858      	ldr	r0, [r3, #4]
 800247a:	4915      	ldr	r1, [pc, #84]	; (80024d0 <HAL_I2C_Init+0xa8>)
 800247c:	4301      	orrs	r1, r0
 800247e:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002480:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002482:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002484:	400a      	ands	r2, r1
 8002486:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002488:	6961      	ldr	r1, [r4, #20]
 800248a:	6922      	ldr	r2, [r4, #16]
 800248c:	430a      	orrs	r2, r1
 800248e:	69a1      	ldr	r1, [r4, #24]
 8002490:	0209      	lsls	r1, r1, #8
 8002492:	430a      	orrs	r2, r1
 8002494:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002496:	6a21      	ldr	r1, [r4, #32]
 8002498:	69e2      	ldr	r2, [r4, #28]
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800249e:	2201      	movs	r2, #1
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80024a6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ac:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ae:	3442      	adds	r4, #66	; 0x42
 80024b0:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80024b2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024b4:	2184      	movs	r1, #132	; 0x84
 80024b6:	0209      	lsls	r1, r1, #8
 80024b8:	4331      	orrs	r1, r6
 80024ba:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024bc:	2802      	cmp	r0, #2
 80024be:	d1db      	bne.n	8002478 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0109      	lsls	r1, r1, #4
 80024c4:	6059      	str	r1, [r3, #4]
 80024c6:	e7d7      	b.n	8002478 <HAL_I2C_Init+0x50>
 80024c8:	f0ffffff 	.word	0xf0ffffff
 80024cc:	ffff7fff 	.word	0xffff7fff
 80024d0:	02008000 	.word	0x02008000

080024d4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80024da:	2c00      	cmp	r4, #0
 80024dc:	d013      	beq.n	8002506 <HAL_I2C_DeInit+0x32>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024de:	0025      	movs	r5, r4
 80024e0:	2324      	movs	r3, #36	; 0x24

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80024e2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	3541      	adds	r5, #65	; 0x41
 80024e6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80024e8:	6813      	ldr	r3, [r2, #0]
 80024ea:	4383      	bics	r3, r0
 80024ec:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80024ee:	0020      	movs	r0, r4
 80024f0:	f002 fb7c 	bl	8004bec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f4:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_RESET;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f6:	0023      	movs	r3, r4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fa:	3342      	adds	r3, #66	; 0x42
  hi2c->State = HAL_I2C_STATE_RESET;
 80024fc:	7028      	strb	r0, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80024fe:	6320      	str	r0, [r4, #48]	; 0x30

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002500:	3440      	adds	r4, #64	; 0x40
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002502:	7018      	strb	r0, [r3, #0]
  __HAL_UNLOCK(hi2c);
 8002504:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8002506:	bd70      	pop	{r4, r5, r6, pc}

08002508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002508:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250a:	0004      	movs	r4, r0
 800250c:	3441      	adds	r4, #65	; 0x41
 800250e:	7822      	ldrb	r2, [r4, #0]
{
 8002510:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002512:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002514:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002516:	2a20      	cmp	r2, #32
 8002518:	d118      	bne.n	800254c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 800251a:	001d      	movs	r5, r3
 800251c:	3540      	adds	r5, #64	; 0x40
 800251e:	782e      	ldrb	r6, [r5, #0]
 8002520:	2e01      	cmp	r6, #1
 8002522:	d013      	beq.n	800254c <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8002524:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002526:	3022      	adds	r0, #34	; 0x22
 8002528:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800252a:	681e      	ldr	r6, [r3, #0]
 800252c:	3823      	subs	r0, #35	; 0x23
 800252e:	4386      	bics	r6, r0
 8002530:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002532:	681e      	ldr	r6, [r3, #0]
 8002534:	4f06      	ldr	r7, [pc, #24]	; (8002550 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8002536:	403e      	ands	r6, r7
 8002538:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800253a:	681e      	ldr	r6, [r3, #0]
 800253c:	4331      	orrs	r1, r6
 800253e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	4308      	orrs	r0, r1
 8002544:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002546:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002548:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800254a:	7028      	strb	r0, [r5, #0]
  }
}
 800254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	ffffefff 	.word	0xffffefff

08002554 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002554:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002556:	0005      	movs	r5, r0
 8002558:	3541      	adds	r5, #65	; 0x41
 800255a:	782a      	ldrb	r2, [r5, #0]
{
 800255c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800255e:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002560:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002562:	2a20      	cmp	r2, #32
 8002564:	d117      	bne.n	8002596 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002566:	001c      	movs	r4, r3
 8002568:	3440      	adds	r4, #64	; 0x40
 800256a:	7826      	ldrb	r6, [r4, #0]
 800256c:	2e01      	cmp	r6, #1
 800256e:	d012      	beq.n	8002596 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8002570:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002572:	3022      	adds	r0, #34	; 0x22
 8002574:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002576:	681e      	ldr	r6, [r3, #0]
 8002578:	3823      	subs	r0, #35	; 0x23
 800257a:	4386      	bics	r6, r0
 800257c:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800257e:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002580:	4f05      	ldr	r7, [pc, #20]	; (8002598 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8002582:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002584:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002586:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002588:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	4308      	orrs	r0, r1
 800258e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002590:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002592:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8002594:	7020      	strb	r0, [r4, #0]
  }
}
 8002596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002598:	fffff0ff 	.word	0xfffff0ff

0800259c <HAL_RCC_DeInit>:
  *            - LSI, LSE and RTC clocks
  *            - HSI48 clock
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800259c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t vl_mask;
  HAL_StatusTypeDef status;

  /* Set MSIClockRange, HSITRIM and MSITRIM bits to the reset values */
  MODIFY_REG(RCC->ICSCR, (RCC_ICSCR_MSITRIM | RCC_ICSCR_HSITRIM | RCC_ICSCR_MSIRANGE), \
 800259e:	4c2d      	ldr	r4, [pc, #180]	; (8002654 <HAL_RCC_DeInit+0xb8>)
 80025a0:	4a2d      	ldr	r2, [pc, #180]	; (8002658 <HAL_RCC_DeInit+0xbc>)
 80025a2:	6863      	ldr	r3, [r4, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till MSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025a4:	2680      	movs	r6, #128	; 0x80
  MODIFY_REG(RCC->ICSCR, (RCC_ICSCR_MSITRIM | RCC_ICSCR_HSITRIM | RCC_ICSCR_MSIRANGE), \
 80025a6:	401a      	ands	r2, r3
 80025a8:	23b0      	movs	r3, #176	; 0xb0
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	4313      	orrs	r3, r2
 80025ae:	6063      	str	r3, [r4, #4]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	6822      	ldr	r2, [r4, #0]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4313      	orrs	r3, r2
 80025b8:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80025ba:	f7ff f977 	bl	80018ac <HAL_GetTick>
 80025be:	0005      	movs	r5, r0
  while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c0:	00b6      	lsls	r6, r6, #2
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	4233      	tst	r3, r6
 80025c6:	d02f      	beq.n	8002628 <HAL_RCC_DeInit+0x8c>
      return HAL_TIMEOUT;
    }
  }

  /* Switch SYSCLK to MSI*/
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025c8:	2203      	movs	r2, #3

  /* Wait till MSI as SYSCLK status is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80025ca:	260c      	movs	r6, #12
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025cc:	68e3      	ldr	r3, [r4, #12]
 80025ce:	4393      	bics	r3, r2
 80025d0:	60e3      	str	r3, [r4, #12]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80025d2:	68e0      	ldr	r0, [r4, #12]
 80025d4:	4030      	ands	r0, r6
 80025d6:	d12f      	bne.n	8002638 <HAL_RCC_DeInit+0x9c>
      return HAL_TIMEOUT;
    }
  }

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_RCC_DeInit+0xc0>)
 80025da:	4a21      	ldr	r2, [pc, #132]	; (8002660 <HAL_RCC_DeInit+0xc4>)
 80025dc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80025de:	f7ff f931 	bl	8001844 <HAL_InitTick>
 80025e2:	1e05      	subs	r5, r0, #0
  if(status != HAL_OK)
 80025e4:	d126      	bne.n	8002634 <HAL_RCC_DeInit+0x98>
    return status;
  }

  /* Reset HSE, HSI, CSS, PLL */
#if defined(RCC_CR_CSSHSEON) && defined(RCC_CR_HSIOUTEN)
  CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | RCC_CR_HSIOUTEN | \
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <HAL_RCC_DeInit+0xc8>)

  /* Get Start Tick*/
  tickstart = HAL_GetTick();

  /* Wait till PLL is not ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ea:	2680      	movs	r6, #128	; 0x80
  CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | RCC_CR_HSIOUTEN | \
 80025ec:	4013      	ands	r3, r2
  tmpreg = READ_BIT(RCC->CR, RCC_CR_HSEON);      \
 80025ee:	2280      	movs	r2, #128	; 0x80
  CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | RCC_CR_HSIOUTEN | \
 80025f0:	6023      	str	r3, [r4, #0]
  tmpreg = READ_BIT(RCC->CR, RCC_CR_HSEON);      \
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	0252      	lsls	r2, r2, #9
 80025f6:	4013      	ands	r3, r2
 80025f8:	9301      	str	r3, [sp, #4]
  UNUSED(tmpreg);
 80025fa:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80025fc:	4a1a      	ldr	r2, [pc, #104]	; (8002668 <HAL_RCC_DeInit+0xcc>)
 80025fe:	6823      	ldr	r3, [r4, #0]
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002600:	04b6      	lsls	r6, r6, #18
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002602:	4013      	ands	r3, r2
 8002604:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002606:	f7ff f951 	bl	80018ac <HAL_GetTick>
 800260a:	0007      	movs	r7, r0
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	4033      	ands	r3, r6
 8002610:	d119      	bne.n	8002646 <HAL_RCC_DeInit+0xaa>
      return HAL_TIMEOUT;
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002612:	60e3      	str	r3, [r4, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002614:	6123      	str	r3, [r4, #16]
  vl_mask |= RCC_CICR_HSI48RDYC;
#endif
#if defined(RCC_HSECSS_SUPPORT)
  vl_mask |= RCC_CICR_CSSHSEC;
#endif
  WRITE_REG(RCC->CICR, vl_mask);
 8002616:	23c0      	movs	r3, #192	; 0xc0
 8002618:	33ff      	adds	r3, #255	; 0xff
 800261a:	61a3      	str	r3, [r4, #24]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002620:	041b      	lsls	r3, r3, #16
 8002622:	4313      	orrs	r3, r2
 8002624:	6523      	str	r3, [r4, #80]	; 0x50

  return HAL_OK;
 8002626:	e005      	b.n	8002634 <HAL_RCC_DeInit+0x98>
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002628:	f7ff f940 	bl	80018ac <HAL_GetTick>
 800262c:	1b40      	subs	r0, r0, r5
 800262e:	2802      	cmp	r0, #2
 8002630:	d9c7      	bls.n	80025c2 <HAL_RCC_DeInit+0x26>
      return HAL_TIMEOUT;
 8002632:	2503      	movs	r5, #3
}
 8002634:	0028      	movs	r0, r5
 8002636:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7ff f938 	bl	80018ac <HAL_GetTick>
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_DeInit+0xd0>)
 800263e:	1b40      	subs	r0, r0, r5
 8002640:	4298      	cmp	r0, r3
 8002642:	d9c6      	bls.n	80025d2 <HAL_RCC_DeInit+0x36>
 8002644:	e7f5      	b.n	8002632 <HAL_RCC_DeInit+0x96>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002646:	f7ff f931 	bl	80018ac <HAL_GetTick>
 800264a:	1bc0      	subs	r0, r0, r7
 800264c:	2802      	cmp	r0, #2
 800264e:	d9dd      	bls.n	800260c <HAL_RCC_DeInit+0x70>
 8002650:	e7ef      	b.n	8002632 <HAL_RCC_DeInit+0x96>
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	40021000 	.word	0x40021000
 8002658:	00ff00ff 	.word	0x00ff00ff
 800265c:	20000020 	.word	0x20000020
 8002660:	001fff68 	.word	0x001fff68
 8002664:	fef6ffd4 	.word	0xfef6ffd4
 8002668:	fffbffff 	.word	0xfffbffff
 800266c:	00001388 	.word	0x00001388

08002670 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002670:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002674:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8002676:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002678:	400a      	ands	r2, r1
 800267a:	2a08      	cmp	r2, #8
 800267c:	d029      	beq.n	80026d2 <HAL_RCC_GetSysClockFreq+0x62>
 800267e:	2a0c      	cmp	r2, #12
 8002680:	d009      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0x26>
 8002682:	2a04      	cmp	r2, #4
 8002684:	d11d      	bne.n	80026c2 <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002686:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800268a:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 800268c:	17c0      	asrs	r0, r0, #31
 800268e:	4018      	ands	r0, r3
 8002690:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x70>)
 8002692:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8002694:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002696:	028a      	lsls	r2, r1, #10
 8002698:	4812      	ldr	r0, [pc, #72]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x74>)
 800269a:	0f12      	lsrs	r2, r2, #28
 800269c:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800269e:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a0:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80026a2:	0f89      	lsrs	r1, r1, #30
 80026a4:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a6:	03c0      	lsls	r0, r0, #15
 80026a8:	d504      	bpl.n	80026b4 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 80026aa:	480f      	ldr	r0, [pc, #60]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 80026ac:	4350      	muls	r0, r2
 80026ae:	f7fd fd35 	bl	800011c <__udivsi3>
 80026b2:	e7ef      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	06db      	lsls	r3, r3, #27
 80026b8:	d501      	bpl.n	80026be <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80026ba:	480c      	ldr	r0, [pc, #48]	; (80026ec <HAL_RCC_GetSysClockFreq+0x7c>)
 80026bc:	e7f6      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 80026be:	4808      	ldr	r0, [pc, #32]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x70>)
 80026c0:	e7f4      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026c2:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80026c4:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026c6:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80026c8:	041b      	lsls	r3, r3, #16
 80026ca:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80026cc:	3301      	adds	r3, #1
 80026ce:	4098      	lsls	r0, r3
 80026d0:	e7e0      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x24>
      sysclockfreq = HSE_VALUE;
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x78>)
 80026d4:	e7de      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x24>
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	40021000 	.word	0x40021000
 80026dc:	ff48e500 	.word	0xff48e500
 80026e0:	00f42400 	.word	0x00f42400
 80026e4:	08005eb2 	.word	0x08005eb2
 80026e8:	007a1200 	.word	0x007a1200
 80026ec:	003d0900 	.word	0x003d0900

080026f0 <HAL_RCC_OscConfig>:
{
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	0005      	movs	r5, r0
 80026f4:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 80026f6:	2800      	cmp	r0, #0
 80026f8:	d102      	bne.n	8002700 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80026fa:	2001      	movs	r0, #1
}
 80026fc:	b007      	add	sp, #28
 80026fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002700:	230c      	movs	r3, #12
 8002702:	4cc0      	ldr	r4, [pc, #768]	; (8002a04 <HAL_RCC_OscConfig+0x314>)
 8002704:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002706:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002708:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	025b      	lsls	r3, r3, #9
 800270e:	401a      	ands	r2, r3
 8002710:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002712:	6802      	ldr	r2, [r0, #0]
 8002714:	07d2      	lsls	r2, r2, #31
 8002716:	d43d      	bmi.n	8002794 <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002718:	682b      	ldr	r3, [r5, #0]
 800271a:	079b      	lsls	r3, r3, #30
 800271c:	d500      	bpl.n	8002720 <HAL_RCC_OscConfig+0x30>
 800271e:	e083      	b.n	8002828 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002720:	682b      	ldr	r3, [r5, #0]
 8002722:	06db      	lsls	r3, r3, #27
 8002724:	d528      	bpl.n	8002778 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002726:	2e00      	cmp	r6, #0
 8002728:	d000      	beq.n	800272c <HAL_RCC_OscConfig+0x3c>
 800272a:	e0dd      	b.n	80028e8 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	059b      	lsls	r3, r3, #22
 8002730:	d502      	bpl.n	8002738 <HAL_RCC_OscConfig+0x48>
 8002732:	69ab      	ldr	r3, [r5, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0e0      	beq.n	80026fa <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002738:	6862      	ldr	r2, [r4, #4]
 800273a:	49b3      	ldr	r1, [pc, #716]	; (8002a08 <HAL_RCC_OscConfig+0x318>)
 800273c:	6a2b      	ldr	r3, [r5, #32]
 800273e:	400a      	ands	r2, r1
 8002740:	431a      	orrs	r2, r3
 8002742:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002744:	6861      	ldr	r1, [r4, #4]
 8002746:	69ea      	ldr	r2, [r5, #28]
 8002748:	0209      	lsls	r1, r1, #8
 800274a:	0a09      	lsrs	r1, r1, #8
 800274c:	0612      	lsls	r2, r2, #24
 800274e:	430a      	orrs	r2, r1
 8002750:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002752:	2280      	movs	r2, #128	; 0x80
 8002754:	0b5b      	lsrs	r3, r3, #13
 8002756:	3301      	adds	r3, #1
 8002758:	0212      	lsls	r2, r2, #8
 800275a:	409a      	lsls	r2, r3
 800275c:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800275e:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002760:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002762:	060a      	lsls	r2, r1, #24
 8002764:	49a9      	ldr	r1, [pc, #676]	; (8002a0c <HAL_RCC_OscConfig+0x31c>)
 8002766:	0f12      	lsrs	r2, r2, #28
 8002768:	5c8a      	ldrb	r2, [r1, r2]
 800276a:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800276c:	4aa8      	ldr	r2, [pc, #672]	; (8002a10 <HAL_RCC_OscConfig+0x320>)
 800276e:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002770:	f7ff f868 	bl	8001844 <HAL_InitTick>
        if(status != HAL_OK)
 8002774:	2800      	cmp	r0, #0
 8002776:	d1c1      	bne.n	80026fc <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	071b      	lsls	r3, r3, #28
 800277c:	d500      	bpl.n	8002780 <HAL_RCC_OscConfig+0x90>
 800277e:	e0ea      	b.n	8002956 <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002780:	682b      	ldr	r3, [r5, #0]
 8002782:	075b      	lsls	r3, r3, #29
 8002784:	d500      	bpl.n	8002788 <HAL_RCC_OscConfig+0x98>
 8002786:	e10c      	b.n	80029a2 <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002788:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800278a:	2b00      	cmp	r3, #0
 800278c:	d000      	beq.n	8002790 <HAL_RCC_OscConfig+0xa0>
 800278e:	e191      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3c4>
  return HAL_OK;
 8002790:	2000      	movs	r0, #0
 8002792:	e7b3      	b.n	80026fc <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002794:	2e08      	cmp	r6, #8
 8002796:	d004      	beq.n	80027a2 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002798:	2e0c      	cmp	r6, #12
 800279a:	d109      	bne.n	80027b0 <HAL_RCC_OscConfig+0xc0>
 800279c:	9a01      	ldr	r2, [sp, #4]
 800279e:	2a00      	cmp	r2, #0
 80027a0:	d006      	beq.n	80027b0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	039b      	lsls	r3, r3, #14
 80027a6:	d5b7      	bpl.n	8002718 <HAL_RCC_OscConfig+0x28>
 80027a8:	686b      	ldr	r3, [r5, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1b4      	bne.n	8002718 <HAL_RCC_OscConfig+0x28>
 80027ae:	e7a4      	b.n	80026fa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b0:	686a      	ldr	r2, [r5, #4]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d111      	bne.n	80027da <HAL_RCC_OscConfig+0xea>
 80027b6:	6822      	ldr	r2, [r4, #0]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80027bc:	f7ff f876 	bl	80018ac <HAL_GetTick>
 80027c0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	0292      	lsls	r2, r2, #10
 80027c8:	4213      	tst	r3, r2
 80027ca:	d1a5      	bne.n	8002718 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027cc:	f7ff f86e 	bl	80018ac <HAL_GetTick>
 80027d0:	1bc0      	subs	r0, r0, r7
 80027d2:	2864      	cmp	r0, #100	; 0x64
 80027d4:	d9f5      	bls.n	80027c2 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 80027d6:	2003      	movs	r0, #3
 80027d8:	e790      	b.n	80026fc <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027da:	21a0      	movs	r1, #160	; 0xa0
 80027dc:	02c9      	lsls	r1, r1, #11
 80027de:	428a      	cmp	r2, r1
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0xfe>
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	6821      	ldr	r1, [r4, #0]
 80027e6:	02d2      	lsls	r2, r2, #11
 80027e8:	430a      	orrs	r2, r1
 80027ea:	6022      	str	r2, [r4, #0]
 80027ec:	e7e3      	b.n	80027b6 <HAL_RCC_OscConfig+0xc6>
 80027ee:	6821      	ldr	r1, [r4, #0]
 80027f0:	4888      	ldr	r0, [pc, #544]	; (8002a14 <HAL_RCC_OscConfig+0x324>)
 80027f2:	4001      	ands	r1, r0
 80027f4:	6021      	str	r1, [r4, #0]
 80027f6:	6821      	ldr	r1, [r4, #0]
 80027f8:	400b      	ands	r3, r1
 80027fa:	9305      	str	r3, [sp, #20]
 80027fc:	9b05      	ldr	r3, [sp, #20]
 80027fe:	4986      	ldr	r1, [pc, #536]	; (8002a18 <HAL_RCC_OscConfig+0x328>)
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	400b      	ands	r3, r1
 8002804:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002806:	2a00      	cmp	r2, #0
 8002808:	d1d8      	bne.n	80027bc <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 800280a:	f7ff f84f 	bl	80018ac <HAL_GetTick>
 800280e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	0292      	lsls	r2, r2, #10
 8002816:	4213      	tst	r3, r2
 8002818:	d100      	bne.n	800281c <HAL_RCC_OscConfig+0x12c>
 800281a:	e77d      	b.n	8002718 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800281c:	f7ff f846 	bl	80018ac <HAL_GetTick>
 8002820:	1bc0      	subs	r0, r0, r7
 8002822:	2864      	cmp	r0, #100	; 0x64
 8002824:	d9f4      	bls.n	8002810 <HAL_RCC_OscConfig+0x120>
 8002826:	e7d6      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002828:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800282a:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800282c:	4213      	tst	r3, r2
 800282e:	d003      	beq.n	8002838 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002830:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002832:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002834:	4311      	orrs	r1, r2
 8002836:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002838:	2e04      	cmp	r6, #4
 800283a:	d004      	beq.n	8002846 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800283c:	2e0c      	cmp	r6, #12
 800283e:	d125      	bne.n	800288c <HAL_RCC_OscConfig+0x19c>
 8002840:	9a01      	ldr	r2, [sp, #4]
 8002842:	2a00      	cmp	r2, #0
 8002844:	d122      	bne.n	800288c <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002846:	6822      	ldr	r2, [r4, #0]
 8002848:	0752      	lsls	r2, r2, #29
 800284a:	d502      	bpl.n	8002852 <HAL_RCC_OscConfig+0x162>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d100      	bne.n	8002852 <HAL_RCC_OscConfig+0x162>
 8002850:	e753      	b.n	80026fa <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	6861      	ldr	r1, [r4, #4]
 8002854:	692a      	ldr	r2, [r5, #16]
 8002856:	4871      	ldr	r0, [pc, #452]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002858:	0212      	lsls	r2, r2, #8
 800285a:	4001      	ands	r1, r0
 800285c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800285e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002862:	6822      	ldr	r2, [r4, #0]
 8002864:	438a      	bics	r2, r1
 8002866:	4313      	orrs	r3, r2
 8002868:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800286a:	f7ff ff01 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 800286e:	68e3      	ldr	r3, [r4, #12]
 8002870:	4a66      	ldr	r2, [pc, #408]	; (8002a0c <HAL_RCC_OscConfig+0x31c>)
 8002872:	061b      	lsls	r3, r3, #24
 8002874:	0f1b      	lsrs	r3, r3, #28
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	40d8      	lsrs	r0, r3
 800287a:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <HAL_RCC_OscConfig+0x320>)
 800287c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe ffe0 	bl	8001844 <HAL_InitTick>
      if(status != HAL_OK)
 8002884:	2800      	cmp	r0, #0
 8002886:	d100      	bne.n	800288a <HAL_RCC_OscConfig+0x19a>
 8002888:	e74a      	b.n	8002720 <HAL_RCC_OscConfig+0x30>
 800288a:	e737      	b.n	80026fc <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 800288c:	2b00      	cmp	r3, #0
 800288e:	d019      	beq.n	80028c4 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002890:	2109      	movs	r1, #9
 8002892:	6822      	ldr	r2, [r4, #0]
 8002894:	438a      	bics	r2, r1
 8002896:	4313      	orrs	r3, r2
 8002898:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800289a:	f7ff f807 	bl	80018ac <HAL_GetTick>
 800289e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028a0:	2204      	movs	r2, #4
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	4213      	tst	r3, r2
 80028a6:	d007      	beq.n	80028b8 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	6862      	ldr	r2, [r4, #4]
 80028aa:	692b      	ldr	r3, [r5, #16]
 80028ac:	495b      	ldr	r1, [pc, #364]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	400a      	ands	r2, r1
 80028b2:	4313      	orrs	r3, r2
 80028b4:	6063      	str	r3, [r4, #4]
 80028b6:	e733      	b.n	8002720 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b8:	f7fe fff8 	bl	80018ac <HAL_GetTick>
 80028bc:	1bc0      	subs	r0, r0, r7
 80028be:	2802      	cmp	r0, #2
 80028c0:	d9ee      	bls.n	80028a0 <HAL_RCC_OscConfig+0x1b0>
 80028c2:	e788      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 80028c4:	2201      	movs	r2, #1
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	4393      	bics	r3, r2
 80028ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028cc:	f7fe ffee 	bl	80018ac <HAL_GetTick>
 80028d0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028d2:	2204      	movs	r2, #4
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	4213      	tst	r3, r2
 80028d8:	d100      	bne.n	80028dc <HAL_RCC_OscConfig+0x1ec>
 80028da:	e721      	b.n	8002720 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028dc:	f7fe ffe6 	bl	80018ac <HAL_GetTick>
 80028e0:	1bc0      	subs	r0, r0, r7
 80028e2:	2802      	cmp	r0, #2
 80028e4:	d9f5      	bls.n	80028d2 <HAL_RCC_OscConfig+0x1e2>
 80028e6:	e776      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028e8:	69ab      	ldr	r3, [r5, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d020      	beq.n	8002930 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	6822      	ldr	r2, [r4, #0]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4313      	orrs	r3, r2
 80028f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028f8:	f7fe ffd8 	bl	80018ac <HAL_GetTick>
 80028fc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	0092      	lsls	r2, r2, #2
 8002904:	4213      	tst	r3, r2
 8002906:	d00d      	beq.n	8002924 <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002908:	6863      	ldr	r3, [r4, #4]
 800290a:	4a3f      	ldr	r2, [pc, #252]	; (8002a08 <HAL_RCC_OscConfig+0x318>)
 800290c:	4013      	ands	r3, r2
 800290e:	6a2a      	ldr	r2, [r5, #32]
 8002910:	4313      	orrs	r3, r2
 8002912:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002914:	6862      	ldr	r2, [r4, #4]
 8002916:	69eb      	ldr	r3, [r5, #28]
 8002918:	0212      	lsls	r2, r2, #8
 800291a:	061b      	lsls	r3, r3, #24
 800291c:	0a12      	lsrs	r2, r2, #8
 800291e:	4313      	orrs	r3, r2
 8002920:	6063      	str	r3, [r4, #4]
 8002922:	e729      	b.n	8002778 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002924:	f7fe ffc2 	bl	80018ac <HAL_GetTick>
 8002928:	1bc0      	subs	r0, r0, r7
 800292a:	2802      	cmp	r0, #2
 800292c:	d9e7      	bls.n	80028fe <HAL_RCC_OscConfig+0x20e>
 800292e:	e752      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_MSI_DISABLE();
 8002930:	6823      	ldr	r3, [r4, #0]
 8002932:	4a3b      	ldr	r2, [pc, #236]	; (8002a20 <HAL_RCC_OscConfig+0x330>)
 8002934:	4013      	ands	r3, r2
 8002936:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002938:	f7fe ffb8 	bl	80018ac <HAL_GetTick>
 800293c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800293e:	2280      	movs	r2, #128	; 0x80
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	4213      	tst	r3, r2
 8002946:	d100      	bne.n	800294a <HAL_RCC_OscConfig+0x25a>
 8002948:	e716      	b.n	8002778 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800294a:	f7fe ffaf 	bl	80018ac <HAL_GetTick>
 800294e:	1bc0      	subs	r0, r0, r7
 8002950:	2802      	cmp	r0, #2
 8002952:	d9f4      	bls.n	800293e <HAL_RCC_OscConfig+0x24e>
 8002954:	e73f      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002956:	696a      	ldr	r2, [r5, #20]
 8002958:	2301      	movs	r3, #1
 800295a:	2a00      	cmp	r2, #0
 800295c:	d010      	beq.n	8002980 <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 800295e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002960:	4313      	orrs	r3, r2
 8002962:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002964:	f7fe ffa2 	bl	80018ac <HAL_GetTick>
 8002968:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800296a:	2202      	movs	r2, #2
 800296c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800296e:	4213      	tst	r3, r2
 8002970:	d000      	beq.n	8002974 <HAL_RCC_OscConfig+0x284>
 8002972:	e705      	b.n	8002780 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002974:	f7fe ff9a 	bl	80018ac <HAL_GetTick>
 8002978:	1bc0      	subs	r0, r0, r7
 800297a:	2802      	cmp	r0, #2
 800297c:	d9f5      	bls.n	800296a <HAL_RCC_OscConfig+0x27a>
 800297e:	e72a      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_LSI_DISABLE();
 8002980:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002982:	439a      	bics	r2, r3
 8002984:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002986:	f7fe ff91 	bl	80018ac <HAL_GetTick>
 800298a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800298c:	2202      	movs	r2, #2
 800298e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002990:	4213      	tst	r3, r2
 8002992:	d100      	bne.n	8002996 <HAL_RCC_OscConfig+0x2a6>
 8002994:	e6f4      	b.n	8002780 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002996:	f7fe ff89 	bl	80018ac <HAL_GetTick>
 800299a:	1bc0      	subs	r0, r0, r7
 800299c:	2802      	cmp	r0, #2
 800299e:	d9f5      	bls.n	800298c <HAL_RCC_OscConfig+0x29c>
 80029a0:	e719      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80029a4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029a8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80029aa:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ac:	421a      	tst	r2, r3
 80029ae:	d104      	bne.n	80029ba <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80029b2:	4313      	orrs	r3, r2
 80029b4:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80029b6:	2301      	movs	r3, #1
 80029b8:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	4f19      	ldr	r7, [pc, #100]	; (8002a24 <HAL_RCC_OscConfig+0x334>)
 80029be:	0052      	lsls	r2, r2, #1
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4213      	tst	r3, r2
 80029c4:	d008      	beq.n	80029d8 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	68ab      	ldr	r3, [r5, #8]
 80029ca:	0052      	lsls	r2, r2, #1
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d12b      	bne.n	8002a28 <HAL_RCC_OscConfig+0x338>
 80029d0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80029d2:	4313      	orrs	r3, r2
 80029d4:	6523      	str	r3, [r4, #80]	; 0x50
 80029d6:	e04c      	b.n	8002a72 <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	0052      	lsls	r2, r2, #1
 80029de:	4313      	orrs	r3, r2
 80029e0:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80029e2:	f7fe ff63 	bl	80018ac <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 80029ea:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	9303      	str	r3, [sp, #12]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	9a03      	ldr	r2, [sp, #12]
 80029f2:	4213      	tst	r3, r2
 80029f4:	d1e7      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f6:	f7fe ff59 	bl	80018ac <HAL_GetTick>
 80029fa:	9b02      	ldr	r3, [sp, #8]
 80029fc:	1ac0      	subs	r0, r0, r3
 80029fe:	2864      	cmp	r0, #100	; 0x64
 8002a00:	d9f5      	bls.n	80029ee <HAL_RCC_OscConfig+0x2fe>
 8002a02:	e6e8      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
 8002a04:	40021000 	.word	0x40021000
 8002a08:	ffff1fff 	.word	0xffff1fff
 8002a0c:	08005e9a 	.word	0x08005e9a
 8002a10:	20000020 	.word	0x20000020
 8002a14:	fffeffff 	.word	0xfffeffff
 8002a18:	fffbffff 	.word	0xfffbffff
 8002a1c:	ffffe0ff 	.word	0xffffe0ff
 8002a20:	fffffeff 	.word	0xfffffeff
 8002a24:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d116      	bne.n	8002a5a <HAL_RCC_OscConfig+0x36a>
 8002a2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a2e:	4a53      	ldr	r2, [pc, #332]	; (8002b7c <HAL_RCC_OscConfig+0x48c>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	6523      	str	r3, [r4, #80]	; 0x50
 8002a34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a36:	4a52      	ldr	r2, [pc, #328]	; (8002b80 <HAL_RCC_OscConfig+0x490>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002a3c:	f7fe ff36 	bl	80018ac <HAL_GetTick>
 8002a40:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a42:	2280      	movs	r2, #128	; 0x80
 8002a44:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a46:	0092      	lsls	r2, r2, #2
 8002a48:	4213      	tst	r3, r2
 8002a4a:	d02a      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x3b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4c:	f7fe ff2e 	bl	80018ac <HAL_GetTick>
 8002a50:	4b4c      	ldr	r3, [pc, #304]	; (8002b84 <HAL_RCC_OscConfig+0x494>)
 8002a52:	1bc0      	subs	r0, r0, r7
 8002a54:	4298      	cmp	r0, r3
 8002a56:	d9f4      	bls.n	8002a42 <HAL_RCC_OscConfig+0x352>
 8002a58:	e6bd      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5a:	21a0      	movs	r1, #160	; 0xa0
 8002a5c:	00c9      	lsls	r1, r1, #3
 8002a5e:	428b      	cmp	r3, r1
 8002a60:	d10b      	bne.n	8002a7a <HAL_RCC_OscConfig+0x38a>
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	430b      	orrs	r3, r1
 8002a6a:	6523      	str	r3, [r4, #80]	; 0x50
 8002a6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002a72:	f7fe ff1b 	bl	80018ac <HAL_GetTick>
 8002a76:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a78:	e00e      	b.n	8002a98 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a7c:	4a3f      	ldr	r2, [pc, #252]	; (8002b7c <HAL_RCC_OscConfig+0x48c>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	6523      	str	r3, [r4, #80]	; 0x50
 8002a82:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a84:	4a3e      	ldr	r2, [pc, #248]	; (8002b80 <HAL_RCC_OscConfig+0x490>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	e7a4      	b.n	80029d4 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe ff0f 	bl	80018ac <HAL_GetTick>
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	; (8002b84 <HAL_RCC_OscConfig+0x494>)
 8002a90:	1bc0      	subs	r0, r0, r7
 8002a92:	4298      	cmp	r0, r3
 8002a94:	d900      	bls.n	8002a98 <HAL_RCC_OscConfig+0x3a8>
 8002a96:	e69e      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a98:	2280      	movs	r2, #128	; 0x80
 8002a9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002a9c:	0092      	lsls	r2, r2, #2
 8002a9e:	4213      	tst	r3, r2
 8002aa0:	d0f3      	beq.n	8002a8a <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8002aa2:	9b01      	ldr	r3, [sp, #4]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d000      	beq.n	8002aaa <HAL_RCC_OscConfig+0x3ba>
 8002aa8:	e66e      	b.n	8002788 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002aac:	4a36      	ldr	r2, [pc, #216]	; (8002b88 <HAL_RCC_OscConfig+0x498>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ab2:	e669      	b.n	8002788 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ab4:	2e0c      	cmp	r6, #12
 8002ab6:	d043      	beq.n	8002b40 <HAL_RCC_OscConfig+0x450>
 8002ab8:	4a34      	ldr	r2, [pc, #208]	; (8002b8c <HAL_RCC_OscConfig+0x49c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d12e      	bne.n	8002b1c <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_DISABLE();
 8002abe:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002ac0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fef1 	bl	80018ac <HAL_GetTick>
 8002aca:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002acc:	04b6      	lsls	r6, r6, #18
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	4233      	tst	r3, r6
 8002ad2:	d11d      	bne.n	8002b10 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002ad6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002ad8:	68e2      	ldr	r2, [r4, #12]
 8002ada:	430b      	orrs	r3, r1
 8002adc:	492c      	ldr	r1, [pc, #176]	; (8002b90 <HAL_RCC_OscConfig+0x4a0>)
 8002ade:	400a      	ands	r2, r1
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002ae4:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	6822      	ldr	r2, [r4, #0]
 8002aee:	045b      	lsls	r3, r3, #17
 8002af0:	4313      	orrs	r3, r2
 8002af2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002af4:	f7fe feda 	bl	80018ac <HAL_GetTick>
 8002af8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002afa:	04ad      	lsls	r5, r5, #18
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	422b      	tst	r3, r5
 8002b00:	d000      	beq.n	8002b04 <HAL_RCC_OscConfig+0x414>
 8002b02:	e645      	b.n	8002790 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe fed2 	bl	80018ac <HAL_GetTick>
 8002b08:	1b80      	subs	r0, r0, r6
 8002b0a:	2802      	cmp	r0, #2
 8002b0c:	d9f6      	bls.n	8002afc <HAL_RCC_OscConfig+0x40c>
 8002b0e:	e662      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe fecc 	bl	80018ac <HAL_GetTick>
 8002b14:	1bc0      	subs	r0, r0, r7
 8002b16:	2802      	cmp	r0, #2
 8002b18:	d9d9      	bls.n	8002ace <HAL_RCC_OscConfig+0x3de>
 8002b1a:	e65c      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 8002b1c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b1e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002b20:	4013      	ands	r3, r2
 8002b22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002b24:	f7fe fec2 	bl	80018ac <HAL_GetTick>
 8002b28:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002b2a:	04ad      	lsls	r5, r5, #18
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	422b      	tst	r3, r5
 8002b30:	d100      	bne.n	8002b34 <HAL_RCC_OscConfig+0x444>
 8002b32:	e62d      	b.n	8002790 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe feba 	bl	80018ac <HAL_GetTick>
 8002b38:	1b80      	subs	r0, r0, r6
 8002b3a:	2802      	cmp	r0, #2
 8002b3c:	d9f6      	bls.n	8002b2c <HAL_RCC_OscConfig+0x43c>
 8002b3e:	e64a      	b.n	80027d6 <HAL_RCC_OscConfig+0xe6>
        return HAL_ERROR;
 8002b40:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d100      	bne.n	8002b48 <HAL_RCC_OscConfig+0x458>
 8002b46:	e5d9      	b.n	80026fc <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b48:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8002b4a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002b4e:	0252      	lsls	r2, r2, #9
 8002b50:	401a      	ands	r2, r3
        return HAL_ERROR;
 8002b52:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b54:	428a      	cmp	r2, r1
 8002b56:	d000      	beq.n	8002b5a <HAL_RCC_OscConfig+0x46a>
 8002b58:	e5d0      	b.n	80026fc <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b5a:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b5e:	0392      	lsls	r2, r2, #14
 8002b60:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b62:	428a      	cmp	r2, r1
 8002b64:	d000      	beq.n	8002b68 <HAL_RCC_OscConfig+0x478>
 8002b66:	e5c9      	b.n	80026fc <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002b68:	20c0      	movs	r0, #192	; 0xc0
 8002b6a:	0400      	lsls	r0, r0, #16
 8002b6c:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002b6e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002b70:	1a18      	subs	r0, r3, r0
 8002b72:	1e43      	subs	r3, r0, #1
 8002b74:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8002b76:	b2c0      	uxtb	r0, r0
 8002b78:	e5c0      	b.n	80026fc <HAL_RCC_OscConfig+0xc>
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	fffffeff 	.word	0xfffffeff
 8002b80:	fffffbff 	.word	0xfffffbff
 8002b84:	00001388 	.word	0x00001388
 8002b88:	efffffff 	.word	0xefffffff
 8002b8c:	feffffff 	.word	0xfeffffff
 8002b90:	ff02ffff 	.word	0xff02ffff

08002b94 <HAL_RCC_ClockConfig>:
{
 8002b94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b96:	1e06      	subs	r6, r0, #0
 8002b98:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8002b9c:	2001      	movs	r0, #1
}
 8002b9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	4c51      	ldr	r4, [pc, #324]	; (8002ce8 <HAL_RCC_ClockConfig+0x154>)
 8002ba4:	9901      	ldr	r1, [sp, #4]
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	428b      	cmp	r3, r1
 8002bac:	d327      	bcc.n	8002bfe <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bae:	6832      	ldr	r2, [r6, #0]
 8002bb0:	0793      	lsls	r3, r2, #30
 8002bb2:	d42f      	bmi.n	8002c14 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb4:	07d3      	lsls	r3, r2, #31
 8002bb6:	d435      	bmi.n	8002c24 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb8:	2301      	movs	r3, #1
 8002bba:	6822      	ldr	r2, [r4, #0]
 8002bbc:	9901      	ldr	r1, [sp, #4]
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	428a      	cmp	r2, r1
 8002bc2:	d900      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x32>
 8002bc4:	e081      	b.n	8002cca <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc6:	6832      	ldr	r2, [r6, #0]
 8002bc8:	4c48      	ldr	r4, [pc, #288]	; (8002cec <HAL_RCC_ClockConfig+0x158>)
 8002bca:	0753      	lsls	r3, r2, #29
 8002bcc:	d500      	bpl.n	8002bd0 <HAL_RCC_ClockConfig+0x3c>
 8002bce:	e084      	b.n	8002cda <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd0:	0713      	lsls	r3, r2, #28
 8002bd2:	d506      	bpl.n	8002be2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bd4:	68e2      	ldr	r2, [r4, #12]
 8002bd6:	6933      	ldr	r3, [r6, #16]
 8002bd8:	4945      	ldr	r1, [pc, #276]	; (8002cf0 <HAL_RCC_ClockConfig+0x15c>)
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	400a      	ands	r2, r1
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002be2:	f7ff fd45 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8002be6:	68e3      	ldr	r3, [r4, #12]
 8002be8:	4a42      	ldr	r2, [pc, #264]	; (8002cf4 <HAL_RCC_ClockConfig+0x160>)
 8002bea:	061b      	lsls	r3, r3, #24
 8002bec:	0f1b      	lsrs	r3, r3, #28
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	40d8      	lsrs	r0, r3
 8002bf2:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <HAL_RCC_ClockConfig+0x164>)
 8002bf4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7fe fe24 	bl	8001844 <HAL_InitTick>
 8002bfc:	e7cf      	b.n	8002b9e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	9901      	ldr	r1, [sp, #4]
 8002c02:	4393      	bics	r3, r2
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	9a01      	ldr	r2, [sp, #4]
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d1c4      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x8>
 8002c12:	e7cc      	b.n	8002bae <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c14:	20f0      	movs	r0, #240	; 0xf0
 8002c16:	4935      	ldr	r1, [pc, #212]	; (8002cec <HAL_RCC_ClockConfig+0x158>)
 8002c18:	68cb      	ldr	r3, [r1, #12]
 8002c1a:	4383      	bics	r3, r0
 8002c1c:	68b0      	ldr	r0, [r6, #8]
 8002c1e:	4303      	orrs	r3, r0
 8002c20:	60cb      	str	r3, [r1, #12]
 8002c22:	e7c7      	b.n	8002bb4 <HAL_RCC_ClockConfig+0x20>
 8002c24:	4d31      	ldr	r5, [pc, #196]	; (8002cec <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c26:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c28:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2a:	2a02      	cmp	r2, #2
 8002c2c:	d119      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c2e:	039b      	lsls	r3, r3, #14
 8002c30:	d5b4      	bpl.n	8002b9c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c32:	2103      	movs	r1, #3
 8002c34:	68eb      	ldr	r3, [r5, #12]
 8002c36:	438b      	bics	r3, r1
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fe36 	bl	80018ac <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c40:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002c42:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d119      	bne.n	8002c7c <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c48:	220c      	movs	r2, #12
 8002c4a:	68eb      	ldr	r3, [r5, #12]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d0b2      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c52:	f7fe fe2b 	bl	80018ac <HAL_GetTick>
 8002c56:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <HAL_RCC_ClockConfig+0x168>)
 8002c58:	1bc0      	subs	r0, r0, r7
 8002c5a:	4298      	cmp	r0, r3
 8002c5c:	d9f4      	bls.n	8002c48 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8002c5e:	2003      	movs	r0, #3
 8002c60:	e79d      	b.n	8002b9e <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c62:	2a03      	cmp	r2, #3
 8002c64:	d102      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c66:	019b      	lsls	r3, r3, #6
 8002c68:	d4e3      	bmi.n	8002c32 <HAL_RCC_ClockConfig+0x9e>
 8002c6a:	e797      	b.n	8002b9c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c6c:	2a01      	cmp	r2, #1
 8002c6e:	d102      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c70:	075b      	lsls	r3, r3, #29
 8002c72:	d4de      	bmi.n	8002c32 <HAL_RCC_ClockConfig+0x9e>
 8002c74:	e792      	b.n	8002b9c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c76:	059b      	lsls	r3, r3, #22
 8002c78:	d4db      	bmi.n	8002c32 <HAL_RCC_ClockConfig+0x9e>
 8002c7a:	e78f      	b.n	8002b9c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d10b      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c80:	220c      	movs	r2, #12
 8002c82:	68eb      	ldr	r3, [r5, #12]
 8002c84:	4013      	ands	r3, r2
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d096      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8a:	f7fe fe0f 	bl	80018ac <HAL_GetTick>
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <HAL_RCC_ClockConfig+0x168>)
 8002c90:	1bc0      	subs	r0, r0, r7
 8002c92:	4298      	cmp	r0, r3
 8002c94:	d9f4      	bls.n	8002c80 <HAL_RCC_ClockConfig+0xec>
 8002c96:	e7e2      	b.n	8002c5e <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d010      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c9c:	220c      	movs	r2, #12
 8002c9e:	68eb      	ldr	r3, [r5, #12]
 8002ca0:	4213      	tst	r3, r2
 8002ca2:	d089      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7fe fe02 	bl	80018ac <HAL_GetTick>
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <HAL_RCC_ClockConfig+0x168>)
 8002caa:	1bc0      	subs	r0, r0, r7
 8002cac:	4298      	cmp	r0, r3
 8002cae:	d9f5      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x108>
 8002cb0:	e7d5      	b.n	8002c5e <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb2:	f7fe fdfb 	bl	80018ac <HAL_GetTick>
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_RCC_ClockConfig+0x168>)
 8002cb8:	1bc0      	subs	r0, r0, r7
 8002cba:	4298      	cmp	r0, r3
 8002cbc:	d8cf      	bhi.n	8002c5e <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	68eb      	ldr	r3, [r5, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d1f4      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0x11e>
 8002cc8:	e776      	b.n	8002bb8 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	6822      	ldr	r2, [r4, #0]
 8002ccc:	439a      	bics	r2, r3
 8002cce:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd0:	6822      	ldr	r2, [r4, #0]
 8002cd2:	421a      	tst	r2, r3
 8002cd4:	d100      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x144>
 8002cd6:	e776      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x32>
 8002cd8:	e760      	b.n	8002b9c <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cda:	68e3      	ldr	r3, [r4, #12]
 8002cdc:	4908      	ldr	r1, [pc, #32]	; (8002d00 <HAL_RCC_ClockConfig+0x16c>)
 8002cde:	400b      	ands	r3, r1
 8002ce0:	68f1      	ldr	r1, [r6, #12]
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	60e3      	str	r3, [r4, #12]
 8002ce6:	e773      	b.n	8002bd0 <HAL_RCC_ClockConfig+0x3c>
 8002ce8:	40022000 	.word	0x40022000
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	ffffc7ff 	.word	0xffffc7ff
 8002cf4:	08005e9a 	.word	0x08005e9a
 8002cf8:	20000020 	.word	0x20000020
 8002cfc:	00001388 	.word	0x00001388
 8002d00:	fffff8ff 	.word	0xfffff8ff

08002d04 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d04:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002d06:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	055b      	lsls	r3, r3, #21
 8002d0c:	0f5b      	lsrs	r3, r3, #29
 8002d0e:	5cd3      	ldrb	r3, [r2, r3]
 8002d10:	4a03      	ldr	r2, [pc, #12]	; (8002d20 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002d12:	6810      	ldr	r0, [r2, #0]
 8002d14:	40d8      	lsrs	r0, r3
}
 8002d16:	4770      	bx	lr
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	08005eaa 	.word	0x08005eaa
 8002d20:	20000020 	.word	0x20000020

08002d24 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d24:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	049b      	lsls	r3, r3, #18
 8002d2c:	0f5b      	lsrs	r3, r3, #29
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002d32:	6810      	ldr	r0, [r2, #0]
 8002d34:	40d8      	lsrs	r0, r3
}
 8002d36:	4770      	bx	lr
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08005eaa 	.word	0x08005eaa
 8002d40:	20000020 	.word	0x20000020

08002d44 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d44:	6803      	ldr	r3, [r0, #0]
{
 8002d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d48:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d4a:	069b      	lsls	r3, r3, #26
 8002d4c:	d53b      	bpl.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002d50:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d52:	4c4f      	ldr	r4, [pc, #316]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d54:	055b      	lsls	r3, r3, #21
 8002d56:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8002d58:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5a:	421a      	tst	r2, r3
 8002d5c:	d104      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d60:	4313      	orrs	r3, r2
 8002d62:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8002d64:	2301      	movs	r3, #1
 8002d66:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	2780      	movs	r7, #128	; 0x80
 8002d6a:	4e4a      	ldr	r6, [pc, #296]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002d6c:	007f      	lsls	r7, r7, #1
 8002d6e:	6833      	ldr	r3, [r6, #0]
 8002d70:	423b      	tst	r3, r7
 8002d72:	d04f      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d74:	6868      	ldr	r0, [r5, #4]
 8002d76:	23c0      	movs	r3, #192	; 0xc0
 8002d78:	26c0      	movs	r6, #192	; 0xc0
 8002d7a:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d7c:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d7e:	03b6      	lsls	r6, r6, #14
 8002d80:	029b      	lsls	r3, r3, #10
 8002d82:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d84:	4032      	ands	r2, r6
 8002d86:	4019      	ands	r1, r3
 8002d88:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d8a:	4290      	cmp	r0, r2
 8002d8c:	d153      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0xf2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002d8e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002d90:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d92:	d157      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x100>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d94:	6869      	ldr	r1, [r5, #4]
 8002d96:	23c0      	movs	r3, #192	; 0xc0
 8002d98:	000a      	movs	r2, r1
 8002d9a:	029b      	lsls	r3, r3, #10
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d107      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	483c      	ldr	r0, [pc, #240]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002da6:	4003      	ands	r3, r0
 8002da8:	20c0      	movs	r0, #192	; 0xc0
 8002daa:	0380      	lsls	r0, r0, #14
 8002dac:	4001      	ands	r1, r0
 8002dae:	430b      	orrs	r3, r1
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002db4:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002db6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db8:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d103      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dc0:	4a36      	ldr	r2, [pc, #216]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dc6:	682a      	ldr	r2, [r5, #0]
 8002dc8:	0793      	lsls	r3, r2, #30
 8002dca:	d506      	bpl.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dcc:	200c      	movs	r0, #12
 8002dce:	4930      	ldr	r1, [pc, #192]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002dd0:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002dd2:	4383      	bics	r3, r0
 8002dd4:	68a8      	ldr	r0, [r5, #8]
 8002dd6:	4303      	orrs	r3, r0
 8002dd8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dda:	0753      	lsls	r3, r2, #29
 8002ddc:	d506      	bpl.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dde:	492c      	ldr	r1, [pc, #176]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002de0:	482f      	ldr	r0, [pc, #188]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002de2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002de4:	4003      	ands	r3, r0
 8002de6:	68e8      	ldr	r0, [r5, #12]
 8002de8:	4303      	orrs	r3, r0
 8002dea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dec:	0713      	lsls	r3, r2, #28
 8002dee:	d506      	bpl.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df0:	4927      	ldr	r1, [pc, #156]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002df2:	482c      	ldr	r0, [pc, #176]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df4:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8002df6:	4003      	ands	r3, r0
 8002df8:	6928      	ldr	r0, [r5, #16]
 8002dfa:	4303      	orrs	r3, r0
 8002dfc:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002dfe:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e00:	0613      	lsls	r3, r2, #24
 8002e02:	d517      	bpl.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002e04:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002e06:	4928      	ldr	r1, [pc, #160]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e08:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002e0a:	400b      	ands	r3, r1
 8002e0c:	6969      	ldr	r1, [r5, #20]
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e12:	e00f      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e14:	6833      	ldr	r3, [r6, #0]
 8002e16:	433b      	orrs	r3, r7
 8002e18:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fd47 	bl	80018ac <HAL_GetTick>
 8002e1e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e20:	6833      	ldr	r3, [r6, #0]
 8002e22:	423b      	tst	r3, r7
 8002e24:	d1a6      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e26:	f7fe fd41 	bl	80018ac <HAL_GetTick>
 8002e2a:	9b01      	ldr	r3, [sp, #4]
 8002e2c:	1ac0      	subs	r0, r0, r3
 8002e2e:	2864      	cmp	r0, #100	; 0x64
 8002e30:	d9f6      	bls.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          return HAL_TIMEOUT;
 8002e32:	2003      	movs	r0, #3
}
 8002e34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002e36:	4299      	cmp	r1, r3
 8002e38:	d1a9      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e3a:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8002e3c:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e3e:	039b      	lsls	r3, r3, #14
 8002e40:	d5a5      	bpl.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8002e42:	e7f7      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002e44:	428b      	cmp	r3, r1
 8002e46:	d0a5      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	069b      	lsls	r3, r3, #26
 8002e4c:	d5a2      	bpl.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e4e:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e50:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e52:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002e54:	0312      	lsls	r2, r2, #12
 8002e56:	4302      	orrs	r2, r0
 8002e58:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5a:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e5e:	4814      	ldr	r0, [pc, #80]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e60:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e62:	4002      	ands	r2, r0
 8002e64:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8002e66:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002e68:	05cb      	lsls	r3, r1, #23
 8002e6a:	d400      	bmi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8002e6c:	e792      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x50>
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fd1d 	bl	80018ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e72:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002e74:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e76:	00bf      	lsls	r7, r7, #2
 8002e78:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002e7a:	423b      	tst	r3, r7
 8002e7c:	d000      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e7e:	e789      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e80:	f7fe fd14 	bl	80018ac <HAL_GetTick>
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002e86:	1b80      	subs	r0, r0, r6
 8002e88:	4298      	cmp	r0, r3
 8002e8a:	d9f5      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8002e8c:	e7d1      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40007000 	.word	0x40007000
 8002e98:	ffcfffff 	.word	0xffcfffff
 8002e9c:	efffffff 	.word	0xefffffff
 8002ea0:	fffff3ff 	.word	0xfffff3ff
 8002ea4:	ffffcfff 	.word	0xffffcfff
 8002ea8:	fff3ffff 	.word	0xfff3ffff
 8002eac:	fffcffff 	.word	0xfffcffff
 8002eb0:	fff7ffff 	.word	0xfff7ffff
 8002eb4:	00001388 	.word	0x00001388

08002eb8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb8:	2280      	movs	r2, #128	; 0x80
{
 8002eba:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002ebc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ebe:	05d2      	lsls	r2, r2, #23
 8002ec0:	4290      	cmp	r0, r2
 8002ec2:	d005      	beq.n	8002ed0 <TIM_Base_SetConfig+0x18>
 8002ec4:	4c10      	ldr	r4, [pc, #64]	; (8002f08 <TIM_Base_SetConfig+0x50>)
 8002ec6:	42a0      	cmp	r0, r4
 8002ec8:	d002      	beq.n	8002ed0 <TIM_Base_SetConfig+0x18>
 8002eca:	4c10      	ldr	r4, [pc, #64]	; (8002f0c <TIM_Base_SetConfig+0x54>)
 8002ecc:	42a0      	cmp	r0, r4
 8002ece:	d10f      	bne.n	8002ef0 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed0:	2470      	movs	r4, #112	; 0x70
 8002ed2:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002ed4:	684c      	ldr	r4, [r1, #4]
 8002ed6:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed8:	4290      	cmp	r0, r2
 8002eda:	d005      	beq.n	8002ee8 <TIM_Base_SetConfig+0x30>
 8002edc:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <TIM_Base_SetConfig+0x50>)
 8002ede:	4290      	cmp	r0, r2
 8002ee0:	d002      	beq.n	8002ee8 <TIM_Base_SetConfig+0x30>
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <TIM_Base_SetConfig+0x54>)
 8002ee4:	4290      	cmp	r0, r2
 8002ee6:	d103      	bne.n	8002ef0 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee8:	4a09      	ldr	r2, [pc, #36]	; (8002f10 <TIM_Base_SetConfig+0x58>)
 8002eea:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eec:	68ca      	ldr	r2, [r1, #12]
 8002eee:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	4393      	bics	r3, r2
 8002ef4:	690a      	ldr	r2, [r1, #16]
 8002ef6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002ef8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002efa:	688b      	ldr	r3, [r1, #8]
 8002efc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002efe:	680b      	ldr	r3, [r1, #0]
 8002f00:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f02:	2301      	movs	r3, #1
 8002f04:	6143      	str	r3, [r0, #20]
}
 8002f06:	bd10      	pop	{r4, pc}
 8002f08:	40010800 	.word	0x40010800
 8002f0c:	40011400 	.word	0x40011400
 8002f10:	fffffcff 	.word	0xfffffcff

08002f14 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f14:	2201      	movs	r2, #1
{
 8002f16:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f18:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1a:	6a03      	ldr	r3, [r0, #32]
 8002f1c:	4393      	bics	r3, r2
 8002f1e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002f20:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002f22:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f24:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f26:	43aa      	bics	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f28:	680d      	ldr	r5, [r1, #0]
 8002f2a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f2c:	2502      	movs	r5, #2
 8002f2e:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f30:	688d      	ldr	r5, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f32:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f34:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f36:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8002f38:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8002f3a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f3c:	6203      	str	r3, [r0, #32]
}
 8002f3e:	bd30      	pop	{r4, r5, pc}

08002f40 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f40:	2210      	movs	r2, #16
 8002f42:	6a03      	ldr	r3, [r0, #32]
{
 8002f44:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f46:	4393      	bics	r3, r2
 8002f48:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f4a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f4c:	4c09      	ldr	r4, [pc, #36]	; (8002f74 <TIM_OC2_SetConfig+0x34>)
  tmpcr2 =  TIMx->CR2;
 8002f4e:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f50:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f52:	4014      	ands	r4, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f54:	680a      	ldr	r2, [r1, #0]
 8002f56:	0212      	lsls	r2, r2, #8
 8002f58:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f5a:	2420      	movs	r4, #32
 8002f5c:	43a3      	bics	r3, r4
 8002f5e:	001c      	movs	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f60:	688b      	ldr	r3, [r1, #8]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f62:	6045      	str	r5, [r0, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f64:	011b      	lsls	r3, r3, #4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f66:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f68:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f6a:	4323      	orrs	r3, r4
  TIMx->CCR2 = OC_Config->Pulse;
 8002f6c:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f6e:	6203      	str	r3, [r0, #32]
}
 8002f70:	bd30      	pop	{r4, r5, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	ffff8cff 	.word	0xffff8cff

08002f78 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f78:	231f      	movs	r3, #31
{
 8002f7a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f7c:	2401      	movs	r4, #1
 8002f7e:	4019      	ands	r1, r3
 8002f80:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f82:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002f84:	6a03      	ldr	r3, [r0, #32]
 8002f86:	43a3      	bics	r3, r4
 8002f88:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f8a:	6a03      	ldr	r3, [r0, #32]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	6202      	str	r2, [r0, #32]
}
 8002f90:	bd10      	pop	{r4, pc}

08002f92 <HAL_TIM_Base_Init>:
{
 8002f92:	b570      	push	{r4, r5, r6, lr}
 8002f94:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002f96:	2001      	movs	r0, #1
  if (htim == NULL)
 8002f98:	2c00      	cmp	r4, #0
 8002f9a:	d014      	beq.n	8002fc6 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f9c:	0025      	movs	r5, r4
 8002f9e:	3539      	adds	r5, #57	; 0x39
 8002fa0:	782b      	ldrb	r3, [r5, #0]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002fa8:	0022      	movs	r2, r4
 8002faa:	3238      	adds	r2, #56	; 0x38
 8002fac:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 8002fae:	0020      	movs	r0, r4
 8002fb0:	f001 fe34 	bl	8004c1c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fba:	1d21      	adds	r1, r4, #4
 8002fbc:	f7ff ff7c 	bl	8002eb8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002fc0:	2301      	movs	r3, #1
  return HAL_OK;
 8002fc2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	702b      	strb	r3, [r5, #0]
}
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}

08002fc8 <HAL_TIM_Base_DeInit>:
{
 8002fc8:	b570      	push	{r4, r5, r6, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8002fca:	0005      	movs	r5, r0
 8002fcc:	2302      	movs	r3, #2
 8002fce:	3539      	adds	r5, #57	; 0x39
 8002fd0:	702b      	strb	r3, [r5, #0]
  __HAL_TIM_DISABLE(htim);
 8002fd2:	6803      	ldr	r3, [r0, #0]
 8002fd4:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <HAL_TIM_Base_DeInit+0x30>)
 8002fd6:	6a19      	ldr	r1, [r3, #32]
{
 8002fd8:	0004      	movs	r4, r0
  __HAL_TIM_DISABLE(htim);
 8002fda:	4211      	tst	r1, r2
 8002fdc:	d103      	bne.n	8002fe6 <HAL_TIM_Base_DeInit+0x1e>
 8002fde:	2101      	movs	r1, #1
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	438a      	bics	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_MspDeInit(htim);
 8002fe6:	0020      	movs	r0, r4
 8002fe8:	f001 fe8c 	bl	8004d04 <HAL_TIM_Base_MspDeInit>
  htim->State = HAL_TIM_STATE_RESET;
 8002fec:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8002fee:	3438      	adds	r4, #56	; 0x38
  htim->State = HAL_TIM_STATE_RESET;
 8002ff0:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(htim);
 8002ff2:	7020      	strb	r0, [r4, #0]
}
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	00001111 	.word	0x00001111

08002ffc <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	0001      	movs	r1, r0
 8002ffe:	2302      	movs	r3, #2
 8003000:	3139      	adds	r1, #57	; 0x39
 8003002:	700b      	strb	r3, [r1, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003004:	6803      	ldr	r3, [r0, #0]
 8003006:	2007      	movs	r0, #7
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300c:	2a06      	cmp	r2, #6
 800300e:	d003      	beq.n	8003018 <HAL_TIM_Base_Start+0x1c>
    __HAL_TIM_ENABLE(htim);
 8003010:	2201      	movs	r2, #1
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	4302      	orrs	r2, r0
 8003016:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003018:	2301      	movs	r3, #1
}
 800301a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800301c:	700b      	strb	r3, [r1, #0]
}
 800301e:	4770      	bx	lr

08003020 <HAL_TIM_OC_Start>:
{
 8003020:	b510      	push	{r4, lr}
 8003022:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003024:	2201      	movs	r2, #1
 8003026:	6800      	ldr	r0, [r0, #0]
 8003028:	f7ff ffa6 	bl	8002f78 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800302c:	2107      	movs	r1, #7
 800302e:	6823      	ldr	r3, [r4, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003034:	2a06      	cmp	r2, #6
 8003036:	d003      	beq.n	8003040 <HAL_TIM_OC_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8003038:	2201      	movs	r2, #1
 800303a:	6819      	ldr	r1, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]
}
 8003040:	2000      	movs	r0, #0
 8003042:	bd10      	pop	{r4, pc}

08003044 <HAL_TIM_PWM_MspInit>:
 8003044:	4770      	bx	lr

08003046 <HAL_TIM_PWM_Init>:
{
 8003046:	b570      	push	{r4, r5, r6, lr}
 8003048:	0004      	movs	r4, r0
    return HAL_ERROR;
 800304a:	2001      	movs	r0, #1
  if (htim == NULL)
 800304c:	2c00      	cmp	r4, #0
 800304e:	d014      	beq.n	800307a <HAL_TIM_PWM_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003050:	0025      	movs	r5, r4
 8003052:	3539      	adds	r5, #57	; 0x39
 8003054:	782b      	ldrb	r3, [r5, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d105      	bne.n	8003068 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800305c:	0022      	movs	r2, r4
 800305e:	3238      	adds	r2, #56	; 0x38
 8003060:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8003062:	0020      	movs	r0, r4
 8003064:	f7ff ffee 	bl	8003044 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306e:	1d21      	adds	r1, r4, #4
 8003070:	f7ff ff22 	bl	8002eb8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003074:	2301      	movs	r3, #1
  return HAL_OK;
 8003076:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003078:	702b      	strb	r3, [r5, #0]
}
 800307a:	bd70      	pop	{r4, r5, r6, pc}

0800307c <HAL_TIM_PWM_Start>:
 800307c:	b510      	push	{r4, lr}
 800307e:	f7ff ffcf 	bl	8003020 <HAL_TIM_OC_Start>
 8003082:	bd10      	pop	{r4, pc}

08003084 <HAL_TIM_PWM_ConfigChannel>:
{
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003086:	0005      	movs	r5, r0
 8003088:	2302      	movs	r3, #2
 800308a:	3538      	adds	r5, #56	; 0x38
{
 800308c:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 800308e:	7829      	ldrb	r1, [r5, #0]
{
 8003090:	0007      	movs	r7, r0
  __HAL_LOCK(htim);
 8003092:	0018      	movs	r0, r3
 8003094:	2901      	cmp	r1, #1
 8003096:	d025      	beq.n	80030e4 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	003e      	movs	r6, r7
  __HAL_LOCK(htim);
 800309a:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	3639      	adds	r6, #57	; 0x39
  __HAL_LOCK(htim);
 800309e:	7029      	strb	r1, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	7033      	strb	r3, [r6, #0]
  switch (Channel)
 80030a2:	2a0c      	cmp	r2, #12
 80030a4:	d81a      	bhi.n	80030dc <HAL_TIM_PWM_ConfigChannel+0x58>
 80030a6:	0010      	movs	r0, r2
 80030a8:	f7fd f82e 	bl	8000108 <__gnu_thumb1_case_uqi>
 80030ac:	18181807 	.word	0x18181807
 80030b0:	1818181d 	.word	0x1818181d
 80030b4:	1818182f 	.word	0x1818182f
 80030b8:	52          	.byte	0x52
 80030b9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030ba:	0021      	movs	r1, r4
 80030bc:	6838      	ldr	r0, [r7, #0]
 80030be:	f7ff ff29 	bl	8002f14 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030c2:	2208      	movs	r2, #8
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6999      	ldr	r1, [r3, #24]
 80030c8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030ca:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030ce:	699a      	ldr	r2, [r3, #24]
 80030d0:	438a      	bics	r2, r1
 80030d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030d8:	430a      	orrs	r2, r1
 80030da:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80030de:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80030e2:	7028      	strb	r0, [r5, #0]
}
 80030e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030e6:	0021      	movs	r1, r4
 80030e8:	6838      	ldr	r0, [r7, #0]
 80030ea:	f7ff ff29 	bl	8002f40 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030ee:	2280      	movs	r2, #128	; 0x80
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	0112      	lsls	r2, r2, #4
 80030f4:	6999      	ldr	r1, [r3, #24]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030fa:	699a      	ldr	r2, [r3, #24]
 80030fc:	4926      	ldr	r1, [pc, #152]	; (8003198 <HAL_TIM_PWM_ConfigChannel+0x114>)
 80030fe:	400a      	ands	r2, r1
 8003100:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003102:	68e2      	ldr	r2, [r4, #12]
 8003104:	6999      	ldr	r1, [r3, #24]
 8003106:	0212      	lsls	r2, r2, #8
 8003108:	e7e6      	b.n	80030d8 <HAL_TIM_PWM_ConfigChannel+0x54>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800310a:	2073      	movs	r0, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800310c:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800310e:	4923      	ldr	r1, [pc, #140]	; (800319c <HAL_TIM_PWM_ConfigChannel+0x118>)
 8003110:	6a1a      	ldr	r2, [r3, #32]
 8003112:	400a      	ands	r2, r1
 8003114:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003116:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003118:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800311a:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800311c:	4381      	bics	r1, r0
  tmpccmrx |= OC_Config->OCMode;
 800311e:	6820      	ldr	r0, [r4, #0]
 8003120:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8003122:	481f      	ldr	r0, [pc, #124]	; (80031a0 <HAL_TIM_PWM_ConfigChannel+0x11c>)
 8003124:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003126:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8003128:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800312a:	0212      	lsls	r2, r2, #8
  TIMx->CCMR2 = tmpccmrx;
 800312c:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800312e:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003130:	4302      	orrs	r2, r0
  TIMx->CCR3 = OC_Config->Pulse;
 8003132:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003134:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003136:	2208      	movs	r2, #8
 8003138:	69d9      	ldr	r1, [r3, #28]
 800313a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800313c:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800313e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	438a      	bics	r2, r1
 8003144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003146:	69da      	ldr	r2, [r3, #28]
 8003148:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800314a:	430a      	orrs	r2, r1
 800314c:	61da      	str	r2, [r3, #28]
      break;
 800314e:	e7c5      	b.n	80030dc <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003150:	683b      	ldr	r3, [r7, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003152:	4914      	ldr	r1, [pc, #80]	; (80031a4 <HAL_TIM_PWM_ConfigChannel+0x120>)
 8003154:	6a1a      	ldr	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003156:	4814      	ldr	r0, [pc, #80]	; (80031a8 <HAL_TIM_PWM_ConfigChannel+0x124>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003158:	400a      	ands	r2, r1
 800315a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800315c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800315e:	685f      	ldr	r7, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003160:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003162:	4001      	ands	r1, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003164:	6820      	ldr	r0, [r4, #0]
 8003166:	0200      	lsls	r0, r0, #8
 8003168:	4301      	orrs	r1, r0
  tmpccer &= ~TIM_CCER_CC4P;
 800316a:	4810      	ldr	r0, [pc, #64]	; (80031ac <HAL_TIM_PWM_ConfigChannel+0x128>)
 800316c:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800316e:	68a2      	ldr	r2, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8003170:	605f      	str	r7, [r3, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003172:	0312      	lsls	r2, r2, #12
  TIMx->CCMR2 = tmpccmrx;
 8003174:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003176:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003178:	4302      	orrs	r2, r0
  TIMx->CCR4 = OC_Config->Pulse;
 800317a:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800317c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	69d9      	ldr	r1, [r3, #28]
 8003182:	0112      	lsls	r2, r2, #4
 8003184:	430a      	orrs	r2, r1
 8003186:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	4903      	ldr	r1, [pc, #12]	; (8003198 <HAL_TIM_PWM_ConfigChannel+0x114>)
 800318c:	400a      	ands	r2, r1
 800318e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003190:	68e2      	ldr	r2, [r4, #12]
 8003192:	69d9      	ldr	r1, [r3, #28]
 8003194:	0212      	lsls	r2, r2, #8
 8003196:	e7d8      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0xc6>
 8003198:	fffffbff 	.word	0xfffffbff
 800319c:	fffffeff 	.word	0xfffffeff
 80031a0:	fffffdff 	.word	0xfffffdff
 80031a4:	ffffefff 	.word	0xffffefff
 80031a8:	ffff8cff 	.word	0xffff8cff
 80031ac:	ffffdfff 	.word	0xffffdfff

080031b0 <HAL_TIM_ConfigClockSource>:
{
 80031b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80031b2:	0004      	movs	r4, r0
 80031b4:	2202      	movs	r2, #2
 80031b6:	3438      	adds	r4, #56	; 0x38
 80031b8:	7825      	ldrb	r5, [r4, #0]
{
 80031ba:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80031bc:	0010      	movs	r0, r2
 80031be:	2d01      	cmp	r5, #1
 80031c0:	d017      	beq.n	80031f2 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 80031c2:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 80031c4:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 80031c6:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	3539      	adds	r5, #57	; 0x39
  __HAL_LOCK(htim);
 80031ca:	7027      	strb	r7, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80031cc:	702a      	strb	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 80031ce:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d0:	4845      	ldr	r0, [pc, #276]	; (80032e8 <HAL_TIM_ConfigClockSource+0x138>)
 80031d2:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 80031d4:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80031d6:	680a      	ldr	r2, [r1, #0]
 80031d8:	2a40      	cmp	r2, #64	; 0x40
 80031da:	d100      	bne.n	80031de <HAL_TIM_ConfigClockSource+0x2e>
 80031dc:	e06d      	b.n	80032ba <HAL_TIM_ConfigClockSource+0x10a>
 80031de:	d814      	bhi.n	800320a <HAL_TIM_ConfigClockSource+0x5a>
 80031e0:	2a10      	cmp	r2, #16
 80031e2:	d00b      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x4c>
 80031e4:	d806      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x44>
 80031e6:	2a00      	cmp	r2, #0
 80031e8:	d008      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x4c>
  htim->State = HAL_TIM_STATE_READY;
 80031ea:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80031ec:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80031ee:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80031f0:	7020      	strb	r0, [r4, #0]
}
 80031f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80031f4:	2a20      	cmp	r2, #32
 80031f6:	d001      	beq.n	80031fc <HAL_TIM_ConfigClockSource+0x4c>
 80031f8:	2a30      	cmp	r2, #48	; 0x30
 80031fa:	d1f6      	bne.n	80031ea <HAL_TIM_ConfigClockSource+0x3a>
  tmpsmcr &= ~TIM_SMCR_TS;
 80031fc:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80031fe:	6898      	ldr	r0, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003200:	4388      	bics	r0, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003202:	3969      	subs	r1, #105	; 0x69
 8003204:	430a      	orrs	r2, r1
 8003206:	4302      	orrs	r2, r0
 8003208:	e03d      	b.n	8003286 <HAL_TIM_ConfigClockSource+0xd6>
  switch (sClockSourceConfig->ClockSource)
 800320a:	2a60      	cmp	r2, #96	; 0x60
 800320c:	d03d      	beq.n	800328a <HAL_TIM_ConfigClockSource+0xda>
 800320e:	d817      	bhi.n	8003240 <HAL_TIM_ConfigClockSource+0x90>
 8003210:	2a50      	cmp	r2, #80	; 0x50
 8003212:	d1ea      	bne.n	80031ea <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003214:	6848      	ldr	r0, [r1, #4]
 8003216:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8003218:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321a:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800321c:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321e:	43be      	bics	r6, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003220:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003222:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003224:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003226:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003228:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800322a:	260a      	movs	r6, #10
 800322c:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 800322e:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8003230:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003232:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003234:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003236:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003238:	438a      	bics	r2, r1
 800323a:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800323c:	2257      	movs	r2, #87	; 0x57
 800323e:	e021      	b.n	8003284 <HAL_TIM_ConfigClockSource+0xd4>
  switch (sClockSourceConfig->ClockSource)
 8003240:	2a70      	cmp	r2, #112	; 0x70
 8003242:	d012      	beq.n	800326a <HAL_TIM_ConfigClockSource+0xba>
 8003244:	2080      	movs	r0, #128	; 0x80
 8003246:	0180      	lsls	r0, r0, #6
 8003248:	4282      	cmp	r2, r0
 800324a:	d1ce      	bne.n	80031ea <HAL_TIM_ConfigClockSource+0x3a>
  tmpsmcr = TIMx->SMCR;
 800324c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800324e:	4827      	ldr	r0, [pc, #156]	; (80032ec <HAL_TIM_ConfigClockSource+0x13c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003250:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003252:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003254:	688a      	ldr	r2, [r1, #8]
 8003256:	68c9      	ldr	r1, [r1, #12]
 8003258:	4332      	orrs	r2, r6
 800325a:	0209      	lsls	r1, r1, #8
 800325c:	430a      	orrs	r2, r1
 800325e:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 8003260:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003262:	2280      	movs	r2, #128	; 0x80
 8003264:	6899      	ldr	r1, [r3, #8]
 8003266:	01d2      	lsls	r2, r2, #7
 8003268:	e00c      	b.n	8003284 <HAL_TIM_ConfigClockSource+0xd4>
  tmpsmcr = TIMx->SMCR;
 800326a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800326c:	481f      	ldr	r0, [pc, #124]	; (80032ec <HAL_TIM_ConfigClockSource+0x13c>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800326e:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003270:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003272:	688a      	ldr	r2, [r1, #8]
 8003274:	68c9      	ldr	r1, [r1, #12]
 8003276:	4332      	orrs	r2, r6
 8003278:	0209      	lsls	r1, r1, #8
 800327a:	430a      	orrs	r2, r1
 800327c:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 800327e:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003280:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8003282:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003284:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	e7af      	b.n	80031ea <HAL_TIM_ConfigClockSource+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800328a:	2610      	movs	r6, #16
 800328c:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800328e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003290:	43b0      	bics	r0, r6
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003292:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003294:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003296:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003298:	4f15      	ldr	r7, [pc, #84]	; (80032f0 <HAL_TIM_ConfigClockSource+0x140>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800329a:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800329c:	403e      	ands	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800329e:	4331      	orrs	r1, r6
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032a0:	26a0      	movs	r6, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80032a2:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80032a4:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032a6:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032a8:	43b0      	bics	r0, r6
  tmpccer |= (TIM_ICPolarity << 4U);
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 80032ae:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80032b0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032b2:	438a      	bics	r2, r1
 80032b4:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032b6:	2267      	movs	r2, #103	; 0x67
 80032b8:	e7e4      	b.n	8003284 <HAL_TIM_ConfigClockSource+0xd4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ba:	6848      	ldr	r0, [r1, #4]
 80032bc:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80032be:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c0:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032c2:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c4:	43be      	bics	r6, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032c6:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c8:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ca:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032cc:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032ce:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032d0:	260a      	movs	r6, #10
 80032d2:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 80032d4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80032d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d8:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032da:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80032dc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032de:	438a      	bics	r2, r1
 80032e0:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032e2:	2247      	movs	r2, #71	; 0x47
 80032e4:	e7ce      	b.n	8003284 <HAL_TIM_ConfigClockSource+0xd4>
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	ffff0088 	.word	0xffff0088
 80032ec:	ffff00ff 	.word	0xffff00ff
 80032f0:	ffff0fff 	.word	0xffff0fff

080032f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032f4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032f6:	0004      	movs	r4, r0
 80032f8:	2202      	movs	r2, #2
 80032fa:	3438      	adds	r4, #56	; 0x38
 80032fc:	7825      	ldrb	r5, [r4, #0]
{
 80032fe:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003300:	0010      	movs	r0, r2
 8003302:	2d01      	cmp	r5, #1
 8003304:	d013      	beq.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0x3a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003306:	001d      	movs	r5, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003308:	2670      	movs	r6, #112	; 0x70
  tmpcr2 = htim->Instance->CR2;
 800330a:	6818      	ldr	r0, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	3539      	adds	r5, #57	; 0x39
 800330e:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8003310:	6842      	ldr	r2, [r0, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003312:	6883      	ldr	r3, [r0, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003314:	43b2      	bics	r2, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003316:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003318:	6849      	ldr	r1, [r1, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800331a:	4332      	orrs	r2, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 800331c:	2680      	movs	r6, #128	; 0x80
 800331e:	43b3      	bics	r3, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003320:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003322:	6042      	str	r2, [r0, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003324:	6083      	str	r3, [r0, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003326:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003328:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800332a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800332c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800332e:	bd70      	pop	{r4, r5, r6, pc}

08003330 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	0005      	movs	r5, r0
  /* Check the UART handle allocation */
  if (huart == NULL)
  {
    return HAL_ERROR;
 8003334:	2001      	movs	r0, #1
  if (huart == NULL)
 8003336:	2d00      	cmp	r5, #0
 8003338:	d012      	beq.n	8003360 <HAL_UART_DeInit+0x30>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800333a:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 800333c:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 800333e:	676b      	str	r3, [r5, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003340:	682b      	ldr	r3, [r5, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4382      	bics	r2, r0
 8003346:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003348:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 800334a:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800334c:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800334e:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8003350:	f001 fd44 	bl	8004ddc <HAL_UART_MspDeInit>
  huart->RxState = HAL_UART_STATE_RESET;

  /* Process Unlock */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8003354:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003356:	67ec      	str	r4, [r5, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 8003358:	676c      	str	r4, [r5, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 800335a:	67ac      	str	r4, [r5, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800335c:	3570      	adds	r5, #112	; 0x70
 800335e:	702c      	strb	r4, [r5, #0]
}
 8003360:	bd70      	pop	{r4, r5, r6, pc}
	...

08003364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003368:	6925      	ldr	r5, [r4, #16]
 800336a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800336c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800336e:	432a      	orrs	r2, r5
 8003370:	6965      	ldr	r5, [r4, #20]
 8003372:	69c1      	ldr	r1, [r0, #28]
 8003374:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	4d76      	ldr	r5, [pc, #472]	; (8003554 <UART_SetConfig+0x1f0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800337a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800337c:	4028      	ands	r0, r5
 800337e:	4302      	orrs	r2, r0
 8003380:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	4874      	ldr	r0, [pc, #464]	; (8003558 <UART_SetConfig+0x1f4>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003386:	4d75      	ldr	r5, [pc, #468]	; (800355c <UART_SetConfig+0x1f8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003388:	4002      	ands	r2, r0
 800338a:	68e0      	ldr	r0, [r4, #12]
 800338c:	4302      	orrs	r2, r0
 800338e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003390:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003392:	42ab      	cmp	r3, r5
 8003394:	d001      	beq.n	800339a <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003396:	6a22      	ldr	r2, [r4, #32]
 8003398:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4e70      	ldr	r6, [pc, #448]	; (8003560 <UART_SetConfig+0x1fc>)
 800339e:	4032      	ands	r2, r6
 80033a0:	4302      	orrs	r2, r0
 80033a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033a4:	4a6f      	ldr	r2, [pc, #444]	; (8003564 <UART_SetConfig+0x200>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d114      	bne.n	80033d4 <UART_SetConfig+0x70>
 80033aa:	200c      	movs	r0, #12
 80033ac:	4b6e      	ldr	r3, [pc, #440]	; (8003568 <UART_SetConfig+0x204>)
 80033ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033b0:	4002      	ands	r2, r0
 80033b2:	486e      	ldr	r0, [pc, #440]	; (800356c <UART_SetConfig+0x208>)
 80033b4:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b6:	2280      	movs	r2, #128	; 0x80
 80033b8:	0212      	lsls	r2, r2, #8
 80033ba:	4291      	cmp	r1, r2
 80033bc:	d000      	beq.n	80033c0 <UART_SetConfig+0x5c>
 80033be:	e08b      	b.n	80034d8 <UART_SetConfig+0x174>
  {
    switch (clocksource)
 80033c0:	2808      	cmp	r0, #8
 80033c2:	d900      	bls.n	80033c6 <UART_SetConfig+0x62>
 80033c4:	e085      	b.n	80034d2 <UART_SetConfig+0x16e>
 80033c6:	f7fc fe9f 	bl	8000108 <__gnu_thumb1_case_uqi>
 80033ca:	5850      	.short	0x5850
 80033cc:	847c845b 	.word	0x847c845b
 80033d0:	8484      	.short	0x8484
 80033d2:	7f          	.byte	0x7f
 80033d3:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033d4:	42ab      	cmp	r3, r5
 80033d6:	d000      	beq.n	80033da <UART_SetConfig+0x76>
 80033d8:	e0b4      	b.n	8003544 <UART_SetConfig+0x1e0>
 80033da:	21c0      	movs	r1, #192	; 0xc0
 80033dc:	2080      	movs	r0, #128	; 0x80
 80033de:	4a62      	ldr	r2, [pc, #392]	; (8003568 <UART_SetConfig+0x204>)
 80033e0:	0109      	lsls	r1, r1, #4
 80033e2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80033e4:	00c0      	lsls	r0, r0, #3
 80033e6:	400b      	ands	r3, r1
 80033e8:	4283      	cmp	r3, r0
 80033ea:	d03b      	beq.n	8003464 <UART_SetConfig+0x100>
 80033ec:	d803      	bhi.n	80033f6 <UART_SetConfig+0x92>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <UART_SetConfig+0xa4>
        ret = HAL_ERROR;
 80033f2:	2501      	movs	r5, #1
 80033f4:	e00d      	b.n	8003412 <UART_SetConfig+0xae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033f6:	2080      	movs	r0, #128	; 0x80
 80033f8:	0100      	lsls	r0, r0, #4
 80033fa:	4283      	cmp	r3, r0
 80033fc:	d00e      	beq.n	800341c <UART_SetConfig+0xb8>
 80033fe:	428b      	cmp	r3, r1
 8003400:	d1f7      	bne.n	80033f2 <UART_SetConfig+0x8e>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003402:	2080      	movs	r0, #128	; 0x80
 8003404:	0200      	lsls	r0, r0, #8
 8003406:	e010      	b.n	800342a <UART_SetConfig+0xc6>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003408:	f7ff fc7c 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 800340c:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 800340e:	42a8      	cmp	r0, r5
 8003410:	d10b      	bne.n	800342a <UART_SetConfig+0xc6>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003412:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 8003414:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 8003416:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003418:	6663      	str	r3, [r4, #100]	; 0x64
}
 800341a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800341c:	6810      	ldr	r0, [r2, #0]
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800341e:	4b54      	ldr	r3, [pc, #336]	; (8003570 <UART_SetConfig+0x20c>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003420:	06c0      	lsls	r0, r0, #27
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003422:	17c0      	asrs	r0, r0, #31
 8003424:	4018      	ands	r0, r3
 8003426:	4b53      	ldr	r3, [pc, #332]	; (8003574 <UART_SetConfig+0x210>)
 8003428:	18c0      	adds	r0, r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800342a:	2203      	movs	r2, #3
 800342c:	6863      	ldr	r3, [r4, #4]
 800342e:	435a      	muls	r2, r3
 8003430:	4282      	cmp	r2, r0
 8003432:	d8de      	bhi.n	80033f2 <UART_SetConfig+0x8e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003434:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003436:	4282      	cmp	r2, r0
 8003438:	d3db      	bcc.n	80033f2 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800343a:	2700      	movs	r7, #0
 800343c:	0e02      	lsrs	r2, r0, #24
 800343e:	0201      	lsls	r1, r0, #8
 8003440:	085e      	lsrs	r6, r3, #1
 8003442:	1989      	adds	r1, r1, r6
 8003444:	417a      	adcs	r2, r7
 8003446:	0008      	movs	r0, r1
 8003448:	0011      	movs	r1, r2
 800344a:	001a      	movs	r2, r3
 800344c:	003b      	movs	r3, r7
 800344e:	f7fc ff2b 	bl	80002a8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003452:	4b49      	ldr	r3, [pc, #292]	; (8003578 <UART_SetConfig+0x214>)
 8003454:	18c2      	adds	r2, r0, r3
 8003456:	4b49      	ldr	r3, [pc, #292]	; (800357c <UART_SetConfig+0x218>)
 8003458:	429a      	cmp	r2, r3
 800345a:	d8ca      	bhi.n	80033f2 <UART_SetConfig+0x8e>
          huart->Instance->BRR = usartdiv;
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	003d      	movs	r5, r7
 8003460:	60d8      	str	r0, [r3, #12]
 8003462:	e7d6      	b.n	8003412 <UART_SetConfig+0xae>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003464:	f7ff f904 	bl	8002670 <HAL_RCC_GetSysClockFreq>
        break;
 8003468:	e7d0      	b.n	800340c <UART_SetConfig+0xa8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800346a:	f7ff fc4b 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800346e:	6863      	ldr	r3, [r4, #4]
 8003470:	0040      	lsls	r0, r0, #1
 8003472:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003474:	18c0      	adds	r0, r0, r3
 8003476:	6861      	ldr	r1, [r4, #4]
 8003478:	e00b      	b.n	8003492 <UART_SetConfig+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800347a:	f7ff fc53 	bl	8002d24 <HAL_RCC_GetPCLK2Freq>
 800347e:	e7f6      	b.n	800346e <UART_SetConfig+0x10a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003480:	2510      	movs	r5, #16
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	6861      	ldr	r1, [r4, #4]
 8003486:	4015      	ands	r5, r2
 8003488:	0848      	lsrs	r0, r1, #1
 800348a:	2d00      	cmp	r5, #0
 800348c:	d006      	beq.n	800349c <UART_SetConfig+0x138>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800348e:	4b3c      	ldr	r3, [pc, #240]	; (8003580 <UART_SetConfig+0x21c>)
 8003490:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003492:	f7fc fe43 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8003496:	2500      	movs	r5, #0
 8003498:	b283      	uxth	r3, r0
        break;
 800349a:	e004      	b.n	80034a6 <UART_SetConfig+0x142>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800349c:	4b39      	ldr	r3, [pc, #228]	; (8003584 <UART_SetConfig+0x220>)
 800349e:	18c0      	adds	r0, r0, r3
 80034a0:	f7fc fe3c 	bl	800011c <__udivsi3>
 80034a4:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a6:	0019      	movs	r1, r3
 80034a8:	4837      	ldr	r0, [pc, #220]	; (8003588 <UART_SetConfig+0x224>)
 80034aa:	3910      	subs	r1, #16
 80034ac:	4281      	cmp	r1, r0
 80034ae:	d8a0      	bhi.n	80033f2 <UART_SetConfig+0x8e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034b0:	210f      	movs	r1, #15
 80034b2:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034b4:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034b6:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034b8:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 80034ba:	6821      	ldr	r1, [r4, #0]
 80034bc:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 80034be:	60cb      	str	r3, [r1, #12]
 80034c0:	e7a7      	b.n	8003412 <UART_SetConfig+0xae>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034c2:	f7ff f8d5 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 80034c6:	e7d2      	b.n	800346e <UART_SetConfig+0x10a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034c8:	6863      	ldr	r3, [r4, #4]
 80034ca:	0858      	lsrs	r0, r3, #1
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	025b      	lsls	r3, r3, #9
 80034d0:	e7d0      	b.n	8003474 <UART_SetConfig+0x110>
        ret = HAL_ERROR;
 80034d2:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e7e6      	b.n	80034a6 <UART_SetConfig+0x142>
    switch (clocksource)
 80034d8:	2808      	cmp	r0, #8
 80034da:	d837      	bhi.n	800354c <UART_SetConfig+0x1e8>
 80034dc:	f7fc fe14 	bl	8000108 <__gnu_thumb1_case_uqi>
 80034e0:	360f0c05 	.word	0x360f0c05
 80034e4:	3636362a 	.word	0x3636362a
 80034e8:	2d          	.byte	0x2d
 80034e9:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80034ea:	f7ff fc0b 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034ee:	6863      	ldr	r3, [r4, #4]
 80034f0:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80034f2:	18c0      	adds	r0, r0, r3
 80034f4:	6861      	ldr	r1, [r4, #4]
 80034f6:	e00b      	b.n	8003510 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80034f8:	f7ff fc14 	bl	8002d24 <HAL_RCC_GetPCLK2Freq>
 80034fc:	e7f7      	b.n	80034ee <UART_SetConfig+0x18a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034fe:	2510      	movs	r5, #16
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	6861      	ldr	r1, [r4, #4]
 8003504:	4015      	ands	r5, r2
 8003506:	0848      	lsrs	r0, r1, #1
 8003508:	2d00      	cmp	r5, #0
 800350a:	d00d      	beq.n	8003528 <UART_SetConfig+0x1c4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800350c:	4b1f      	ldr	r3, [pc, #124]	; (800358c <UART_SetConfig+0x228>)
 800350e:	18c0      	adds	r0, r0, r3
 8003510:	f7fc fe04 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8003514:	2500      	movs	r5, #0
 8003516:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003518:	0019      	movs	r1, r3
 800351a:	481b      	ldr	r0, [pc, #108]	; (8003588 <UART_SetConfig+0x224>)
 800351c:	3910      	subs	r1, #16
 800351e:	4281      	cmp	r1, r0
 8003520:	d900      	bls.n	8003524 <UART_SetConfig+0x1c0>
 8003522:	e766      	b.n	80033f2 <UART_SetConfig+0x8e>
      huart->Instance->BRR = usartdiv;
 8003524:	6821      	ldr	r1, [r4, #0]
 8003526:	e7ca      	b.n	80034be <UART_SetConfig+0x15a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003528:	4b12      	ldr	r3, [pc, #72]	; (8003574 <UART_SetConfig+0x210>)
 800352a:	18c0      	adds	r0, r0, r3
 800352c:	f7fc fdf6 	bl	800011c <__udivsi3>
 8003530:	b283      	uxth	r3, r0
 8003532:	e7f1      	b.n	8003518 <UART_SetConfig+0x1b4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003534:	f7ff f89c 	bl	8002670 <HAL_RCC_GetSysClockFreq>
 8003538:	e7d9      	b.n	80034ee <UART_SetConfig+0x18a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800353a:	6863      	ldr	r3, [r4, #4]
 800353c:	0858      	lsrs	r0, r3, #1
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	e7d6      	b.n	80034f2 <UART_SetConfig+0x18e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	4299      	cmp	r1, r3
 800354a:	d0c2      	beq.n	80034d2 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 800354c:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 800354e:	2300      	movs	r3, #0
 8003550:	e7e2      	b.n	8003518 <UART_SetConfig+0x1b4>
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	efff69f3 	.word	0xefff69f3
 8003558:	ffffcfff 	.word	0xffffcfff
 800355c:	40004800 	.word	0x40004800
 8003560:	fffff4ff 	.word	0xfffff4ff
 8003564:	40004400 	.word	0x40004400
 8003568:	40021000 	.word	0x40021000
 800356c:	08005e00 	.word	0x08005e00
 8003570:	ff48e500 	.word	0xff48e500
 8003574:	00f42400 	.word	0x00f42400
 8003578:	fffffd00 	.word	0xfffffd00
 800357c:	000ffcff 	.word	0x000ffcff
 8003580:	007a1200 	.word	0x007a1200
 8003584:	01e84800 	.word	0x01e84800
 8003588:	0000ffef 	.word	0x0000ffef
 800358c:	003d0900 	.word	0x003d0900

08003590 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003590:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003592:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003594:	07da      	lsls	r2, r3, #31
 8003596:	d506      	bpl.n	80035a6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003598:	6801      	ldr	r1, [r0, #0]
 800359a:	4c28      	ldr	r4, [pc, #160]	; (800363c <UART_AdvFeatureConfig+0xac>)
 800359c:	684a      	ldr	r2, [r1, #4]
 800359e:	4022      	ands	r2, r4
 80035a0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80035a2:	4322      	orrs	r2, r4
 80035a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035a6:	079a      	lsls	r2, r3, #30
 80035a8:	d506      	bpl.n	80035b8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035aa:	6801      	ldr	r1, [r0, #0]
 80035ac:	4c24      	ldr	r4, [pc, #144]	; (8003640 <UART_AdvFeatureConfig+0xb0>)
 80035ae:	684a      	ldr	r2, [r1, #4]
 80035b0:	4022      	ands	r2, r4
 80035b2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80035b4:	4322      	orrs	r2, r4
 80035b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035b8:	075a      	lsls	r2, r3, #29
 80035ba:	d506      	bpl.n	80035ca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035bc:	6801      	ldr	r1, [r0, #0]
 80035be:	4c21      	ldr	r4, [pc, #132]	; (8003644 <UART_AdvFeatureConfig+0xb4>)
 80035c0:	684a      	ldr	r2, [r1, #4]
 80035c2:	4022      	ands	r2, r4
 80035c4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80035c6:	4322      	orrs	r2, r4
 80035c8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035ca:	071a      	lsls	r2, r3, #28
 80035cc:	d506      	bpl.n	80035dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ce:	6801      	ldr	r1, [r0, #0]
 80035d0:	4c1d      	ldr	r4, [pc, #116]	; (8003648 <UART_AdvFeatureConfig+0xb8>)
 80035d2:	684a      	ldr	r2, [r1, #4]
 80035d4:	4022      	ands	r2, r4
 80035d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80035d8:	4322      	orrs	r2, r4
 80035da:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035dc:	06da      	lsls	r2, r3, #27
 80035de:	d506      	bpl.n	80035ee <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035e0:	6801      	ldr	r1, [r0, #0]
 80035e2:	4c1a      	ldr	r4, [pc, #104]	; (800364c <UART_AdvFeatureConfig+0xbc>)
 80035e4:	688a      	ldr	r2, [r1, #8]
 80035e6:	4022      	ands	r2, r4
 80035e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80035ea:	4322      	orrs	r2, r4
 80035ec:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ee:	069a      	lsls	r2, r3, #26
 80035f0:	d506      	bpl.n	8003600 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035f2:	6801      	ldr	r1, [r0, #0]
 80035f4:	4c16      	ldr	r4, [pc, #88]	; (8003650 <UART_AdvFeatureConfig+0xc0>)
 80035f6:	688a      	ldr	r2, [r1, #8]
 80035f8:	4022      	ands	r2, r4
 80035fa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80035fc:	4322      	orrs	r2, r4
 80035fe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003600:	065a      	lsls	r2, r3, #25
 8003602:	d510      	bpl.n	8003626 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003604:	6801      	ldr	r1, [r0, #0]
 8003606:	4d13      	ldr	r5, [pc, #76]	; (8003654 <UART_AdvFeatureConfig+0xc4>)
 8003608:	684a      	ldr	r2, [r1, #4]
 800360a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800360c:	402a      	ands	r2, r5
 800360e:	4322      	orrs	r2, r4
 8003610:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003612:	2280      	movs	r2, #128	; 0x80
 8003614:	0352      	lsls	r2, r2, #13
 8003616:	4294      	cmp	r4, r2
 8003618:	d105      	bne.n	8003626 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800361a:	684a      	ldr	r2, [r1, #4]
 800361c:	4c0e      	ldr	r4, [pc, #56]	; (8003658 <UART_AdvFeatureConfig+0xc8>)
 800361e:	4022      	ands	r2, r4
 8003620:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003622:	4322      	orrs	r2, r4
 8003624:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	d506      	bpl.n	8003638 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800362a:	6802      	ldr	r2, [r0, #0]
 800362c:	490b      	ldr	r1, [pc, #44]	; (800365c <UART_AdvFeatureConfig+0xcc>)
 800362e:	6853      	ldr	r3, [r2, #4]
 8003630:	400b      	ands	r3, r1
 8003632:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003634:	430b      	orrs	r3, r1
 8003636:	6053      	str	r3, [r2, #4]
  }
}
 8003638:	bd30      	pop	{r4, r5, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	fffdffff 	.word	0xfffdffff
 8003640:	fffeffff 	.word	0xfffeffff
 8003644:	fffbffff 	.word	0xfffbffff
 8003648:	ffff7fff 	.word	0xffff7fff
 800364c:	ffffefff 	.word	0xffffefff
 8003650:	ffffdfff 	.word	0xffffdfff
 8003654:	ffefffff 	.word	0xffefffff
 8003658:	ff9fffff 	.word	0xff9fffff
 800365c:	fff7ffff 	.word	0xfff7ffff

08003660 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003662:	0004      	movs	r4, r0
 8003664:	000e      	movs	r6, r1
 8003666:	0015      	movs	r5, r2
 8003668:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366a:	6822      	ldr	r2, [r4, #0]
 800366c:	69d3      	ldr	r3, [r2, #28]
 800366e:	4033      	ands	r3, r6
 8003670:	1b9b      	subs	r3, r3, r6
 8003672:	4259      	negs	r1, r3
 8003674:	414b      	adcs	r3, r1
 8003676:	42ab      	cmp	r3, r5
 8003678:	d001      	beq.n	800367e <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800367a:	2000      	movs	r0, #0
 800367c:	e01b      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800367e:	9b06      	ldr	r3, [sp, #24]
 8003680:	3301      	adds	r3, #1
 8003682:	d0f3      	beq.n	800366c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003684:	f7fe f912 	bl	80018ac <HAL_GetTick>
 8003688:	9b06      	ldr	r3, [sp, #24]
 800368a:	1bc0      	subs	r0, r0, r7
 800368c:	4298      	cmp	r0, r3
 800368e:	d801      	bhi.n	8003694 <UART_WaitOnFlagUntilTimeout+0x34>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ea      	bne.n	800366a <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	4908      	ldr	r1, [pc, #32]	; (80036b8 <UART_WaitOnFlagUntilTimeout+0x58>)
 8003698:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800369a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800369c:	400a      	ands	r2, r1
 800369e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	31a3      	adds	r1, #163	; 0xa3
 80036a4:	31ff      	adds	r1, #255	; 0xff
 80036a6:	438a      	bics	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80036aa:	2320      	movs	r3, #32
 80036ac:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80036ae:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80036b0:	2300      	movs	r3, #0
 80036b2:	3470      	adds	r4, #112	; 0x70
 80036b4:	7023      	strb	r3, [r4, #0]
}
 80036b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b8:	fffffe5f 	.word	0xfffffe5f

080036bc <UART_CheckIdleState>:
{
 80036bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036be:	2600      	movs	r6, #0
{
 80036c0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c2:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80036c4:	f7fe f8f2 	bl	80018ac <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036c8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80036ca:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	071b      	lsls	r3, r3, #28
 80036d0:	d415      	bmi.n	80036fe <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	075b      	lsls	r3, r3, #29
 80036d8:	d50a      	bpl.n	80036f0 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <UART_CheckIdleState+0x5c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	03c9      	lsls	r1, r1, #15
 80036e4:	002b      	movs	r3, r5
 80036e6:	0020      	movs	r0, r4
 80036e8:	f7ff ffba 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 80036ec:	2800      	cmp	r0, #0
 80036ee:	d111      	bne.n	8003714 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80036f0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80036f2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80036f4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80036f6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80036f8:	3470      	adds	r4, #112	; 0x70
 80036fa:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80036fc:	e00b      	b.n	8003716 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036fe:	2180      	movs	r1, #128	; 0x80
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <UART_CheckIdleState+0x5c>)
 8003702:	0032      	movs	r2, r6
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	0389      	lsls	r1, r1, #14
 8003708:	0003      	movs	r3, r0
 800370a:	0020      	movs	r0, r4
 800370c:	f7ff ffa8 	bl	8003660 <UART_WaitOnFlagUntilTimeout>
 8003710:	2800      	cmp	r0, #0
 8003712:	d0de      	beq.n	80036d2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003714:	2003      	movs	r0, #3
}
 8003716:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003718:	01ffffff 	.word	0x01ffffff

0800371c <HAL_HalfDuplex_Init>:
{
 800371c:	b510      	push	{r4, lr}
 800371e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003720:	d101      	bne.n	8003726 <HAL_HalfDuplex_Init+0xa>
    return HAL_ERROR;
 8003722:	2001      	movs	r0, #1
}
 8003724:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003726:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003728:	2b00      	cmp	r3, #0
 800372a:	d104      	bne.n	8003736 <HAL_HalfDuplex_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800372c:	0002      	movs	r2, r0
 800372e:	3270      	adds	r2, #112	; 0x70
 8003730:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003732:	f001 fb09 	bl	8004d48 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003736:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003738:	2101      	movs	r1, #1
 800373a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800373c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800373e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003740:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003742:	438b      	bics	r3, r1
 8003744:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003746:	f7ff fe0d 	bl	8003364 <UART_SetConfig>
 800374a:	2801      	cmp	r0, #1
 800374c:	d0e9      	beq.n	8003722 <HAL_HalfDuplex_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800374e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_HalfDuplex_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8003754:	0020      	movs	r0, r4
 8003756:	f7ff ff1b 	bl	8003590 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	4909      	ldr	r1, [pc, #36]	; (8003784 <HAL_HalfDuplex_Init+0x68>)
 800375e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003760:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003762:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003764:	2122      	movs	r1, #34	; 0x22
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003766:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	438a      	bics	r2, r1
 800376c:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800376e:	2208      	movs	r2, #8
 8003770:	6899      	ldr	r1, [r3, #8]
 8003772:	430a      	orrs	r2, r1
 8003774:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003776:	2201      	movs	r2, #1
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800377e:	f7ff ff9d 	bl	80036bc <UART_CheckIdleState>
 8003782:	e7cf      	b.n	8003724 <HAL_HalfDuplex_Init+0x8>
 8003784:	ffffb7ff 	.word	0xffffb7ff

08003788 <sleepMS.part.0>:
/* USER CODE BEGIN 0 */

// ***********************************************************************************************************************
void sleepMS(unsigned long miliseconds) {														// rough calibration (i.e. not precise!)
	if (miliseconds) {
		for ( ; miliseconds; miliseconds--) {
 8003788:	2800      	cmp	r0, #0
 800378a:	d100      	bne.n	800378e <sleepMS.part.0+0x6>
#else
			for (unsigned long t=0; t<(5470); t++) { asm volatile ("nop"); }
#endif
		}
	}
}
 800378c:	4770      	bx	lr
		for ( ; miliseconds; miliseconds--) {
 800378e:	4b03      	ldr	r3, [pc, #12]	; (800379c <sleepMS.part.0+0x14>)
			for (unsigned long t=0; t<(5470); t++) { asm volatile ("nop"); }
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	3b01      	subs	r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1fb      	bne.n	8003790 <sleepMS.part.0+0x8>
		for ( ; miliseconds; miliseconds--) {
 8003798:	3801      	subs	r0, #1
 800379a:	e7f5      	b.n	8003788 <sleepMS.part.0>
 800379c:	0000155e 	.word	0x0000155e

080037a0 <sleepMS>:
void sleepMS(unsigned long miliseconds) {														// rough calibration (i.e. not precise!)
 80037a0:	b510      	push	{r4, lr}
	if (miliseconds) {
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d001      	beq.n	80037aa <sleepMS+0xa>
 80037a6:	f7ff ffef 	bl	8003788 <sleepMS.part.0>
}
 80037aa:	bd10      	pop	{r4, pc}

080037ac <identifyServoID>:
	// 10K	-> AD = 910			-> ID = 3;
	// 100K	-> AD = 3033		-> ID = 4;

	long r, dummy;

	__HAL_RCC_ADC1_CLK_ENABLE();
 80037ac:	2380      	movs	r3, #128	; 0x80
 80037ae:	4a24      	ldr	r2, [pc, #144]	; (8003840 <identifyServoID+0x94>)
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	6b51      	ldr	r1, [r2, #52]	; 0x34
void identifyServoID(void) {
 80037b4:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_ADC1_CLK_ENABLE();
 80037b6:	430b      	orrs	r3, r1

	ADC1->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);						// Clear the old sampling time
 80037b8:	2107      	movs	r1, #7
	__HAL_RCC_ADC1_CLK_ENABLE();
 80037ba:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);						// Clear the old sampling time
 80037bc:	4b21      	ldr	r3, [pc, #132]	; (8003844 <identifyServoID+0x98>)
	ADC1->SMPR |= ADC_SAMPLETIME_79CYCLES_5;						// Set the new sample time (4 = 79.5 cycles)

	HAL_ADC_Start(&hadc);										// start the on-chip ADC converter		// this will read VSupply
 80037be:	4c22      	ldr	r4, [pc, #136]	; (8003848 <identifyServoID+0x9c>)
	ADC1->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);						// Clear the old sampling time
 80037c0:	695a      	ldr	r2, [r3, #20]
	HAL_ADC_Start(&hadc);										// start the on-chip ADC converter		// this will read VSupply
 80037c2:	0020      	movs	r0, r4
	ADC1->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);						// Clear the old sampling time
 80037c4:	438a      	bics	r2, r1
 80037c6:	615a      	str	r2, [r3, #20]
	ADC1->SMPR |= ADC_SAMPLETIME_79CYCLES_5;						// Set the new sample time (4 = 79.5 cycles)
 80037c8:	2206      	movs	r2, #6
 80037ca:	6959      	ldr	r1, [r3, #20]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	615a      	str	r2, [r3, #20]
	HAL_ADC_Start(&hadc);										// start the on-chip ADC converter		// this will read VSupply
 80037d0:	f7fe fa4a 	bl	8001c68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);						// timeout in ms
 80037d4:	210a      	movs	r1, #10
 80037d6:	0020      	movs	r0, r4
 80037d8:	f7fe fa90 	bl	8001cfc <HAL_ADC_PollForConversion>
	r = HAL_ADC_GetValue(&hadc);
 80037dc:	0020      	movs	r0, r4
 80037de:	f7fe faeb 	bl	8001db8 <HAL_ADC_GetValue>

	HAL_ADC_Start(&hadc);										// start the on-chip ADC converter		// this will read ServoID
 80037e2:	0020      	movs	r0, r4
 80037e4:	f7fe fa40 	bl	8001c68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);						// timeout in ms
 80037e8:	210a      	movs	r1, #10
 80037ea:	0020      	movs	r0, r4
 80037ec:	f7fe fa86 	bl	8001cfc <HAL_ADC_PollForConversion>
	r = HAL_ADC_GetValue(&hadc);
 80037f0:	0020      	movs	r0, r4
 80037f2:	f7fe fae1 	bl	8001db8 <HAL_ADC_GetValue>
 80037f6:	0005      	movs	r5, r0

	HAL_ADC_Start(&hadc);										// start the on-chip ADC converter		// this will read motorCurrent
 80037f8:	0020      	movs	r0, r4
 80037fa:	f7fe fa35 	bl	8001c68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 10);						// timeout in ms
 80037fe:	210a      	movs	r1, #10
 8003800:	0020      	movs	r0, r4
 8003802:	f7fe fa7b 	bl	8001cfc <HAL_ADC_PollForConversion>
	dummy = HAL_ADC_GetValue(&hadc);
 8003806:	0020      	movs	r0, r4
 8003808:	f7fe fad6 	bl	8001db8 <HAL_ADC_GetValue>
	dummy++;													// (use dummy, so the compilation warning goes)

	if		(r > 4000)		SERVO_ID = 0;
 800380c:	22fa      	movs	r2, #250	; 0xfa
 800380e:	4b0f      	ldr	r3, [pc, #60]	; (800384c <identifyServoID+0xa0>)
 8003810:	0112      	lsls	r2, r2, #4
 8003812:	4295      	cmp	r5, r2
 8003814:	dd02      	ble.n	800381c <identifyServoID+0x70>
 8003816:	2200      	movs	r2, #0
	else if	(r < 50)		SERVO_ID = 1;
	else if	(r < 510)		SERVO_ID = 2;
	else if	(r < 1970)		SERVO_ID = 3;
	else					SERVO_ID = 4;
 8003818:	601a      	str	r2, [r3, #0]

}
 800381a:	bd70      	pop	{r4, r5, r6, pc}
	else if	(r < 50)		SERVO_ID = 1;
 800381c:	2201      	movs	r2, #1
 800381e:	2d31      	cmp	r5, #49	; 0x31
 8003820:	ddfa      	ble.n	8003818 <identifyServoID+0x6c>
	else if	(r < 510)		SERVO_ID = 2;
 8003822:	22fe      	movs	r2, #254	; 0xfe
 8003824:	32ff      	adds	r2, #255	; 0xff
 8003826:	4295      	cmp	r5, r2
 8003828:	dc02      	bgt.n	8003830 <identifyServoID+0x84>
 800382a:	3afc      	subs	r2, #252	; 0xfc
 800382c:	3aff      	subs	r2, #255	; 0xff
 800382e:	e7f3      	b.n	8003818 <identifyServoID+0x6c>
	else if	(r < 1970)		SERVO_ID = 3;
 8003830:	4a07      	ldr	r2, [pc, #28]	; (8003850 <identifyServoID+0xa4>)
 8003832:	4295      	cmp	r5, r2
 8003834:	dc01      	bgt.n	800383a <identifyServoID+0x8e>
 8003836:	2203      	movs	r2, #3
 8003838:	e7ee      	b.n	8003818 <identifyServoID+0x6c>
	else					SERVO_ID = 4;
 800383a:	2204      	movs	r2, #4
 800383c:	e7ec      	b.n	8003818 <identifyServoID+0x6c>
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	40021000 	.word	0x40021000
 8003844:	40012400 	.word	0x40012400
 8003848:	200003f0 	.word	0x200003f0
 800384c:	20000214 	.word	0x20000214
 8003850:	000007b1 	.word	0x000007b1

08003854 <enterBootLoader>:

	return;
}

// ***********************************************************************************************************************
void enterBootLoader(void) {
 8003854:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef pinDefBL;

	__HAL_RCC_GPIOA_CLK_ENABLE();		// needed for PA2+3 (UART2 TX+RX) + motor-control
 8003856:	2401      	movs	r4, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();		// needed for motor-control
 8003858:	2002      	movs	r0, #2
	__HAL_RCC_GPIOC_CLK_DISABLE();		// not needed
 800385a:	2504      	movs	r5, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();		// needed for PA2+3 (UART2 TX+RX) + motor-control
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <enterBootLoader+0x98>)
void enterBootLoader(void) {
 800385e:	b089      	sub	sp, #36	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();		// needed for PA2+3 (UART2 TX+RX) + motor-control
 8003860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
void enterBootLoader(void) {
 8003862:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// needed for PA2+3 (UART2 TX+RX) + motor-control
 8003864:	4322      	orrs	r2, r4
 8003866:	62da      	str	r2, [r3, #44]	; 0x2c
 8003868:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	pinDefBL.Pin = (GPIO_PIN_8);						// configure PA8 as input with pullup (to switch off motor)
	pinDefBL.Mode = GPIO_MODE_INPUT;
 800386a:	2600      	movs	r6, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// needed for PA2+3 (UART2 TX+RX) + motor-control
 800386c:	4022      	ands	r2, r4
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	687a      	ldr	r2, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();		// needed for motor-control
 8003872:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003874:	4301      	orrs	r1, r0
 8003876:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	4002      	ands	r2, r0
 800387c:	60ba      	str	r2, [r7, #8]
 800387e:	68ba      	ldr	r2, [r7, #8]
	__HAL_RCC_GPIOC_CLK_DISABLE();		// not needed
 8003880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pinDefBL.Pull = GPIO_PULLUP;
	pinDefBL.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(GPIOA, &pinDefBL);
 8003882:	309e      	adds	r0, #158	; 0x9e
	__HAL_RCC_GPIOC_CLK_DISABLE();		// not needed
 8003884:	43aa      	bics	r2, r5
 8003886:	62da      	str	r2, [r3, #44]	; 0x2c
	pinDefBL.Pin = (GPIO_PIN_8);						// configure PA8 as input with pullup (to switch off motor)
 8003888:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(GPIOA, &pinDefBL);
 800388a:	220c      	movs	r2, #12
	pinDefBL.Pin = (GPIO_PIN_8);						// configure PA8 as input with pullup (to switch off motor)
 800388c:	005b      	lsls	r3, r3, #1
	HAL_GPIO_Init(GPIOA, &pinDefBL);
 800388e:	18b9      	adds	r1, r7, r2
	pinDefBL.Pin = (GPIO_PIN_8);						// configure PA8 as input with pullup (to switch off motor)
 8003890:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &pinDefBL);
 8003892:	05c0      	lsls	r0, r0, #23
	pinDefBL.Speed = GPIO_SPEED_HIGH;
 8003894:	3bfd      	subs	r3, #253	; 0xfd
 8003896:	61bb      	str	r3, [r7, #24]
	pinDefBL.Mode = GPIO_MODE_INPUT;
 8003898:	613e      	str	r6, [r7, #16]
	pinDefBL.Pull = GPIO_PULLUP;
 800389a:	617c      	str	r4, [r7, #20]
	HAL_GPIO_Init(GPIOA, &pinDefBL);
 800389c:	f7fe fca4 	bl	80021e8 <HAL_GPIO_Init>

	pinDefBL.Pin = (GPIO_PIN_3);						// configure PB3 as input with pullup (to switch off motor)
	pinDefBL.Mode = GPIO_MODE_INPUT;
	pinDefBL.Pull = GPIO_PULLUP;
	pinDefBL.Speed = GPIO_SPEED_HIGH;
	HAL_GPIO_Init(GPIOB, &pinDefBL);
 80038a0:	220c      	movs	r2, #12
	pinDefBL.Pin = (GPIO_PIN_3);						// configure PB3 as input with pullup (to switch off motor)
 80038a2:	2308      	movs	r3, #8
	HAL_GPIO_Init(GPIOB, &pinDefBL);
 80038a4:	18ba      	adds	r2, r7, r2
	pinDefBL.Pin = (GPIO_PIN_3);						// configure PB3 as input with pullup (to switch off motor)
 80038a6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &pinDefBL);
 80038a8:	0011      	movs	r1, r2
	pinDefBL.Speed = GPIO_SPEED_HIGH;
 80038aa:	3b05      	subs	r3, #5
	HAL_GPIO_Init(GPIOB, &pinDefBL);
 80038ac:	4810      	ldr	r0, [pc, #64]	; (80038f0 <enterBootLoader+0x9c>)
	pinDefBL.Speed = GPIO_SPEED_HIGH;
 80038ae:	61bb      	str	r3, [r7, #24]
	pinDefBL.Mode = GPIO_MODE_INPUT;
 80038b0:	613e      	str	r6, [r7, #16]
	pinDefBL.Pull = GPIO_PULLUP;
 80038b2:	617c      	str	r4, [r7, #20]
	HAL_GPIO_Init(GPIOB, &pinDefBL);
 80038b4:	f7fe fc98 	bl	80021e8 <HAL_GPIO_Init>


	SysTick->CTRL = 0;
 80038b8:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <enterBootLoader+0xa0>)
 80038ba:	601e      	str	r6, [r3, #0]
	SysTick->LOAD = 0;
 80038bc:	605e      	str	r6, [r3, #4]
	SysTick->VAL = 0;
 80038be:	609e      	str	r6, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038c0:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80038c2:	f3bf 8f4f 	dsb	sy
	/** * Step: Disable all interrupts */
	__disable_irq();

	/* ARM Cortex-M Programming Guide to Memory Barrier Instructions.*/
	__DSB();
	__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 80038c6:	2103      	movs	r1, #3
 80038c8:	4a0b      	ldr	r2, [pc, #44]	; (80038f8 <enterBootLoader+0xa4>)
 80038ca:	6813      	ldr	r3, [r2, #0]
 80038cc:	438b      	bics	r3, r1
 80038ce:	431c      	orrs	r4, r3
 80038d0:	6014      	str	r4, [r2, #0]
 80038d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80038d6:	f3bf 8f6f 	isb	sy
//	/* Initialize user application's Stack Pointer */
//	__set_MSP(*(__IO uint32_t*) 0x1FFF0000);
//	JumpToApplication();


    __ASM volatile ("movs r3, #0\nldr r3, [r3, #0]\nMSR msp, r3\n" : : : "r3", "sp");
 80038da:	2300      	movs	r3, #0
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f383 8808 	msr	MSP, r3

    ((void (*)(void)) *((uint32_t*) 0x00000004))();
 80038e2:	682b      	ldr	r3, [r5, #0]
 80038e4:	4798      	blx	r3

}
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b009      	add	sp, #36	; 0x24
 80038ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ec:	40021000 	.word	0x40021000
 80038f0:	50000400 	.word	0x50000400
 80038f4:	e000e010 	.word	0xe000e010
 80038f8:	40010000 	.word	0x40010000

080038fc <stopAndEnterBootLoader>:

// ***********************************************************************************************************************
void stopAndEnterBootLoader(void) {
 80038fc:	b510      	push	{r4, lr}
	HAL_DMA_DeInit(&hdma_usart2_rx);
 80038fe:	4812      	ldr	r0, [pc, #72]	; (8003948 <stopAndEnterBootLoader+0x4c>)
 8003900:	f7fe fbc6 	bl	8002090 <HAL_DMA_DeInit>

//	HAL_IW
	HAL_ADC_DeInit(&hadc);
 8003904:	4811      	ldr	r0, [pc, #68]	; (800394c <stopAndEnterBootLoader+0x50>)
 8003906:	f7fe f95b 	bl	8001bc0 <HAL_ADC_DeInit>
	HAL_UART_DeInit(&huart2);
 800390a:	4811      	ldr	r0, [pc, #68]	; (8003950 <stopAndEnterBootLoader+0x54>)
 800390c:	f7ff fd10 	bl	8003330 <HAL_UART_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 8003910:	4810      	ldr	r0, [pc, #64]	; (8003954 <stopAndEnterBootLoader+0x58>)
 8003912:	f7ff fb59 	bl	8002fc8 <HAL_TIM_Base_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 8003916:	4810      	ldr	r0, [pc, #64]	; (8003958 <stopAndEnterBootLoader+0x5c>)
 8003918:	f7fe fddc 	bl	80024d4 <HAL_I2C_DeInit>

	HAL_RCC_DeInit();
 800391c:	f7fe fe3e 	bl	800259c <HAL_RCC_DeInit>

	HAL_GPIO_DeInit(GPIOA, 0xFFFF);		// set all pins to default values
 8003920:	20a0      	movs	r0, #160	; 0xa0
 8003922:	4c0e      	ldr	r4, [pc, #56]	; (800395c <stopAndEnterBootLoader+0x60>)
 8003924:	05c0      	lsls	r0, r0, #23
 8003926:	0021      	movs	r1, r4
 8003928:	f7fe fd0a 	bl	8002340 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOB, 0xFFFF);		// set all pins to default values
 800392c:	0021      	movs	r1, r4
 800392e:	480c      	ldr	r0, [pc, #48]	; (8003960 <stopAndEnterBootLoader+0x64>)
 8003930:	f7fe fd06 	bl	8002340 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(GPIOC, 0xFFFF);		// set all pins to default values
 8003934:	0021      	movs	r1, r4
 8003936:	480b      	ldr	r0, [pc, #44]	; (8003964 <stopAndEnterBootLoader+0x68>)
 8003938:	f7fe fd02 	bl	8002340 <HAL_GPIO_DeInit>

    HAL_DeInit();
 800393c:	f7fd ff6e 	bl	800181c <HAL_DeInit>

    enterBootLoader();
 8003940:	f7ff ff88 	bl	8003854 <enterBootLoader>
}
 8003944:	bd10      	pop	{r4, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	20000260 	.word	0x20000260
 800394c:	200003f0 	.word	0x200003f0
 8003950:	20000370 	.word	0x20000370
 8003954:	20000334 	.word	0x20000334
 8003958:	200002a8 	.word	0x200002a8
 800395c:	0000ffff 	.word	0x0000ffff
 8003960:	50000400 	.word	0x50000400
 8003964:	50000800 	.word	0x50000800

08003968 <setLED>:

// ***********************************************************************************************************************
inline void setLED(long onFlag, long brightness) {
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <setLED+0x30>)

	if (onFlag) {
 800396a:	2800      	cmp	r0, #0
 800396c:	d00a      	beq.n	8003984 <setLED+0x1c>
		ledCounterInit = 1;			// const on (ok, toggling at 1ms -> 500Hz)
 800396e:	2201      	movs	r2, #1
 8003970:	480a      	ldr	r0, [pc, #40]	; (800399c <setLED+0x34>)
		ledCounter = 1;
 8003972:	601a      	str	r2, [r3, #0]
		ledCounterInit = 1;			// const on (ok, toggling at 1ms -> 500Hz)
 8003974:	6002      	str	r2, [r0, #0]
		PORTA->CLR = PORTA_LED_K;
		TIM22->CCR1 = 0;
	}

	ledBrightness = brightness;
	if (ledBrightness > 1000) ledBrightness = 1000;
 8003976:	22fa      	movs	r2, #250	; 0xfa
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <setLED+0x38>)
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	4291      	cmp	r1, r2
 800397e:	dc08      	bgt.n	8003992 <setLED+0x2a>
	ledBrightness = brightness;
 8003980:	6019      	str	r1, [r3, #0]
}
 8003982:	4770      	bx	lr
		PORTA->CLR = PORTA_LED_K;
 8003984:	2280      	movs	r2, #128	; 0x80
		ledCounter = 0;				// const off
 8003986:	6018      	str	r0, [r3, #0]
		PORTA->CLR = PORTA_LED_K;
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <setLED+0x3c>)
 800398a:	815a      	strh	r2, [r3, #10]
		TIM22->CCR1 = 0;
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <setLED+0x40>)
 800398e:	6358      	str	r0, [r3, #52]	; 0x34
 8003990:	e7f1      	b.n	8003976 <setLED+0xe>
	if (ledBrightness > 1000) ledBrightness = 1000;
 8003992:	601a      	str	r2, [r3, #0]
}
 8003994:	e7f5      	b.n	8003982 <setLED+0x1a>
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	20000004 	.word	0x20000004
 800399c:	20000008 	.word	0x20000008
 80039a0:	20000000 	.word	0x20000000
 80039a4:	50000010 	.word	0x50000010
 80039a8:	40011400 	.word	0x40011400

080039ac <setLEDBlink>:

// ***********************************************************************************************************************
inline void setLEDBlink(long periodeMS, long brightness) {
	ledCounterInit = periodeMS;					// this is used both for on and off
	ledCounter = 1;
 80039ac:	2201      	movs	r2, #1
	ledCounterInit = periodeMS;					// this is used both for on and off
 80039ae:	4b06      	ldr	r3, [pc, #24]	; (80039c8 <setLEDBlink+0x1c>)
 80039b0:	6018      	str	r0, [r3, #0]
	ledCounter = 1;
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <setLEDBlink+0x20>)
 80039b4:	601a      	str	r2, [r3, #0]

	ledBrightness = brightness;
	if (ledBrightness > 1000) ledBrightness = 1000;
 80039b6:	22fa      	movs	r2, #250	; 0xfa
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <setLEDBlink+0x24>)
 80039ba:	0092      	lsls	r2, r2, #2
 80039bc:	4291      	cmp	r1, r2
 80039be:	dc01      	bgt.n	80039c4 <setLEDBlink+0x18>
	ledBrightness = brightness;
 80039c0:	6019      	str	r1, [r3, #0]
}
 80039c2:	4770      	bx	lr
	if (ledBrightness > 1000) ledBrightness = 1000;
 80039c4:	601a      	str	r2, [r3, #0]
}
 80039c6:	e7fc      	b.n	80039c2 <setLEDBlink+0x16>
 80039c8:	20000008 	.word	0x20000008
 80039cc:	20000004 	.word	0x20000004
 80039d0:	20000000 	.word	0x20000000

080039d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039d4:	b530      	push	{r4, r5, lr}
 80039d6:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039d8:	2220      	movs	r2, #32
 80039da:	2100      	movs	r1, #0
 80039dc:	a80c      	add	r0, sp, #48	; 0x30
 80039de:	f001 ff7f 	bl	80058e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039e2:	2214      	movs	r2, #20
 80039e4:	2100      	movs	r1, #0
 80039e6:	4668      	mov	r0, sp
 80039e8:	f001 ff7a 	bl	80058e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039ec:	2218      	movs	r2, #24
 80039ee:	2100      	movs	r1, #0
 80039f0:	a805      	add	r0, sp, #20
 80039f2:	f001 ff75 	bl	80058e0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039f6:	4917      	ldr	r1, [pc, #92]	; (8003a54 <SystemClock_Config+0x80>)
 80039f8:	4a17      	ldr	r2, [pc, #92]	; (8003a58 <SystemClock_Config+0x84>)
 80039fa:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039fc:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039fe:	401a      	ands	r2, r3
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a0c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	02db      	lsls	r3, r3, #11
 8003a12:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003a14:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a16:	2210      	movs	r2, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a18:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003a1a:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a1c:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a1e:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003a20:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a22:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a24:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a26:	f7fe fe63 	bl	80026f0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a2a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a2c:	0029      	movs	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a2e:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a30:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a32:	3b0c      	subs	r3, #12
 8003a34:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a36:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a38:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a3a:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003a3c:	f7ff f8aa 	bl	8002b94 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003a40:	230a      	movs	r3, #10
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a42:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003a44:	9305      	str	r3, [sp, #20]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8003a46:	3b06      	subs	r3, #6
 8003a48:	9307      	str	r3, [sp, #28]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003a4a:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a4c:	f7ff f97a 	bl	8002d44 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8003a50:	b019      	add	sp, #100	; 0x64
 8003a52:	bd30      	pop	{r4, r5, pc}
 8003a54:	40007000 	.word	0x40007000
 8003a58:	ffffe7ff 	.word	0xffffe7ff

08003a5c <main>:
{
 8003a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((RCC->CSR) & BIT(29)) {		// are we waking up from a IWDG reset?
 8003a5e:	4dfd      	ldr	r5, [pc, #1012]	; (8003e54 <main+0x3f8>)
{
 8003a60:	b093      	sub	sp, #76	; 0x4c
	if ((RCC->CSR) & BIT(29)) {		// are we waking up from a IWDG reset?
 8003a62:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	d537      	bpl.n	8003ad8 <main+0x7c>
		RCC->CSR |= BIT(23);		// clear reset flags (memory of reset source) (so next time we're not ending here)
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6c:	2401      	movs	r4, #1
		RCC->CSR |= BIT(23);		// clear reset flags (memory of reset source) (so next time we're not ending here)
 8003a6e:	041b      	lsls	r3, r3, #16
 8003a70:	4313      	orrs	r3, r2
 8003a72:	652b      	str	r3, [r5, #80]	; 0x50
		HAL_Init();
 8003a74:	f7fd fefe 	bl	8001874 <HAL_Init>
		SystemClock_Config();
 8003a78:	f7ff ffac 	bl	80039d4 <SystemClock_Config>
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7c:	2214      	movs	r2, #20
 8003a7e:	2100      	movs	r1, #0
 8003a80:	a80d      	add	r0, sp, #52	; 0x34
 8003a82:	f001 ff2d 	bl	80058e0 <memset>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003a86:	20a0      	movs	r0, #160	; 0xa0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003a88:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003a8a:	2200      	movs	r2, #0
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8c:	4323      	orrs	r3, r4
 8003a8e:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003a90:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003a92:	2180      	movs	r1, #128	; 0x80
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003a94:	4023      	ands	r3, r4
 8003a96:	9302      	str	r3, [sp, #8]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003a98:	05c0      	lsls	r0, r0, #23
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9a:	9b02      	ldr	r3, [sp, #8]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8003a9c:	f7fe fcbe 	bl	800241c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8003aa0:	20a0      	movs	r0, #160	; 0xa0
 8003aa2:	0022      	movs	r2, r4
 8003aa4:	2140      	movs	r1, #64	; 0x40
 8003aa6:	05c0      	lsls	r0, r0, #23
 8003aa8:	f7fe fcb8 	bl	800241c <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003aac:	23c0      	movs	r3, #192	; 0xc0
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aae:	20a0      	movs	r0, #160	; 0xa0
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8003ab0:	930d      	str	r3, [sp, #52]	; 0x34
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab2:	2300      	movs	r3, #0
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab4:	a90d      	add	r1, sp, #52	; 0x34
 8003ab6:	05c0      	lsls	r0, r0, #23
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	930f      	str	r3, [sp, #60]	; 0x3c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aba:	9310      	str	r3, [sp, #64]	; 0x40
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003abc:	940e      	str	r4, [sp, #56]	; 0x38
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003abe:	f7fe fb93 	bl	80021e8 <HAL_GPIO_Init>
		PORTA->SET = BIT(6);
 8003ac2:	2340      	movs	r3, #64	; 0x40
 8003ac4:	20fa      	movs	r0, #250	; 0xfa
 8003ac6:	4ae4      	ldr	r2, [pc, #912]	; (8003e58 <main+0x3fc>)
 8003ac8:	0040      	lsls	r0, r0, #1
 8003aca:	8113      	strh	r3, [r2, #8]
		PORTA->CLR = BIT(7);
 8003acc:	18db      	adds	r3, r3, r3
 8003ace:	8153      	strh	r3, [r2, #10]
 8003ad0:	f7ff fe5a 	bl	8003788 <sleepMS.part.0>
		enterBootLoader();			// start boot loader, so we can update software if needed!
 8003ad4:	f7ff febe 	bl	8003854 <enterBootLoader>
  HAL_Init();
 8003ad8:	f7fd fecc 	bl	8001874 <HAL_Init>
  SystemClock_Config();
 8003adc:	f7ff ff7a 	bl	80039d4 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae0:	2214      	movs	r2, #20
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	a80d      	add	r0, sp, #52	; 0x34
 8003ae6:	f001 fefb 	bl	80058e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aea:	2204      	movs	r2, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aec:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aee:	2102      	movs	r1, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8003af0:	2480      	movs	r4, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8003af4:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003af6:	4313      	orrs	r3, r2
 8003af8:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003afa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8003afc:	48d7      	ldr	r0, [pc, #860]	; (8003e5c <main+0x400>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003afe:	4013      	ands	r3, r2
 8003b00:	9304      	str	r3, [sp, #16]
 8003b02:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8003b06:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b08:	4333      	orrs	r3, r6
 8003b0a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003b0c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003b0e:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b10:	4033      	ands	r3, r6
 8003b12:	9305      	str	r3, [sp, #20]
 8003b14:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b16:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003b18:	05ff      	lsls	r7, r7, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003b1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003b20:	400b      	ands	r3, r1
 8003b22:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8003b24:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b26:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8003b28:	f7fe fc78 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8003b2c:	20a0      	movs	r0, #160	; 0xa0
 8003b2e:	0032      	movs	r2, r6
 8003b30:	2180      	movs	r1, #128	; 0x80
 8003b32:	05c0      	lsls	r0, r0, #23
 8003b34:	f7fe fc72 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003b38:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3a:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b3c:	ab0d      	add	r3, sp, #52	; 0x34
 8003b3e:	0019      	movs	r1, r3
 8003b40:	48c6      	ldr	r0, [pc, #792]	; (8003e5c <main+0x400>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b42:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b48:	f7fe fb4e 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b4c:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b4e:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b50:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b52:	ab0d      	add	r3, sp, #52	; 0x34
 8003b54:	0019      	movs	r1, r3
 8003b56:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b58:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5a:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5c:	f7fe fb44 	bl	80021e8 <HAL_GPIO_Init>
  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b60:	a80d      	add	r0, sp, #52	; 0x34
 8003b62:	0001      	movs	r1, r0
 8003b64:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b66:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b68:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b6a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b6c:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6e:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b70:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b72:	f7fe fb39 	bl	80021e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b76:	a80d      	add	r0, sp, #52	; 0x34
 8003b78:	0001      	movs	r1, r0
 8003b7a:	48b9      	ldr	r0, [pc, #740]	; (8003e60 <main+0x404>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b7c:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b7e:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b80:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b82:	f7fe fb31 	bl	80021e8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003b88:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b8a:	4333      	orrs	r3, r6
 8003b8c:	632b      	str	r3, [r5, #48]	; 0x30
 8003b8e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003b90:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b92:	4033      	ands	r3, r6
 8003b94:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003b96:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b98:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003b9a:	f7fe f9e7 	bl	8001f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003b9e:	200b      	movs	r0, #11
 8003ba0:	f7fe fa0e 	bl	8001fc0 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 8003ba4:	0021      	movs	r1, r4
 8003ba6:	2208      	movs	r2, #8
 8003ba8:	a80d      	add	r0, sp, #52	; 0x34
 8003baa:	f001 fe99 	bl	80058e0 <memset>
  hadc.Instance = ADC1;
 8003bae:	4dad      	ldr	r5, [pc, #692]	; (8003e64 <main+0x408>)
 8003bb0:	4bad      	ldr	r3, [pc, #692]	; (8003e68 <main+0x40c>)
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003bb2:	0028      	movs	r0, r5
  hadc.Instance = ADC1;
 8003bb4:	602b      	str	r3, [r5, #0]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8003bb6:	2306      	movs	r3, #6
 8003bb8:	63ab      	str	r3, [r5, #56]	; 0x38
  hadc.Init.ContinuousConvMode = DISABLE;
 8003bba:	19ab      	adds	r3, r5, r6
 8003bbc:	77dc      	strb	r4, [r3, #31]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8003bbe:	1cab      	adds	r3, r5, #2
 8003bc0:	77de      	strb	r6, [r3, #31]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bc2:	23c2      	movs	r3, #194	; 0xc2
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bc4:	2204      	movs	r2, #4
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003bc6:	302c      	adds	r0, #44	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bc8:	33ff      	adds	r3, #255	; 0xff
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003bca:	7004      	strb	r4, [r0, #0]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003bcc:	0028      	movs	r0, r5
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bce:	616a      	str	r2, [r5, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bd0:	626b      	str	r3, [r5, #36]	; 0x24
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003bd2:	606f      	str	r7, [r5, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003bd4:	612e      	str	r6, [r5, #16]
  hadc.Init.OversamplingMode = DISABLE;
 8003bd6:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003bd8:	60ac      	str	r4, [r5, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bda:	60ec      	str	r4, [r5, #12]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003bdc:	62ac      	str	r4, [r5, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003bde:	632c      	str	r4, [r5, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003be0:	61ac      	str	r4, [r5, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003be2:	636c      	str	r4, [r5, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003be4:	61ec      	str	r4, [r5, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003be6:	f7fd ff13 	bl	8001a10 <HAL_ADC_Init>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003bea:	2080      	movs	r0, #128	; 0x80
 8003bec:	0140      	lsls	r0, r0, #5
 8003bee:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003bf0:	a90d      	add	r1, sp, #52	; 0x34
 8003bf2:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_0;
 8003bf4:	960d      	str	r6, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003bf6:	f7fe f8e3 	bl	8001dc0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_1;
 8003bfa:	4b9c      	ldr	r3, [pc, #624]	; (8003e6c <main+0x410>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003bfc:	a90d      	add	r1, sp, #52	; 0x34
 8003bfe:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8003c00:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c02:	f7fe f8dd 	bl	8001dc0 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_5;
 8003c06:	4b9a      	ldr	r3, [pc, #616]	; (8003e70 <main+0x414>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c08:	a90d      	add	r1, sp, #52	; 0x34
 8003c0a:	0028      	movs	r0, r5
  sConfig.Channel = ADC_CHANNEL_5;
 8003c0c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003c0e:	f7fe f8d7 	bl	8001dc0 <HAL_ADC_ConfigChannel>
  huart2.Instance = USART2;
 8003c12:	4898      	ldr	r0, [pc, #608]	; (8003e74 <main+0x418>)
  huart2.Init.BaudRate = 1000000;
 8003c14:	4b98      	ldr	r3, [pc, #608]	; (8003e78 <main+0x41c>)
  huart2.Instance = USART2;
 8003c16:	4e99      	ldr	r6, [pc, #612]	; (8003e7c <main+0x420>)
  huart2.Init.BaudRate = 1000000;
 8003c18:	6043      	str	r3, [r0, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c1a:	230c      	movs	r3, #12
  huart2.Instance = USART2;
 8003c1c:	6006      	str	r6, [r0, #0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c1e:	6143      	str	r3, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c20:	6084      	str	r4, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c22:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c24:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c26:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c28:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c2a:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c2c:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8003c2e:	f7ff fd75 	bl	800371c <HAL_HalfDuplex_Init>
  hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c32:	2380      	movs	r3, #128	; 0x80
  hdma_usart2_rx.Instance = DMA1_Channel5;
 8003c34:	4e92      	ldr	r6, [pc, #584]	; (8003e80 <main+0x424>)
 8003c36:	4a93      	ldr	r2, [pc, #588]	; (8003e84 <main+0x428>)
  hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c38:	6133      	str	r3, [r6, #16]
  hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003c3a:	3b60      	subs	r3, #96	; 0x60
 8003c3c:	61f3      	str	r3, [r6, #28]
  hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c3e:	2380      	movs	r3, #128	; 0x80
  hdma_usart2_rx.Instance = DMA1_Channel5;
 8003c40:	6032      	str	r2, [r6, #0]
  hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8003c42:	2204      	movs	r2, #4
  hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c44:	019b      	lsls	r3, r3, #6
  HAL_DMA_Init(&hdma_usart2_rx);								// initialize DMA
 8003c46:	0030      	movs	r0, r6
  hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8003c48:	6072      	str	r2, [r6, #4]
  hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003c4a:	6233      	str	r3, [r6, #32]
  hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c4c:	60b4      	str	r4, [r6, #8]
  hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c4e:	60f4      	str	r4, [r6, #12]
  hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c50:	6174      	str	r4, [r6, #20]
  hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c52:	61b4      	str	r4, [r6, #24]
  HAL_DMA_Init(&hdma_usart2_rx);								// initialize DMA
 8003c54:	f7fe f9d8 	bl	8002008 <HAL_DMA_Init>
  USART2->CR3 |= USART_CR3_DMAR;						// enable UART2 receive DMA
 8003c58:	2340      	movs	r3, #64	; 0x40
 8003c5a:	4888      	ldr	r0, [pc, #544]	; (8003e7c <main+0x420>)
  HAL_DMA_Start(&hdma_usart2_rx, (uint32_t)(&(USART2->RDR)), (uint32_t) uartRXBufferDMA, UART_BUFFER_SIZE);		// start continuous ring buffer DMA transfer from UART3 -> U3_RX_BUFFER
 8003c5c:	498a      	ldr	r1, [pc, #552]	; (8003e88 <main+0x42c>)
  USART2->CR3 |= USART_CR3_DMAR;						// enable UART2 receive DMA
 8003c5e:	6882      	ldr	r2, [r0, #8]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	6083      	str	r3, [r0, #8]
  HAL_DMA_Start(&hdma_usart2_rx, (uint32_t)(&(USART2->RDR)), (uint32_t) uartRXBufferDMA, UART_BUFFER_SIZE);		// start continuous ring buffer DMA transfer from UART3 -> U3_RX_BUFFER
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	4a89      	ldr	r2, [pc, #548]	; (8003e8c <main+0x430>)
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	0030      	movs	r0, r6
 8003c6c:	f7fe fa40 	bl	80020f0 <HAL_DMA_Start>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c70:	2210      	movs	r2, #16
 8003c72:	0021      	movs	r1, r4
 8003c74:	a809      	add	r0, sp, #36	; 0x24
 8003c76:	f001 fe33 	bl	80058e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	0021      	movs	r1, r4
 8003c7e:	a807      	add	r0, sp, #28
 8003c80:	f001 fe2e 	bl	80058e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c84:	2210      	movs	r2, #16
 8003c86:	0021      	movs	r1, r4
 8003c88:	a80d      	add	r0, sp, #52	; 0x34
 8003c8a:	f001 fe29 	bl	80058e0 <memset>
  htim2.Init.Prescaler = 2;
 8003c8e:	2102      	movs	r1, #2
  htim2.Instance = TIM2;
 8003c90:	4e7f      	ldr	r6, [pc, #508]	; (8003e90 <main+0x434>)
  htim2.Init.Period = 4095;
 8003c92:	4b80      	ldr	r3, [pc, #512]	; (8003e94 <main+0x438>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c94:	0030      	movs	r0, r6
  htim2.Init.Period = 4095;
 8003c96:	60f3      	str	r3, [r6, #12]
  htim2.Instance = TIM2;
 8003c98:	6037      	str	r7, [r6, #0]
  htim2.Init.Prescaler = 2;
 8003c9a:	6071      	str	r1, [r6, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c9c:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c9e:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ca0:	6174      	str	r4, [r6, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ca2:	f7ff f976 	bl	8002f92 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ca6:	2080      	movs	r0, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ca8:	af09      	add	r7, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003caa:	0140      	lsls	r0, r0, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003cac:	0039      	movs	r1, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cae:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003cb0:	0030      	movs	r0, r6
 8003cb2:	f7ff fa7d 	bl	80031b0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cb6:	af07      	add	r7, sp, #28
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003cb8:	0030      	movs	r0, r6
 8003cba:	f7ff f9c4 	bl	8003046 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cbe:	0039      	movs	r1, r7
 8003cc0:	0030      	movs	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cc2:	2760      	movs	r7, #96	; 0x60
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cc4:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cc6:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cc8:	f7ff fb14 	bl	80032f4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003ccc:	2204      	movs	r2, #4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cce:	970d      	str	r7, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cd0:	af0d      	add	r7, sp, #52	; 0x34
 8003cd2:	0039      	movs	r1, r7
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003cd4:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cd6:	0030      	movs	r0, r6
 8003cd8:	0022      	movs	r2, r4
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cda:	af0d      	add	r7, sp, #52	; 0x34
  sConfigOC.Pulse = 0;
 8003cdc:	940e      	str	r4, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cde:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ce0:	f7ff f9d0 	bl	8003084 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	0039      	movs	r1, r7
 8003ce8:	0030      	movs	r0, r6
 8003cea:	f7ff f9cb 	bl	8003084 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8003cee:	0030      	movs	r0, r6
 8003cf0:	f000 ffb6 	bl	8004c60 <HAL_TIM_MspPostInit>
  hi2c1.Instance = I2C1;
 8003cf4:	4e68      	ldr	r6, [pc, #416]	; (8003e98 <main+0x43c>)
 8003cf6:	4b69      	ldr	r3, [pc, #420]	; (8003e9c <main+0x440>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003cf8:	0030      	movs	r0, r6
  hi2c1.Instance = I2C1;
 8003cfa:	6033      	str	r3, [r6, #0]
  hi2c1.Init.Timing = 0x0030152D;
 8003cfc:	4b68      	ldr	r3, [pc, #416]	; (8003ea0 <main+0x444>)
  hi2c1.Init.OwnAddress1 = 0;
 8003cfe:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x0030152D;
 8003d00:	6073      	str	r3, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d02:	2301      	movs	r3, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d04:	6134      	str	r4, [r6, #16]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d06:	60f3      	str	r3, [r6, #12]
  hi2c1.Init.OwnAddress2 = 0;
 8003d08:	6174      	str	r4, [r6, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d0a:	61b4      	str	r4, [r6, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d0c:	61f4      	str	r4, [r6, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d0e:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d10:	f7fe fb8a 	bl	8002428 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d14:	0021      	movs	r1, r4
 8003d16:	0030      	movs	r0, r6
 8003d18:	f7fe fbf6 	bl	8002508 <HAL_I2CEx_ConfigAnalogFilter>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d1c:	af0d      	add	r7, sp, #52	; 0x34
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d1e:	0021      	movs	r1, r4
 8003d20:	0030      	movs	r0, r6
 8003d22:	f7fe fc17 	bl	8002554 <HAL_I2CEx_ConfigDigitalFilter>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d26:	2210      	movs	r2, #16
 8003d28:	0021      	movs	r1, r4
 8003d2a:	0038      	movs	r0, r7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d2c:	af09      	add	r7, sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d2e:	f001 fdd7 	bl	80058e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d32:	2208      	movs	r2, #8
 8003d34:	0021      	movs	r1, r4
 8003d36:	0038      	movs	r0, r7
 8003d38:	f001 fdd2 	bl	80058e0 <memset>
  htim21.Init.Prescaler = 32000;
 8003d3c:	23fa      	movs	r3, #250	; 0xfa
  htim21.Instance = TIM21;
 8003d3e:	4f59      	ldr	r7, [pc, #356]	; (8003ea4 <main+0x448>)
  htim21.Init.Prescaler = 32000;
 8003d40:	01db      	lsls	r3, r3, #7
 8003d42:	607b      	str	r3, [r7, #4]
  htim21.Instance = TIM21;
 8003d44:	4e58      	ldr	r6, [pc, #352]	; (8003ea8 <main+0x44c>)
  htim21.Init.Period = 65535;
 8003d46:	4b59      	ldr	r3, [pc, #356]	; (8003eac <main+0x450>)
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8003d48:	0038      	movs	r0, r7
  htim21.Instance = TIM21;
 8003d4a:	603e      	str	r6, [r7, #0]
  htim21.Init.Period = 65535;
 8003d4c:	60fb      	str	r3, [r7, #12]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d4e:	60bc      	str	r4, [r7, #8]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d50:	613c      	str	r4, [r7, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d52:	617c      	str	r4, [r7, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8003d54:	f7ff f91d 	bl	8002f92 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d58:	2080      	movs	r0, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003d5a:	ab0d      	add	r3, sp, #52	; 0x34
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d5c:	0140      	lsls	r0, r0, #5
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003d5e:	0019      	movs	r1, r3
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d60:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003d62:	0038      	movs	r0, r7
 8003d64:	f7ff fa24 	bl	80031b0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003d68:	ab09      	add	r3, sp, #36	; 0x24
 8003d6a:	0019      	movs	r1, r3
 8003d6c:	0038      	movs	r0, r7
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d6e:	9409      	str	r4, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d70:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003d72:	f7ff fabf 	bl	80032f4 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d76:	2210      	movs	r2, #16
 8003d78:	0021      	movs	r1, r4
 8003d7a:	a809      	add	r0, sp, #36	; 0x24
 8003d7c:	f001 fdb0 	bl	80058e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d80:	2208      	movs	r2, #8
 8003d82:	0021      	movs	r1, r4
 8003d84:	a807      	add	r0, sp, #28
 8003d86:	f001 fdab 	bl	80058e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	0021      	movs	r1, r4
 8003d8e:	a80d      	add	r0, sp, #52	; 0x34
 8003d90:	f001 fda6 	bl	80058e0 <memset>
  htim22.Instance = TIM22;
 8003d94:	4e46      	ldr	r6, [pc, #280]	; (8003eb0 <main+0x454>)
 8003d96:	4b47      	ldr	r3, [pc, #284]	; (8003eb4 <main+0x458>)
  htim22.Init.Prescaler = 2;
 8003d98:	2102      	movs	r1, #2
  htim22.Instance = TIM22;
 8003d9a:	6033      	str	r3, [r6, #0]
  htim22.Init.Period = 1000;
 8003d9c:	23fa      	movs	r3, #250	; 0xfa
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8003d9e:	0030      	movs	r0, r6
  htim22.Init.Period = 1000;
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	60f3      	str	r3, [r6, #12]
  htim22.Init.Prescaler = 2;
 8003da4:	6071      	str	r1, [r6, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003da6:	60b4      	str	r4, [r6, #8]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003da8:	6134      	str	r4, [r6, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003daa:	6174      	str	r4, [r6, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8003dac:	f7ff f8f1 	bl	8002f92 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003db0:	2080      	movs	r0, #128	; 0x80
 8003db2:	0140      	lsls	r0, r0, #5
 8003db4:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8003db6:	a809      	add	r0, sp, #36	; 0x24
 8003db8:	0001      	movs	r1, r0
 8003dba:	0030      	movs	r0, r6
 8003dbc:	f7ff f9f8 	bl	80031b0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8003dc0:	0030      	movs	r0, r6
 8003dc2:	f7ff f940 	bl	8003046 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8003dc6:	a807      	add	r0, sp, #28
 8003dc8:	0001      	movs	r1, r0
 8003dca:	0030      	movs	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dcc:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dce:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8003dd0:	f7ff fa90 	bl	80032f4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003dd4:	2160      	movs	r1, #96	; 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003dd6:	2204      	movs	r2, #4
  sConfigOC.Pulse = 100;
 8003dd8:	2364      	movs	r3, #100	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dda:	a80d      	add	r0, sp, #52	; 0x34
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ddc:	910d      	str	r1, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003dde:	9210      	str	r2, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003de0:	0001      	movs	r1, r0
 8003de2:	0022      	movs	r2, r4
 8003de4:	0030      	movs	r0, r6
  sConfigOC.Pulse = 100;
 8003de6:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003de8:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003dea:	f7ff f94b 	bl	8003084 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim22);
 8003dee:	0030      	movs	r0, r6
 8003df0:	f000 ff36 	bl	8004c60 <HAL_TIM_MspPostInit>
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8003df4:	0021      	movs	r1, r4
 8003df6:	0028      	movs	r0, r5
 8003df8:	f7fe f836 	bl	8001e68 <HAL_ADCEx_Calibration_Start>
  long ADCcal = HAL_ADCEx_Calibration_GetValue(&hadc, ADC_SINGLE_ENDED);
 8003dfc:	0021      	movs	r1, r4
 8003dfe:	0028      	movs	r0, r5
 8003e00:	f7fe f882 	bl	8001f08 <HAL_ADCEx_Calibration_GetValue>
  HAL_ADCEx_Calibration_SetValue(&hadc, ADC_SINGLE_ENDED, ADCcal);
 8003e04:	0021      	movs	r1, r4
  long ADCcal = HAL_ADCEx_Calibration_GetValue(&hadc, ADC_SINGLE_ENDED);
 8003e06:	0002      	movs	r2, r0
  HAL_ADCEx_Calibration_SetValue(&hadc, ADC_SINGLE_ENDED, ADCcal);
 8003e08:	0028      	movs	r0, r5
 8003e0a:	f7fe f883 	bl	8001f14 <HAL_ADCEx_Calibration_SetValue>
  identifyServoID();
 8003e0e:	f7ff fccd 	bl	80037ac <identifyServoID>
  sensorsInit();
 8003e12:	f000 fb85 	bl	8004520 <sensorsInit>
  motorControlInit();
 8003e16:	f000 f8eb 	bl	8003ff0 <motorControlInit>
  TIM21->CNT = 0;								// set timer to zero
 8003e1a:	4923      	ldr	r1, [pc, #140]	; (8003ea8 <main+0x44c>)
  systemTimeMS = 0;								// set System Time Variable to zero
 8003e1c:	4d26      	ldr	r5, [pc, #152]	; (8003eb8 <main+0x45c>)
  TIM21->CNT = 0;								// set timer to zero
 8003e1e:	624c      	str	r4, [r1, #36]	; 0x24
  HAL_TIM_Base_Start(&htim21);
 8003e20:	0038      	movs	r0, r7
  systemTimeMS = 0;								// set System Time Variable to zero
 8003e22:	602c      	str	r4, [r5, #0]
  HAL_TIM_Base_Start(&htim21);
 8003e24:	f7ff f8ea 	bl	8002ffc <HAL_TIM_Base_Start>
  TIM22->CNT = 0;								// set timer to zero
 8003e28:	4922      	ldr	r1, [pc, #136]	; (8003eb4 <main+0x458>)
  HAL_TIM_Base_Start(&htim22);
 8003e2a:	0030      	movs	r0, r6
  TIM22->CNT = 0;								// set timer to zero
 8003e2c:	624c      	str	r4, [r1, #36]	; 0x24
  HAL_TIM_Base_Start(&htim22);
 8003e2e:	f7ff f8e5 	bl	8002ffc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_1);	// start PWM output
 8003e32:	0021      	movs	r1, r4
 8003e34:	0030      	movs	r0, r6
 8003e36:	f7ff f921 	bl	800307c <HAL_TIM_PWM_Start>
  PORTA->CLR = PORTA_LED_K;						// set LED pin to GND		--- all LED off
 8003e3a:	2280      	movs	r2, #128	; 0x80
	ledCounterInit = periodeMS;					// this is used both for on and off
 8003e3c:	23fa      	movs	r3, #250	; 0xfa
  PORTA->CLR = PORTA_LED_K;						// set LED pin to GND		--- all LED off
 8003e3e:	4906      	ldr	r1, [pc, #24]	; (8003e58 <main+0x3fc>)
	ledCounter = 1;
 8003e40:	2601      	movs	r6, #1
  PORTA->CLR = PORTA_LED_K;						// set LED pin to GND		--- all LED off
 8003e42:	814a      	strh	r2, [r1, #10]
	ledCounterInit = periodeMS;					// this is used both for on and off
 8003e44:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <main+0x460>)
 8003e46:	4f1b      	ldr	r7, [pc, #108]	; (8003eb4 <main+0x458>)
 8003e48:	6013      	str	r3, [r2, #0]
	ledBrightness = brightness;
 8003e4a:	2232      	movs	r2, #50	; 0x32
	ledCounter = 1;
 8003e4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <main+0x464>)
 8003e4e:	601e      	str	r6, [r3, #0]
 8003e50:	e038      	b.n	8003ec4 <main+0x468>
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	40021000 	.word	0x40021000
 8003e58:	50000010 	.word	0x50000010
 8003e5c:	50000800 	.word	0x50000800
 8003e60:	50000400 	.word	0x50000400
 8003e64:	200003f0 	.word	0x200003f0
 8003e68:	40012400 	.word	0x40012400
 8003e6c:	04000002 	.word	0x04000002
 8003e70:	14000020 	.word	0x14000020
 8003e74:	20000370 	.word	0x20000370
 8003e78:	000f4240 	.word	0x000f4240
 8003e7c:	40004400 	.word	0x40004400
 8003e80:	20000260 	.word	0x20000260
 8003e84:	40020058 	.word	0x40020058
 8003e88:	40004424 	.word	0x40004424
 8003e8c:	20000500 	.word	0x20000500
 8003e90:	20000334 	.word	0x20000334
 8003e94:	00000fff 	.word	0x00000fff
 8003e98:	200002a8 	.word	0x200002a8
 8003e9c:	40005400 	.word	0x40005400
 8003ea0:	0030152d 	.word	0x0030152d
 8003ea4:	2000044c 	.word	0x2000044c
 8003ea8:	40010800 	.word	0x40010800
 8003eac:	0000ffff 	.word	0x0000ffff
 8003eb0:	200002f8 	.word	0x200002f8
 8003eb4:	40011400 	.word	0x40011400
 8003eb8:	200002f4 	.word	0x200002f4
 8003ebc:	20000008 	.word	0x20000008
 8003ec0:	20000004 	.word	0x20000004
	ledBrightness = brightness;
 8003ec4:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <main+0x548>)
 8003ec6:	4e38      	ldr	r6, [pc, #224]	; (8003fa8 <main+0x54c>)
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	4b38      	ldr	r3, [pc, #224]	; (8003fac <main+0x550>)
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	4b38      	ldr	r3, [pc, #224]	; (8003fb0 <main+0x554>)
 8003ed0:	9301      	str	r3, [sp, #4]
	  IWDG_CLEAR();																		// clear watchdog, assuming all well :)
 8003ed2:	4b38      	ldr	r3, [pc, #224]	; (8003fb4 <main+0x558>)
 8003ed4:	4a38      	ldr	r2, [pc, #224]	; (8003fb8 <main+0x55c>)
 8003ed6:	601a      	str	r2, [r3, #0]
	  if ((systemTimeMS & 0xFFFF) != (TIM21->CNT)) {									// check if (1ms) has elapsed
 8003ed8:	9a01      	ldr	r2, [sp, #4]
 8003eda:	682b      	ldr	r3, [r5, #0]
 8003edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ede:	b299      	uxth	r1, r3
 8003ee0:	4291      	cmp	r1, r2
 8003ee2:	d01c      	beq.n	8003f1e <main+0x4c2>
		  if (ledCounter>0) {															// LED blinking
 8003ee4:	4a35      	ldr	r2, [pc, #212]	; (8003fbc <main+0x560>)
		  systemTimeMS++;																	// advance MS system time
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	602b      	str	r3, [r5, #0]
		  if (ledCounter>0) {															// LED blinking
 8003eea:	6813      	ldr	r3, [r2, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	dd14      	ble.n	8003f1a <main+0x4be>
			  if ((--ledCounter) == 0) {
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d110      	bne.n	8003f1a <main+0x4be>
				  ledCounter = ledCounterInit;
 8003ef8:	4931      	ldr	r1, [pc, #196]	; (8003fc0 <main+0x564>)
 8003efa:	6809      	ldr	r1, [r1, #0]
 8003efc:	6011      	str	r1, [r2, #0]
 8003efe:	4a29      	ldr	r2, [pc, #164]	; (8003fa4 <main+0x548>)
 8003f00:	2180      	movs	r1, #128	; 0x80
 8003f02:	6810      	ldr	r0, [r2, #0]
				  if (ledOnFlag) {										// here the PCBWays LED is on
 8003f04:	4a2f      	ldr	r2, [pc, #188]	; (8003fc4 <main+0x568>)
 8003f06:	6814      	ldr	r4, [r2, #0]
 8003f08:	2c00      	cmp	r4, #0
 8003f0a:	d031      	beq.n	8003f70 <main+0x514>
					  PORTA->SET = PORTA_LED_K;							// set LED pin to GND		-- PCBWAYS
 8003f0c:	4c2e      	ldr	r4, [pc, #184]	; (8003fc8 <main+0x56c>)
 8003f0e:	8121      	strh	r1, [r4, #8]
					  TIM22->CCR1 = 1000-ledBrightness;
 8003f10:	21fa      	movs	r1, #250	; 0xfa
 8003f12:	0089      	lsls	r1, r1, #2
 8003f14:	1a09      	subs	r1, r1, r0
 8003f16:	6379      	str	r1, [r7, #52]	; 0x34
					  ledOnFlag = 1;
 8003f18:	6013      	str	r3, [r2, #0]
		  motorControlIterate1KHz();															// run motor control at 1 KHz
 8003f1a:	f000 f8c1 	bl	80040a0 <motorControlIterate1KHz>
	  UART2_BytesAvailable = (-((DMA1_Channel5->CNDTR) + uartRXReadPointer)) & (UART_BUFFER_MASK);
 8003f1e:	9b00      	ldr	r3, [sp, #0]
 8003f20:	4a2a      	ldr	r2, [pc, #168]	; (8003fcc <main+0x570>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	189b      	adds	r3, r3, r2
 8003f28:	22ff      	movs	r2, #255	; 0xff
 8003f2a:	425b      	negs	r3, r3
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	4a28      	ldr	r2, [pc, #160]	; (8003fd0 <main+0x574>)
			  uartRXDiscardCounter--;
 8003f30:	6013      	str	r3, [r2, #0]
	  while (UART2_BytesAvailable) {
 8003f32:	4927      	ldr	r1, [pc, #156]	; (8003fd0 <main+0x574>)
 8003f34:	680a      	ldr	r2, [r1, #0]
 8003f36:	2a00      	cmp	r2, #0
 8003f38:	d11f      	bne.n	8003f7a <main+0x51e>
	  if (uartTXWritePointer != uartTXReadPointer) {									// UART transmit
 8003f3a:	4926      	ldr	r1, [pc, #152]	; (8003fd4 <main+0x578>)
 8003f3c:	4a26      	ldr	r2, [pc, #152]	; (8003fd8 <main+0x57c>)
 8003f3e:	680b      	ldr	r3, [r1, #0]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d011      	beq.n	8003f6a <main+0x50e>
		  if ((USART2->ISR) & BIT(7)) {
 8003f46:	69f2      	ldr	r2, [r6, #28]
 8003f48:	0612      	lsls	r2, r2, #24
 8003f4a:	d50e      	bpl.n	8003f6a <main+0x50e>
			  if (UARTOutputEnabled) {
 8003f4c:	4a23      	ldr	r2, [pc, #140]	; (8003fdc <main+0x580>)
 8003f4e:	6812      	ldr	r2, [r2, #0]
 8003f50:	2a00      	cmp	r2, #0
 8003f52:	d006      	beq.n	8003f62 <main+0x506>
				  USART2->TDR = uartTXBuffer[uartTXReadPointer];
 8003f54:	4a22      	ldr	r2, [pc, #136]	; (8003fe0 <main+0x584>)
				  uartRXDiscardCounter++;
 8003f56:	4823      	ldr	r0, [pc, #140]	; (8003fe4 <main+0x588>)
				  USART2->TDR = uartTXBuffer[uartTXReadPointer];
 8003f58:	5cd2      	ldrb	r2, [r2, r3]
 8003f5a:	62b2      	str	r2, [r6, #40]	; 0x28
				  uartRXDiscardCounter++;
 8003f5c:	6802      	ldr	r2, [r0, #0]
 8003f5e:	3201      	adds	r2, #1
 8003f60:	6002      	str	r2, [r0, #0]
			  uartTXReadPointer &= UART_BUFFER_MASK;
 8003f62:	22ff      	movs	r2, #255	; 0xff
			  uartTXReadPointer++;
 8003f64:	3301      	adds	r3, #1
			  uartTXReadPointer &= UART_BUFFER_MASK;
 8003f66:	4013      	ands	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]
	  sensorsIterate();
 8003f6a:	f000 fb17 	bl	800459c <sensorsIterate>
	  IWDG_CLEAR();																		// clear watchdog, assuming all well :)
 8003f6e:	e7b0      	b.n	8003ed2 <main+0x476>
					  PORTA->CLR = PORTA_LED_K;							// set LED pin to GND		-- HAND SOLDERED
 8003f70:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <main+0x56c>)
 8003f72:	8159      	strh	r1, [r3, #10]
					  TIM22->CCR1 = ledBrightness;
 8003f74:	6378      	str	r0, [r7, #52]	; 0x34
					  ledOnFlag = 1;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e7ce      	b.n	8003f18 <main+0x4bc>
		  char newChar = uartRXBufferDMA[uartRXReadPointer++];
 8003f7a:	4814      	ldr	r0, [pc, #80]	; (8003fcc <main+0x570>)
 8003f7c:	4c1a      	ldr	r4, [pc, #104]	; (8003fe8 <main+0x58c>)
 8003f7e:	6803      	ldr	r3, [r0, #0]
		  UART2_BytesAvailable--;
 8003f80:	3a01      	subs	r2, #1
		  char newChar = uartRXBufferDMA[uartRXReadPointer++];
 8003f82:	5ce4      	ldrb	r4, [r4, r3]
		  UART2_BytesAvailable--;
 8003f84:	600a      	str	r2, [r1, #0]
		  char newChar = uartRXBufferDMA[uartRXReadPointer++];
 8003f86:	46a4      	mov	ip, r4
		  uartRXReadPointer &= UART_BUFFER_MASK;
 8003f88:	24ff      	movs	r4, #255	; 0xff
		  char newChar = uartRXBufferDMA[uartRXReadPointer++];
 8003f8a:	3301      	adds	r3, #1
		  if (uartRXDiscardCounter) {							// is this one of the chars we sent out (ignore the echo because of one-wire transmission)
 8003f8c:	4a15      	ldr	r2, [pc, #84]	; (8003fe4 <main+0x588>)
		  uartRXReadPointer &= UART_BUFFER_MASK;
 8003f8e:	4023      	ands	r3, r4
 8003f90:	6003      	str	r3, [r0, #0]
		  if (uartRXDiscardCounter) {							// is this one of the chars we sent out (ignore the echo because of one-wire transmission)
 8003f92:	6813      	ldr	r3, [r2, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <main+0x540>
			  uartRXDiscardCounter--;
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	e7c9      	b.n	8003f30 <main+0x4d4>
			  uartReceiveChar(newChar);
 8003f9c:	4660      	mov	r0, ip
 8003f9e:	f001 fc2b 	bl	80057f8 <uartReceiveChar>
 8003fa2:	e7c6      	b.n	8003f32 <main+0x4d6>
 8003fa4:	20000000 	.word	0x20000000
 8003fa8:	40004400 	.word	0x40004400
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	40010800 	.word	0x40010800
 8003fb4:	40003000 	.word	0x40003000
 8003fb8:	0000aaaa 	.word	0x0000aaaa
 8003fbc:	20000004 	.word	0x20000004
 8003fc0:	20000008 	.word	0x20000008
 8003fc4:	2000021c 	.word	0x2000021c
 8003fc8:	50000010 	.word	0x50000010
 8003fcc:	20000250 	.word	0x20000250
 8003fd0:	20000218 	.word	0x20000218
 8003fd4:	20000254 	.word	0x20000254
 8003fd8:	20000258 	.word	0x20000258
 8003fdc:	20000024 	.word	0x20000024
 8003fe0:	20000600 	.word	0x20000600
 8003fe4:	2000024c 	.word	0x2000024c
 8003fe8:	20000500 	.word	0x20000500

08003fec <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003fec:	4770      	bx	lr
	...

08003ff0 <motorControlInit>:
void motorControlInit() {

	for (int i=0; i<DERIVATIVE_TIME_DELTA_MS; i++) {
		positionErrorMemory[i] = desiredServoPosition;				// fill with "best guess"
	}
	positionErrorMemoryIndex = 0;
 8003ff0:	2100      	movs	r1, #0
		positionErrorMemory[i] = desiredServoPosition;				// fill with "best guess"
 8003ff2:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <motorControlInit+0x40>)
void motorControlInit() {
 8003ff4:	b510      	push	{r4, lr}
		positionErrorMemory[i] = desiredServoPosition;				// fill with "best guess"
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <motorControlInit+0x44>)

	positionError = 0;
	positionErrorD = 0;
	positionErrorI = 0;												// this is crucial to start at I=0;

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);						// start PWM output
 8003ffa:	4c0f      	ldr	r4, [pc, #60]	; (8004038 <motorControlInit+0x48>)
		positionErrorMemory[i] = desiredServoPosition;				// fill with "best guess"
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	611a      	str	r2, [r3, #16]
 8004006:	615a      	str	r2, [r3, #20]
 8004008:	619a      	str	r2, [r3, #24]
	positionErrorMemoryIndex = 0;
 800400a:	4b0c      	ldr	r3, [pc, #48]	; (800403c <motorControlInit+0x4c>)
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);						// start PWM output
 800400c:	0020      	movs	r0, r4
	positionErrorMemoryIndex = 0;
 800400e:	6019      	str	r1, [r3, #0]
	positionError = 0;
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <motorControlInit+0x50>)
 8004012:	6019      	str	r1, [r3, #0]
	positionErrorD = 0;
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <motorControlInit+0x54>)
 8004016:	6019      	str	r1, [r3, #0]
	positionErrorI = 0;												// this is crucial to start at I=0;
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <motorControlInit+0x58>)
 800401a:	6019      	str	r1, [r3, #0]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);						// start PWM output
 800401c:	f7ff f82e 	bl	800307c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004020:	2104      	movs	r1, #4
 8004022:	0020      	movs	r0, r4
 8004024:	f7ff f82a 	bl	800307c <HAL_TIM_PWM_Start>


#ifdef SERVO_CENTER_ON_POWERUP
	motorPIDControlEnabled = 1;					// enabled by default
 8004028:	2201      	movs	r2, #1
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <motorControlInit+0x5c>)
 800402c:	601a      	str	r2, [r3, #0]
#endif

}
 800402e:	bd10      	pop	{r4, pc}
 8004030:	2000000c 	.word	0x2000000c
 8004034:	20000488 	.word	0x20000488
 8004038:	20000334 	.word	0x20000334
 800403c:	200004b0 	.word	0x200004b0
 8004040:	200004a4 	.word	0x200004a4
 8004044:	200004ac 	.word	0x200004ac
 8004048:	200004a8 	.word	0x200004a8
 800404c:	20000220 	.word	0x20000220

08004050 <setDesiredMotorPosition>:


// ***********************************************************************************************************************
void setDesiredMotorPosition(long dSP) {
	desiredServoPosition = dSP;
	positionErrorI = 0;												// this is crucial to start at I=0;
 8004050:	2200      	movs	r2, #0
	desiredServoPosition = dSP;
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <setDesiredMotorPosition+0x14>)
 8004054:	6018      	str	r0, [r3, #0]
	positionErrorI = 0;												// this is crucial to start at I=0;
 8004056:	4b04      	ldr	r3, [pc, #16]	; (8004068 <setDesiredMotorPosition+0x18>)
 8004058:	601a      	str	r2, [r3, #0]
	motorPIDControlEnabled=1;
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <setDesiredMotorPosition+0x1c>)
 800405c:	3201      	adds	r2, #1
 800405e:	601a      	str	r2, [r3, #0]
}
 8004060:	4770      	bx	lr
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	2000000c 	.word	0x2000000c
 8004068:	200004a8 	.word	0x200004a8
 800406c:	20000220 	.word	0x20000220

08004070 <setMotorSpeed>:
}

// ***********************************************************************************************************************
void setMotorSpeed(long m) {

	motorSpeed = m;
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <setMotorSpeed+0x2c>)
 8004072:	6018      	str	r0, [r3, #0]
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	05db      	lsls	r3, r3, #23

	if (m ==0) {
 8004078:	2800      	cmp	r0, #0
 800407a:	d102      	bne.n	8004082 <setMotorSpeed+0x12>
		TIM2->CCR1 = 0;
 800407c:	6358      	str	r0, [r3, #52]	; 0x34

		} else {

//			if (m > 4095) m = 4095;
			TIM2->CCR1 = 0;
			TIM2->CCR2 = m<<1;
 800407e:	6398      	str	r0, [r3, #56]	; 0x38
		}
	}
}
 8004080:	e006      	b.n	8004090 <setMotorSpeed+0x20>
		if (m<0) {
 8004082:	2800      	cmp	r0, #0
 8004084:	da05      	bge.n	8004092 <setMotorSpeed+0x22>
			TIM2->CCR2 = 0;
 8004086:	2200      	movs	r2, #0
			TIM2->CCR1 = (-m)<<1;
 8004088:	4240      	negs	r0, r0
 800408a:	0040      	lsls	r0, r0, #1
 800408c:	6358      	str	r0, [r3, #52]	; 0x34
			TIM2->CCR2 = 0;
 800408e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004090:	4770      	bx	lr
			TIM2->CCR1 = 0;
 8004092:	2200      	movs	r2, #0
			TIM2->CCR2 = m<<1;
 8004094:	0040      	lsls	r0, r0, #1
			TIM2->CCR1 = 0;
 8004096:	635a      	str	r2, [r3, #52]	; 0x34
 8004098:	e7f1      	b.n	800407e <setMotorSpeed+0xe>
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	20000224 	.word	0x20000224

080040a0 <motorControlIterate1KHz>:
	if (motorPIDControlEnabled) {
 80040a0:	4b20      	ldr	r3, [pc, #128]	; (8004124 <motorControlIterate1KHz+0x84>)
void motorControlIterate1KHz() {
 80040a2:	b570      	push	{r4, r5, r6, lr}
	if (motorPIDControlEnabled) {
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d028      	beq.n	80040fc <motorControlIterate1KHz+0x5c>
		positionError = (desiredServoPosition - currentServoPosition);
 80040aa:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <motorControlIterate1KHz+0x88>)
 80040ac:	4b1f      	ldr	r3, [pc, #124]	; (800412c <motorControlIterate1KHz+0x8c>)
 80040ae:	6810      	ldr	r0, [r2, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1f      	ldr	r2, [pc, #124]	; (8004130 <motorControlIterate1KHz+0x90>)
 80040b4:	1a1b      	subs	r3, r3, r0
		positionErrorD = (positionError - positionErrorMemory[positionErrorMemoryIndex]);
 80040b6:	481f      	ldr	r0, [pc, #124]	; (8004134 <motorControlIterate1KHz+0x94>)
		positionError = (desiredServoPosition - currentServoPosition);
 80040b8:	6013      	str	r3, [r2, #0]
		positionErrorD = (positionError - positionErrorMemory[positionErrorMemoryIndex]);
 80040ba:	6802      	ldr	r2, [r0, #0]
 80040bc:	4c1e      	ldr	r4, [pc, #120]	; (8004138 <motorControlIterate1KHz+0x98>)
 80040be:	0095      	lsls	r5, r2, #2
 80040c0:	5929      	ldr	r1, [r5, r4]
 80040c2:	4e1e      	ldr	r6, [pc, #120]	; (800413c <motorControlIterate1KHz+0x9c>)
 80040c4:	1a59      	subs	r1, r3, r1
		positionErrorMemory[positionErrorMemoryIndex++] = positionError;
 80040c6:	3201      	adds	r2, #1
		positionErrorD = (positionError - positionErrorMemory[positionErrorMemoryIndex]);
 80040c8:	6031      	str	r1, [r6, #0]
		positionErrorMemory[positionErrorMemoryIndex++] = positionError;
 80040ca:	6002      	str	r2, [r0, #0]
 80040cc:	512b      	str	r3, [r5, r4]
		if (positionErrorMemoryIndex == DERIVATIVE_TIME_DELTA_MS) positionErrorMemoryIndex=0;
 80040ce:	2a07      	cmp	r2, #7
 80040d0:	d101      	bne.n	80040d6 <motorControlIterate1KHz+0x36>
 80040d2:	2200      	movs	r2, #0
 80040d4:	6002      	str	r2, [r0, #0]
 80040d6:	4a1a      	ldr	r2, [pc, #104]	; (8004140 <motorControlIterate1KHz+0xa0>)
 80040d8:	6810      	ldr	r0, [r2, #0]
		if (positionError>=0) {
 80040da:	2b00      	cmp	r3, #0
 80040dc:	db0f      	blt.n	80040fe <motorControlIterate1KHz+0x5e>
			positionErrorI += (positionError>>1);								// >>1 as to ignore "tiny" position errors
 80040de:	105c      	asrs	r4, r3, #1
 80040e0:	1820      	adds	r0, r4, r0
			positionErrorI -= ((-positionError)>>1);							// >>1 as to ignore "tiny" position errors
 80040e2:	6010      	str	r0, [r2, #0]
		if ((abs(positionError) < 0x4) && (abs(positionErrorI) < 0x400)) {
 80040e4:	1cd8      	adds	r0, r3, #3
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	2806      	cmp	r0, #6
 80040ea:	d80c      	bhi.n	8004106 <motorControlIterate1KHz+0x66>
 80040ec:	4815      	ldr	r0, [pc, #84]	; (8004144 <motorControlIterate1KHz+0xa4>)
 80040ee:	4c16      	ldr	r4, [pc, #88]	; (8004148 <motorControlIterate1KHz+0xa8>)
 80040f0:	1810      	adds	r0, r2, r0
 80040f2:	42a0      	cmp	r0, r4
 80040f4:	d807      	bhi.n	8004106 <motorControlIterate1KHz+0x66>
			setMotorSpeed(0);
 80040f6:	2000      	movs	r0, #0
			setMotorSpeed(motorSpeed);
 80040f8:	f7ff ffba 	bl	8004070 <setMotorSpeed>
}
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
			positionErrorI -= ((-positionError)>>1);							// >>1 as to ignore "tiny" position errors
 80040fe:	425c      	negs	r4, r3
 8004100:	1064      	asrs	r4, r4, #1
 8004102:	1b00      	subs	r0, r0, r4
 8004104:	e7ed      	b.n	80040e2 <motorControlIterate1KHz+0x42>
			motorSpeed = gainP * positionError  +  gainD * positionErrorD  +  ((gainI * positionErrorI)>>8);
 8004106:	4811      	ldr	r0, [pc, #68]	; (800414c <motorControlIterate1KHz+0xac>)
 8004108:	6800      	ldr	r0, [r0, #0]
 800410a:	4343      	muls	r3, r0
 800410c:	4810      	ldr	r0, [pc, #64]	; (8004150 <motorControlIterate1KHz+0xb0>)
 800410e:	6800      	ldr	r0, [r0, #0]
 8004110:	4348      	muls	r0, r1
 8004112:	1818      	adds	r0, r3, r0
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <motorControlIterate1KHz+0xb4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4353      	muls	r3, r2
 800411a:	121b      	asrs	r3, r3, #8
 800411c:	18c0      	adds	r0, r0, r3
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <motorControlIterate1KHz+0xb8>)
 8004120:	6018      	str	r0, [r3, #0]
 8004122:	e7e9      	b.n	80040f8 <motorControlIterate1KHz+0x58>
 8004124:	20000220 	.word	0x20000220
 8004128:	2000001c 	.word	0x2000001c
 800412c:	2000000c 	.word	0x2000000c
 8004130:	200004a4 	.word	0x200004a4
 8004134:	200004b0 	.word	0x200004b0
 8004138:	20000488 	.word	0x20000488
 800413c:	200004ac 	.word	0x200004ac
 8004140:	200004a8 	.word	0x200004a8
 8004144:	000003ff 	.word	0x000003ff
 8004148:	000007fe 	.word	0x000007fe
 800414c:	20000018 	.word	0x20000018
 8004150:	20000010 	.word	0x20000010
 8004154:	20000014 	.word	0x20000014
 8004158:	20000224 	.word	0x20000224

0800415c <setMotorPositionControlOff>:
void setMotorPositionControlOff(void) {
 800415c:	b510      	push	{r4, lr}
	setMotorSpeed(0);
 800415e:	2000      	movs	r0, #0
 8004160:	f7ff ff86 	bl	8004070 <setMotorSpeed>
	motorPIDControlEnabled=0;
 8004164:	2200      	movs	r2, #0
 8004166:	4b01      	ldr	r3, [pc, #4]	; (800416c <setMotorPositionControlOff+0x10>)
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bd10      	pop	{r4, pc}
 800416c:	20000220 	.word	0x20000220

08004170 <I2C_SetRead>:

int SMrunning = 0;

// ***********************************************************************************************************************
void I2C_SetRead(void) {
	I2C1->CR2 |= BIT(10);
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	4a03      	ldr	r2, [pc, #12]	; (8004180 <I2C_SetRead+0x10>)
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	6851      	ldr	r1, [r2, #4]
 8004178:	430b      	orrs	r3, r1
 800417a:	6053      	str	r3, [r2, #4]
}
 800417c:	4770      	bx	lr
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	40005400 	.word	0x40005400

08004184 <I2C_SetWrite>:
void I2C_SetWrite(void) {
	I2C1->CR2 &= ~(BIT(10));
 8004184:	4a02      	ldr	r2, [pc, #8]	; (8004190 <I2C_SetWrite+0xc>)
 8004186:	4903      	ldr	r1, [pc, #12]	; (8004194 <I2C_SetWrite+0x10>)
 8004188:	6853      	ldr	r3, [r2, #4]
 800418a:	400b      	ands	r3, r1
 800418c:	6053      	str	r3, [r2, #4]
}
 800418e:	4770      	bx	lr
 8004190:	40005400 	.word	0x40005400
 8004194:	fffffbff 	.word	0xfffffbff

08004198 <I2C_SetAddress>:

void I2C_SetAddress(unsigned long sa) {
	I2C1->CR2 &= ~(0x000000FE);
 8004198:	21fe      	movs	r1, #254	; 0xfe
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <I2C_SetAddress+0x18>)
	I2C1->CR2 |= ((sa & 0x7F) << 1);
 800419c:	0040      	lsls	r0, r0, #1
	I2C1->CR2 &= ~(0x000000FE);
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	438a      	bics	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= ((sa & 0x7F) << 1);
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	3101      	adds	r1, #1
 80041a8:	4008      	ands	r0, r1
 80041aa:	4310      	orrs	r0, r2
 80041ac:	6058      	str	r0, [r3, #4]
}
 80041ae:	4770      	bx	lr
 80041b0:	40005400 	.word	0x40005400

080041b4 <I2C_SetNumberOfBytesToTransmit>:

void I2C_SetNumberOfBytesToTransmit(unsigned long nb) {
	I2C1->CR2 &= ~(0x00FF0000);
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <I2C_SetNumberOfBytesToTransmit+0x1c>)
 80041b6:	4907      	ldr	r1, [pc, #28]	; (80041d4 <I2C_SetNumberOfBytesToTransmit+0x20>)
 80041b8:	685a      	ldr	r2, [r3, #4]
	I2C1->CR2 |= ((nb & 0xFF) << 16);
 80041ba:	0400      	lsls	r0, r0, #16
	I2C1->CR2 &= ~(0x00FF0000);
 80041bc:	400a      	ands	r2, r1
	I2C1->CR2 |= ((nb & 0xFF) << 16);
 80041be:	21ff      	movs	r1, #255	; 0xff
	I2C1->CR2 &= ~(0x00FF0000);
 80041c0:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= ((nb & 0xFF) << 16);
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	0409      	lsls	r1, r1, #16
 80041c6:	4008      	ands	r0, r1
 80041c8:	4310      	orrs	r0, r2
 80041ca:	6058      	str	r0, [r3, #4]
}
 80041cc:	4770      	bx	lr
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	40005400 	.word	0x40005400
 80041d4:	ff00ffff 	.word	0xff00ffff

080041d8 <I2CWriteByteSequence>:

// ***********************************************************************************************************************
void I2CWriteByteSequence(char i2cAddress, char byteCount, char *c) {
 80041d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041da:	000e      	movs	r6, r1
 80041dc:	0017      	movs	r7, r2
	long I2C_ISR = 0;
	long errorFlag = 0;
	long timeOut = 0x00000FFF;

	I2C_SetAddress(i2cAddress);					// write this address (compass on servo PCB)
 80041de:	f7ff ffdb 	bl	8004198 <I2C_SetAddress>
	I2C_SetWrite();								// write data
 80041e2:	f7ff ffcf 	bl	8004184 <I2C_SetWrite>
	I2C_SetNumberOfBytesToTransmit(byteCount);	// set how many bytes to be transmitted
 80041e6:	0030      	movs	r0, r6
 80041e8:	f7ff ffe4 	bl	80041b4 <I2C_SetNumberOfBytesToTransmit>
	I2C1->CR2 |= BIT(25);						// automatic end mode; (i.e. automatically send "stop" after number of bytes are transmitted)
 80041ec:	2380      	movs	r3, #128	; 0x80
	I2C1->TXDR = *c++;							// this is the first byte to be sent
	byteCount--;

	I2C1->CR2 |= I2C_CR2_START;					// generate I2C start condition
 80041ee:	2080      	movs	r0, #128	; 0x80
	I2C1->CR2 |= BIT(25);						// automatic end mode; (i.e. automatically send "stop" after number of bytes are transmitted)
 80041f0:	4c2c      	ldr	r4, [pc, #176]	; (80042a4 <I2CWriteByteSequence+0xcc>)
 80041f2:	049b      	lsls	r3, r3, #18
 80041f4:	6862      	ldr	r2, [r4, #4]
	I2C1->CR2 |= I2C_CR2_START;					// generate I2C start condition
 80041f6:	0180      	lsls	r0, r0, #6
	I2C1->CR2 |= BIT(25);						// automatic end mode; (i.e. automatically send "stop" after number of bytes are transmitted)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	6063      	str	r3, [r4, #4]
	I2C1->TXDR = *c++;							// this is the first byte to be sent
 80041fc:	783b      	ldrb	r3, [r7, #0]
	byteCount--;
 80041fe:	3e01      	subs	r6, #1
	I2C1->TXDR = *c++;							// this is the first byte to be sent
 8004200:	62a3      	str	r3, [r4, #40]	; 0x28
	I2C1->CR2 |= I2C_CR2_START;					// generate I2C start condition
 8004202:	6862      	ldr	r2, [r4, #4]
	I2C1->TXDR = *c++;							// this is the first byte to be sent
 8004204:	1c7d      	adds	r5, r7, #1
	I2C1->CR2 |= I2C_CR2_START;					// generate I2C start condition
 8004206:	4302      	orrs	r2, r0
 8004208:	6062      	str	r2, [r4, #4]
	long timeOut = 0x00000FFF;
 800420a:	4a27      	ldr	r2, [pc, #156]	; (80042a8 <I2CWriteByteSequence+0xd0>)
	byteCount--;
 800420c:	b2f1      	uxtb	r1, r6

	while ((I2C1->CR2 & I2C_CR2_START) && (--timeOut)) {
 800420e:	6863      	ldr	r3, [r4, #4]
 8004210:	4003      	ands	r3, r0
 8004212:	d003      	beq.n	800421c <I2CWriteByteSequence+0x44>
 8004214:	3a01      	subs	r2, #1
 8004216:	2a00      	cmp	r2, #0
 8004218:	d103      	bne.n	8004222 <I2CWriteByteSequence+0x4a>
		asm volatile ("nop");					// wait for start bit to get cleared (independent of success)
	}
	if (timeOut == 0) {
		errorFlag |= 8;
 800421a:	2308      	movs	r3, #8
			& (I2C_ISR_TC | I2C_ISR_NACKF | I2C_ISR_STOPF | I2C_ISR_BERR)) == 0)
			&& (--timeOut)) {
		I2C_ISR = (I2C1->ISR);

		if (((I2C_ISR) & (I2C_ISR_TXE)) && (byteCount)) {
			I2C1->TXDR = *c++;					// this is the next byte to be sent
 800421c:	2000      	movs	r0, #0
		if (((I2C_ISR) & (I2C_ISR_TXE)) && (byteCount)) {
 800421e:	2701      	movs	r7, #1
 8004220:	e00b      	b.n	800423a <I2CWriteByteSequence+0x62>
		asm volatile ("nop");					// wait for start bit to get cleared (independent of success)
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	e7f3      	b.n	800420e <I2CWriteByteSequence+0x36>
		I2C_ISR = (I2C1->ISR);
 8004226:	69a0      	ldr	r0, [r4, #24]
		if (((I2C_ISR) & (I2C_ISR_TXE)) && (byteCount)) {
 8004228:	4238      	tst	r0, r7
 800422a:	d006      	beq.n	800423a <I2CWriteByteSequence+0x62>
 800422c:	2900      	cmp	r1, #0
 800422e:	d004      	beq.n	800423a <I2CWriteByteSequence+0x62>
			I2C1->TXDR = *c++;					// this is the next byte to be sent
 8004230:	782e      	ldrb	r6, [r5, #0]
			byteCount--;
 8004232:	3901      	subs	r1, #1
			I2C1->TXDR = *c++;					// this is the next byte to be sent
 8004234:	62a6      	str	r6, [r4, #40]	; 0x28
			byteCount--;
 8004236:	b2c9      	uxtb	r1, r1
			I2C1->TXDR = *c++;					// this is the next byte to be sent
 8004238:	3501      	adds	r5, #1
	while ((((I2C_ISR)
 800423a:	26b8      	movs	r6, #184	; 0xb8
 800423c:	0076      	lsls	r6, r6, #1
 800423e:	4230      	tst	r0, r6
 8004240:	d126      	bne.n	8004290 <I2CWriteByteSequence+0xb8>
			&& (--timeOut)) {
 8004242:	3a01      	subs	r2, #1
 8004244:	2a00      	cmp	r2, #0
 8004246:	d1ee      	bne.n	8004226 <I2CWriteByteSequence+0x4e>
		}
	}
	if (timeOut == 0) {
		errorFlag |= 16;
 8004248:	2210      	movs	r2, #16
 800424a:	4313      	orrs	r3, r2

	if ((I2C_ISR) & (I2C_ISR_TC)) {
//		uartSendStringDirect("success\n");
	}

	if ((I2C_ISR) & (I2C_ISR_STOPF)) {
 800424c:	2220      	movs	r2, #32
 800424e:	4210      	tst	r0, r2
 8004250:	d021      	beq.n	8004296 <I2CWriteByteSequence+0xbe>
		I2C1->ICR |= I2C_ICR_STOPCF;
 8004252:	69e1      	ldr	r1, [r4, #28]
 8004254:	430a      	orrs	r2, r1
 8004256:	61e2      	str	r2, [r4, #28]
	} else {
		errorFlag |= 1;
	}

	if ((I2C_ISR) & (I2C_ISR_BERR)) {
 8004258:	2280      	movs	r2, #128	; 0x80
 800425a:	0052      	lsls	r2, r2, #1
 800425c:	4210      	tst	r0, r2
 800425e:	d004      	beq.n	800426a <I2CWriteByteSequence+0x92>
		I2C1->ICR |= I2C_ICR_BERRCF;
 8004260:	69e1      	ldr	r1, [r4, #28]
 8004262:	430a      	orrs	r2, r1
 8004264:	61e2      	str	r2, [r4, #28]
		errorFlag |= 2;
 8004266:	2202      	movs	r2, #2
 8004268:	4313      	orrs	r3, r2
	}

	if ((I2C_ISR) & (I2C_ISR_NACKF)) {
 800426a:	2210      	movs	r2, #16
 800426c:	4210      	tst	r0, r2
 800426e:	d015      	beq.n	800429c <I2CWriteByteSequence+0xc4>
		I2C1->ICR |= I2C_ICR_NACKCF;
 8004270:	69e3      	ldr	r3, [r4, #28]
 8004272:	431a      	orrs	r2, r3
 8004274:	61e2      	str	r2, [r4, #28]
		errorFlag |= 4;
	}

	if (errorFlag) {
		I2C1->CR2 |= I2C_CR2_STOP;// if an error occurred, just to be sure, generate a STOP
 8004276:	2380      	movs	r3, #128	; 0x80
 8004278:	6862      	ldr	r2, [r4, #4]
 800427a:	01db      	lsls	r3, r3, #7
 800427c:	4313      	orrs	r3, r2
 800427e:	6063      	str	r3, [r4, #4]
		sleepMS(1);
 8004280:	2001      	movs	r0, #1
 8004282:	f7ff fa8d 	bl	80037a0 <sleepMS>
		I2C1->ICR |=
 8004286:	69e2      	ldr	r2, [r4, #28]
 8004288:	4b08      	ldr	r3, [pc, #32]	; (80042ac <I2CWriteByteSequence+0xd4>)
 800428a:	4313      	orrs	r3, r2
 800428c:	61e3      	str	r3, [r4, #28]

//		uartSendStringDirect("I2C-W-Err: ");
//		uartSendCharDirect('0'+errorFlag);
//		uartSendCharDirect('\n');
	}
}
 800428e:	e007      	b.n	80042a0 <I2CWriteByteSequence+0xc8>
	if (timeOut == 0) {
 8004290:	2a00      	cmp	r2, #0
 8004292:	d1db      	bne.n	800424c <I2CWriteByteSequence+0x74>
 8004294:	e7d8      	b.n	8004248 <I2CWriteByteSequence+0x70>
		errorFlag |= 1;
 8004296:	2201      	movs	r2, #1
 8004298:	4313      	orrs	r3, r2
 800429a:	e7dd      	b.n	8004258 <I2CWriteByteSequence+0x80>
	if (errorFlag) {
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1ea      	bne.n	8004276 <I2CWriteByteSequence+0x9e>
}
 80042a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a2:	46c0      	nop			; (mov r8, r8)
 80042a4:	40005400 	.word	0x40005400
 80042a8:	00000fff 	.word	0x00000fff
 80042ac:	00001f38 	.word	0x00001f38

080042b0 <I2CReadByteSequence>:

// ***********************************************************************************************************************
void I2CReadByteSequence(char i2cAddress, char byteCount, char *c) {
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	000d      	movs	r5, r1
 80042b4:	0016      	movs	r6, r2
	long I2C_ISR = 0;
	long errorFlag = 0;
	long timeOut = 0x00000FFF;

	I2C_SetAddress(i2cAddress);	// read from this address (compass on servo PCB)
 80042b6:	f7ff ff6f 	bl	8004198 <I2C_SetAddress>

	I2C_SetRead();									// read data
 80042ba:	f7ff ff59 	bl	8004170 <I2C_SetRead>

	I2C_SetNumberOfBytesToTransmit(byteCount);// set how many bytes to be transmitted
 80042be:	0028      	movs	r0, r5
 80042c0:	f7ff ff78 	bl	80041b4 <I2C_SetNumberOfBytesToTransmit>
	I2C1->CR2 |= BIT(25);// automatic end mode; (i.e. automatically send "end" after number of bytes are transmitted)
 80042c4:	2380      	movs	r3, #128	; 0x80

	I2C1->CR2 |= I2C_CR2_START;					// generate I2C start condition
 80042c6:	2180      	movs	r1, #128	; 0x80
	I2C1->CR2 |= BIT(25);// automatic end mode; (i.e. automatically send "end" after number of bytes are transmitted)
 80042c8:	4c2b      	ldr	r4, [pc, #172]	; (8004378 <I2CReadByteSequence+0xc8>)
 80042ca:	049b      	lsls	r3, r3, #18
 80042cc:	6862      	ldr	r2, [r4, #4]
	I2C1->CR2 |= I2C_CR2_START;					// generate I2C start condition
 80042ce:	0189      	lsls	r1, r1, #6
	I2C1->CR2 |= BIT(25);// automatic end mode; (i.e. automatically send "end" after number of bytes are transmitted)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	6063      	str	r3, [r4, #4]
	I2C1->CR2 |= I2C_CR2_START;					// generate I2C start condition
 80042d4:	6862      	ldr	r2, [r4, #4]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	6062      	str	r2, [r4, #4]
	long timeOut = 0x00000FFF;
 80042da:	4a28      	ldr	r2, [pc, #160]	; (800437c <I2CReadByteSequence+0xcc>)

	while ((I2C1->CR2 & I2C_CR2_START) && (--timeOut)) {
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	400b      	ands	r3, r1
 80042e0:	d003      	beq.n	80042ea <I2CReadByteSequence+0x3a>
 80042e2:	3a01      	subs	r2, #1
 80042e4:	2a00      	cmp	r2, #0
 80042e6:	d12d      	bne.n	8004344 <I2CReadByteSequence+0x94>
		asm volatile ("nop");
	}		// wait for start bit to get cleared (independent of success)
	if (timeOut == 0) {
		errorFlag |= 8;
 80042e8:	2308      	movs	r3, #8
			&& (--timeOut)) {
		I2C_ISR = (I2C1->ISR);

		if (I2C_ISR & I2C_ISR_RXNE) {
			if (byteCount) {
				*c++ = I2C1->RXDR;						// read data
 80042ea:	2100      	movs	r1, #0
				byteCount--;
			} else {
				(int) I2C1->RXDR;
				errorFlag |= 32;
 80042ec:	2720      	movs	r7, #32
	while ((((I2C_ISR)
 80042ee:	20b8      	movs	r0, #184	; 0xb8
 80042f0:	0040      	lsls	r0, r0, #1
 80042f2:	4201      	tst	r1, r0
 80042f4:	d136      	bne.n	8004364 <I2CReadByteSequence+0xb4>
			&& (--timeOut)) {
 80042f6:	3a01      	subs	r2, #1
 80042f8:	2a00      	cmp	r2, #0
 80042fa:	d125      	bne.n	8004348 <I2CReadByteSequence+0x98>
			}
		}
	}
	if (timeOut == 0) {
		errorFlag |= 16;
 80042fc:	2210      	movs	r2, #16
 80042fe:	4313      	orrs	r3, r2
//	uartSendCharDirect('\n');

	if ((I2C_ISR) & (I2C_ISR_TC)) {
	}

	if ((I2C_ISR) & (I2C_ISR_STOPF)) {
 8004300:	2220      	movs	r2, #32
 8004302:	4211      	tst	r1, r2
 8004304:	d031      	beq.n	800436a <I2CReadByteSequence+0xba>
		I2C1->ICR |= I2C_ICR_STOPCF;
 8004306:	69e0      	ldr	r0, [r4, #28]
 8004308:	4302      	orrs	r2, r0
 800430a:	61e2      	str	r2, [r4, #28]
	} else {
		errorFlag |= 1;
	}

	if ((I2C_ISR) & (I2C_ISR_BERR)) {
 800430c:	2280      	movs	r2, #128	; 0x80
 800430e:	0052      	lsls	r2, r2, #1
 8004310:	4211      	tst	r1, r2
 8004312:	d004      	beq.n	800431e <I2CReadByteSequence+0x6e>
		I2C1->ICR |= I2C_ICR_BERRCF;
 8004314:	69e0      	ldr	r0, [r4, #28]
 8004316:	4302      	orrs	r2, r0
 8004318:	61e2      	str	r2, [r4, #28]
		errorFlag |= 2;
 800431a:	2202      	movs	r2, #2
 800431c:	4313      	orrs	r3, r2
	}

	if ((I2C_ISR) & (I2C_ISR_NACKF)) {
 800431e:	2210      	movs	r2, #16
 8004320:	4211      	tst	r1, r2
 8004322:	d025      	beq.n	8004370 <I2CReadByteSequence+0xc0>
		I2C1->ICR |= I2C_ICR_NACKCF;
 8004324:	69e3      	ldr	r3, [r4, #28]
 8004326:	431a      	orrs	r2, r3
 8004328:	61e2      	str	r2, [r4, #28]
		errorFlag |= 4;
	}

	if (errorFlag) {
		I2C1->CR2 |= I2C_CR2_STOP;// if an error occurred, just to be sure, generate a STOP
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	6862      	ldr	r2, [r4, #4]
 800432e:	01db      	lsls	r3, r3, #7
 8004330:	4313      	orrs	r3, r2
 8004332:	6063      	str	r3, [r4, #4]
		sleepMS(1);
 8004334:	2001      	movs	r0, #1
 8004336:	f7ff fa33 	bl	80037a0 <sleepMS>
		I2C1->ICR |=
 800433a:	69e2      	ldr	r2, [r4, #28]
 800433c:	4b10      	ldr	r3, [pc, #64]	; (8004380 <I2CReadByteSequence+0xd0>)
 800433e:	4313      	orrs	r3, r2
 8004340:	61e3      	str	r3, [r4, #28]

//		uartSendStringDirect("I2C-R-Err: ");
//		uartSendCharDirect('0'+errorFlag);
//		uartSendCharDirect('\n');
	}
}
 8004342:	e017      	b.n	8004374 <I2CReadByteSequence+0xc4>
		asm volatile ("nop");
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	e7c9      	b.n	80042dc <I2CReadByteSequence+0x2c>
		if (I2C_ISR & I2C_ISR_RXNE) {
 8004348:	2004      	movs	r0, #4
		I2C_ISR = (I2C1->ISR);
 800434a:	69a1      	ldr	r1, [r4, #24]
		if (I2C_ISR & I2C_ISR_RXNE) {
 800434c:	4201      	tst	r1, r0
 800434e:	d0ce      	beq.n	80042ee <I2CReadByteSequence+0x3e>
				*c++ = I2C1->RXDR;						// read data
 8004350:	6a60      	ldr	r0, [r4, #36]	; 0x24
			if (byteCount) {
 8004352:	2d00      	cmp	r5, #0
 8004354:	d004      	beq.n	8004360 <I2CReadByteSequence+0xb0>
				byteCount--;
 8004356:	3d01      	subs	r5, #1
				*c++ = I2C1->RXDR;						// read data
 8004358:	7030      	strb	r0, [r6, #0]
				byteCount--;
 800435a:	b2ed      	uxtb	r5, r5
				*c++ = I2C1->RXDR;						// read data
 800435c:	3601      	adds	r6, #1
 800435e:	e7c6      	b.n	80042ee <I2CReadByteSequence+0x3e>
				errorFlag |= 32;
 8004360:	433b      	orrs	r3, r7
 8004362:	e7c4      	b.n	80042ee <I2CReadByteSequence+0x3e>
	if (timeOut == 0) {
 8004364:	2a00      	cmp	r2, #0
 8004366:	d1cb      	bne.n	8004300 <I2CReadByteSequence+0x50>
 8004368:	e7c8      	b.n	80042fc <I2CReadByteSequence+0x4c>
		errorFlag |= 1;
 800436a:	2201      	movs	r2, #1
 800436c:	4313      	orrs	r3, r2
 800436e:	e7cd      	b.n	800430c <I2CReadByteSequence+0x5c>
	if (errorFlag) {
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1da      	bne.n	800432a <I2CReadByteSequence+0x7a>
}
 8004374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	40005400 	.word	0x40005400
 800437c:	00000fff 	.word	0x00000fff
 8004380:	00001f38 	.word	0x00001f38

08004384 <pingSensor>:

// ***********************************************************************************************************************
unsigned long pingSensor(unsigned int address) {
 8004384:	b570      	push	{r4, r5, r6, lr}
	long I2C_ISR = 0;
	long timeOut = 0x00000FFF;
	long errorFlag = 0;

	I2C_SetAddress(address);						// read from this address
 8004386:	f7ff ff07 	bl	8004198 <I2C_SetAddress>
	I2C_SetWrite();									// write data
 800438a:	f7ff fefb 	bl	8004184 <I2C_SetWrite>
	I2C_SetNumberOfBytesToTransmit(1);	// set how many bytes to be transmitted
 800438e:	2001      	movs	r0, #1
 8004390:	f7ff ff10 	bl	80041b4 <I2C_SetNumberOfBytesToTransmit>
	I2C1->CR2 |= BIT(25);// automatic end mode; (i.e. automatically send "end" after number of bytes are transmitted)
 8004394:	2380      	movs	r3, #128	; 0x80
 8004396:	4c28      	ldr	r4, [pc, #160]	; (8004438 <pingSensor+0xb4>)
 8004398:	049b      	lsls	r3, r3, #18
 800439a:	6862      	ldr	r2, [r4, #4]
 800439c:	4313      	orrs	r3, r2
 800439e:	6063      	str	r3, [r4, #4]
	I2C1->TXDR = 0;							// this is the first byte to be sent
 80043a0:	2300      	movs	r3, #0

	I2C1->CR2 |= I2C_CR2_START;					// generate I2C start condition
 80043a2:	2280      	movs	r2, #128	; 0x80
	I2C1->TXDR = 0;							// this is the first byte to be sent
 80043a4:	62a3      	str	r3, [r4, #40]	; 0x28
	I2C1->CR2 |= I2C_CR2_START;					// generate I2C start condition
 80043a6:	6863      	ldr	r3, [r4, #4]
 80043a8:	0192      	lsls	r2, r2, #6
 80043aa:	4313      	orrs	r3, r2
 80043ac:	6063      	str	r3, [r4, #4]
	long timeOut = 0x00000FFF;
 80043ae:	4b23      	ldr	r3, [pc, #140]	; (800443c <pingSensor+0xb8>)

	while ((I2C1->CR2 & I2C_CR2_START) && (--timeOut)) {
 80043b0:	6865      	ldr	r5, [r4, #4]
 80043b2:	4015      	ands	r5, r2
 80043b4:	d003      	beq.n	80043be <pingSensor+0x3a>
 80043b6:	3b01      	subs	r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d104      	bne.n	80043c6 <pingSensor+0x42>
		asm volatile ("nop");
	}		// wait for start bit to get cleared (independent of success)
	if (timeOut == 0) {
		errorFlag |= 8;
 80043bc:	2508      	movs	r5, #8
	}

	while ((((I2C_ISR)
			& (I2C_ISR_TC | I2C_ISR_NACKF | I2C_ISR_STOPF | I2C_ISR_BERR)) == 0)
 80043be:	21b8      	movs	r1, #184	; 0xb8
	long errorFlag = 0;
 80043c0:	2200      	movs	r2, #0
			& (I2C_ISR_TC | I2C_ISR_NACKF | I2C_ISR_STOPF | I2C_ISR_BERR)) == 0)
 80043c2:	0049      	lsls	r1, r1, #1
 80043c4:	e002      	b.n	80043cc <pingSensor+0x48>
		asm volatile ("nop");
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	e7f2      	b.n	80043b0 <pingSensor+0x2c>
			&& (--timeOut)) {
		I2C_ISR = (I2C1->ISR);
 80043ca:	69a2      	ldr	r2, [r4, #24]
	while ((((I2C_ISR)
 80043cc:	420a      	tst	r2, r1
 80043ce:	d128      	bne.n	8004422 <pingSensor+0x9e>
			&& (--timeOut)) {
 80043d0:	3b01      	subs	r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f9      	bne.n	80043ca <pingSensor+0x46>
	}
	if (timeOut == 0) {
		errorFlag |= 16;
 80043d6:	2310      	movs	r3, #16
 80043d8:	431d      	orrs	r5, r3
	}

	if ((I2C_ISR) & (I2C_ISR_STOPF)) {
 80043da:	2320      	movs	r3, #32
 80043dc:	421a      	tst	r2, r3
 80043de:	d023      	beq.n	8004428 <pingSensor+0xa4>
		I2C1->ICR |= I2C_ICR_STOPCF;
 80043e0:	69e1      	ldr	r1, [r4, #28]
 80043e2:	430b      	orrs	r3, r1
 80043e4:	61e3      	str	r3, [r4, #28]
	} else {
		errorFlag |= 1;
	}

	if ((I2C_ISR) & (I2C_ISR_BERR)) {
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	421a      	tst	r2, r3
 80043ec:	d004      	beq.n	80043f8 <pingSensor+0x74>
		I2C1->ICR |= I2C_ICR_BERRCF;
 80043ee:	69e1      	ldr	r1, [r4, #28]
 80043f0:	430b      	orrs	r3, r1
 80043f2:	61e3      	str	r3, [r4, #28]
		errorFlag |= 2;
 80043f4:	2302      	movs	r3, #2
 80043f6:	431d      	orrs	r5, r3
	}

	if ((I2C_ISR) & (I2C_ISR_NACKF)) {
 80043f8:	2310      	movs	r3, #16
 80043fa:	421a      	tst	r2, r3
 80043fc:	d017      	beq.n	800442e <pingSensor+0xaa>
		I2C1->ICR |= I2C_ICR_NACKCF;
 80043fe:	69e2      	ldr	r2, [r4, #28]
 8004400:	4313      	orrs	r3, r2
 8004402:	61e3      	str	r3, [r4, #28]
		errorFlag |= 4;
 8004404:	2304      	movs	r3, #4
 8004406:	431d      	orrs	r5, r3
	}

	if (errorFlag) {
		I2C1->CR2 |= I2C_CR2_STOP;// if an error occurred, just to be sure, generate a STOP
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	6862      	ldr	r2, [r4, #4]
 800440c:	01db      	lsls	r3, r3, #7
 800440e:	4313      	orrs	r3, r2
 8004410:	6063      	str	r3, [r4, #4]
		sleepMS(1);
 8004412:	2001      	movs	r0, #1
 8004414:	f7ff f9c4 	bl	80037a0 <sleepMS>
		I2C1->ICR |=
 8004418:	69e2      	ldr	r2, [r4, #28]
 800441a:	4b09      	ldr	r3, [pc, #36]	; (8004440 <pingSensor+0xbc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	61e3      	str	r3, [r4, #28]
 8004420:	e007      	b.n	8004432 <pingSensor+0xae>
	if (timeOut == 0) {
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1d9      	bne.n	80043da <pingSensor+0x56>
 8004426:	e7d6      	b.n	80043d6 <pingSensor+0x52>
		errorFlag |= 1;
 8004428:	2301      	movs	r3, #1
 800442a:	431d      	orrs	r5, r3
 800442c:	e7db      	b.n	80043e6 <pingSensor+0x62>
	if (errorFlag) {
 800442e:	2d00      	cmp	r5, #0
 8004430:	d1ea      	bne.n	8004408 <pingSensor+0x84>
//	uartSendStringDirect("ping: ");
//	uartSendCharDirect('0' + errorFlag);
//	uartSendCharDirect('\n');
//
	return (errorFlag);
}
 8004432:	0028      	movs	r0, r5
 8004434:	bd70      	pop	{r4, r5, r6, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	40005400 	.word	0x40005400
 800443c:	00000fff 	.word	0x00000fff
 8004440:	00001f38 	.word	0x00001f38

08004444 <configureKneeMagnetSensor>:

// ***********************************************************************************************************************
void configureKneeMagnetSensor(unsigned long address) {
 8004444:	b570      	push	{r4, r5, r6, lr}
	char i2c_tx_cmd[17];

	// Sensor Reset on Startup
	for(long i = 0; i < 2; i++){
		i2c_tx_cmd[0] = 0xFF;
 8004446:	26ff      	movs	r6, #255	; 0xff
void configureKneeMagnetSensor(unsigned long address) {
 8004448:	b086      	sub	sp, #24
		i2c_tx_cmd[0] = 0xFF;
 800444a:	ac01      	add	r4, sp, #4
		I2CWriteByteSequence(address, 1, i2c_tx_cmd); // S Address Write-bit ACK FF P
 800444c:	b2c5      	uxtb	r5, r0
 800444e:	0022      	movs	r2, r4
 8004450:	0028      	movs	r0, r5
 8004452:	2101      	movs	r1, #1
		i2c_tx_cmd[0] = 0xFF;
 8004454:	7026      	strb	r6, [r4, #0]
		I2CWriteByteSequence(address, 1, i2c_tx_cmd); // S Address Write-bit ACK FF P
 8004456:	f7ff febf 	bl	80041d8 <I2CWriteByteSequence>
		i2c_tx_cmd[0] = 0xFF;
 800445a:	7026      	strb	r6, [r4, #0]
	}

	for(long i = 0; i < 2; i++){
		i2c_tx_cmd[0] = 0x00;
 800445c:	2600      	movs	r6, #0
		I2CWriteByteSequence(address, 1, i2c_tx_cmd); // S Address Write-bit ACK FF P
 800445e:	0022      	movs	r2, r4
 8004460:	0028      	movs	r0, r5
 8004462:	2101      	movs	r1, #1
 8004464:	f7ff feb8 	bl	80041d8 <I2CWriteByteSequence>
		I2CWriteByteSequence(address, 1, i2c_tx_cmd); // S Address Write-bit ACK 00 P
 8004468:	0022      	movs	r2, r4
 800446a:	0028      	movs	r0, r5
 800446c:	2101      	movs	r1, #1
		i2c_tx_cmd[0] = 0x00;
 800446e:	7026      	strb	r6, [r4, #0]
		I2CWriteByteSequence(address, 1, i2c_tx_cmd); // S Address Write-bit ACK 00 P
 8004470:	f7ff feb2 	bl	80041d8 <I2CWriteByteSequence>
 8004474:	0022      	movs	r2, r4
 8004476:	2101      	movs	r1, #1
 8004478:	0028      	movs	r0, r5
		i2c_tx_cmd[0] = 0x00;
 800447a:	7026      	strb	r6, [r4, #0]
		I2CWriteByteSequence(address, 1, i2c_tx_cmd); // S Address Write-bit ACK 00 P
 800447c:	f7ff feac 	bl	80041d8 <I2CWriteByteSequence>
	}

	sleepMS(30); 			// wait
 8004480:	201e      	movs	r0, #30
 8004482:	f7ff f98d 	bl	80037a0 <sleepMS>

	// now configure sensor
	i2c_tx_cmd[0] = 0b00010000; 	// no trigger | start writing at register 0b10000
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <configureKneeMagnetSensor+0x58>)
	i2c_tx_cmd[1] = 0b11000000;		// disable temp | disable z | no trigger (2 bit) | 12bit | no temperature compensation (2bit) | even parity
	i2c_tx_cmd[2] = 0b00011111; 	// odd parity | address (2 bit) | 1 byte read | no CA | no INT | Fast Mode (2 bit)
	I2CWriteByteSequence(address, 3, i2c_tx_cmd); // S Address Write-bit ACK byte0 ACK byte1 ACK byte2 P
 8004488:	0022      	movs	r2, r4
	i2c_tx_cmd[0] = 0b00010000; 	// no trigger | start writing at register 0b10000
 800448a:	8023      	strh	r3, [r4, #0]
	i2c_tx_cmd[1] = 0b11000000;		// disable temp | disable z | no trigger (2 bit) | 12bit | no temperature compensation (2bit) | even parity
 800448c:	231f      	movs	r3, #31
	I2CWriteByteSequence(address, 3, i2c_tx_cmd); // S Address Write-bit ACK byte0 ACK byte1 ACK byte2 P
 800448e:	2103      	movs	r1, #3
 8004490:	0028      	movs	r0, r5
	i2c_tx_cmd[1] = 0b11000000;		// disable temp | disable z | no trigger (2 bit) | 12bit | no temperature compensation (2bit) | even parity
 8004492:	70a3      	strb	r3, [r4, #2]
	I2CWriteByteSequence(address, 3, i2c_tx_cmd); // S Address Write-bit ACK byte0 ACK byte1 ACK byte2 P
 8004494:	f7ff fea0 	bl	80041d8 <I2CWriteByteSequence>
}
 8004498:	b006      	add	sp, #24
 800449a:	bd70      	pop	{r4, r5, r6, pc}
 800449c:	ffffc010 	.word	0xffffc010

080044a0 <configureFootPressureSensor>:
// ***********************************************************************************************************************
void configureFootPressureSensor(unsigned long address) {
	char i2c_tx_cmd[4];

	// ***********************************************************************************************************************	// power up sensor
	i2c_tx_cmd[0] = 0;
 80044a0:	2300      	movs	r3, #0
void configureFootPressureSensor(unsigned long address) {
 80044a2:	b507      	push	{r0, r1, r2, lr}
	I2CWriteByteSequence(address, 1, i2c_tx_cmd);
 80044a4:	b2c0      	uxtb	r0, r0
	i2c_tx_cmd[0] = 0;
 80044a6:	aa01      	add	r2, sp, #4
	I2CWriteByteSequence(address, 1, i2c_tx_cmd);
 80044a8:	2101      	movs	r1, #1
	i2c_tx_cmd[0] = 0;
 80044aa:	7013      	strb	r3, [r2, #0]
	I2CWriteByteSequence(address, 1, i2c_tx_cmd);
 80044ac:	f7ff fe94 	bl	80041d8 <I2CWriteByteSequence>
	//no configurable registers exist, so there is nothing more to configure here
}
 80044b0:	bd07      	pop	{r0, r1, r2, pc}

080044b2 <configureServoMagnetSensor>:

// ***********************************************************************************************************************
void configureServoMagnetSensor() {
 80044b2:	b530      	push	{r4, r5, lr}
 80044b4:	b085      	sub	sp, #20
	char i2c_tx_cmd[4];
	char i2c_rx[10];

	// ***********************************************************************************************************************	// power up sensor
	i2c_tx_cmd[0] = 0;
 80044b6:	466b      	mov	r3, sp
 80044b8:	2500      	movs	r5, #0
	I2CWriteByteSequence(0b1011110, 1, i2c_tx_cmd);

	// ***********************************************************************************************************************	// read all registers once
	I2CReadByteSequence(0b1011110, 10, i2c_rx);
 80044ba:	ac01      	add	r4, sp, #4
	I2CWriteByteSequence(0b1011110, 1, i2c_tx_cmd);
 80044bc:	466a      	mov	r2, sp
 80044be:	2101      	movs	r1, #1
 80044c0:	205e      	movs	r0, #94	; 0x5e
	i2c_tx_cmd[0] = 0;
 80044c2:	701d      	strb	r5, [r3, #0]
	I2CWriteByteSequence(0b1011110, 1, i2c_tx_cmd);
 80044c4:	f7ff fe88 	bl	80041d8 <I2CWriteByteSequence>
	I2CReadByteSequence(0b1011110, 10, i2c_rx);
 80044c8:	0022      	movs	r2, r4
 80044ca:	210a      	movs	r1, #10
 80044cc:	205e      	movs	r0, #94	; 0x5e
 80044ce:	f7ff feef 	bl	80042b0 <I2CReadByteSequence>

	// ***********************************************************************************************************************	// now configure sensor
	i2c_tx_cmd[0] = 0;
 80044d2:	466b      	mov	r3, sp
 80044d4:	701d      	strb	r5, [r3, #0]
	i2c_tx_cmd[1] = (i2c_rx[7] & 0x18) | BIT(1); // copy bits 4+3 from ReadReg[7] + enable FAST conversion mode (BIT(1))
 80044d6:	2318      	movs	r3, #24
 80044d8:	4669      	mov	r1, sp
	i2c_tx_cmd[2] = i2c_rx[8];					// copy all bits from ReadReg[8]
 80044da:	4668      	mov	r0, sp
	i2c_tx_cmd[1] = (i2c_rx[7] & 0x18) | BIT(1); // copy bits 4+3 from ReadReg[7] + enable FAST conversion mode (BIT(1))
 80044dc:	79e2      	ldrb	r2, [r4, #7]
 80044de:	401a      	ands	r2, r3
 80044e0:	3b16      	subs	r3, #22
 80044e2:	4313      	orrs	r3, r2
 80044e4:	704b      	strb	r3, [r1, #1]
	i2c_tx_cmd[2] = i2c_rx[8];					// copy all bits from ReadReg[8]
 80044e6:	7a21      	ldrb	r1, [r4, #8]
 80044e8:	7081      	strb	r1, [r0, #2]
	i2c_tx_cmd[3] = 0x80 | 0x40 | 0x20 | (i2c_rx[9] & 0x1F);// 0x80: temperature disabled
 80044ea:	7a60      	ldrb	r0, [r4, #9]
 80044ec:	24e0      	movs	r4, #224	; 0xe0
 80044ee:	4320      	orrs	r0, r4
 80044f0:	466c      	mov	r4, sp
															// 0x40: low power fast (-> 12ms conversion time)
															// 0x20: parity check enabled
															// 0x1F: copy bits from ReadReg[9]

	long parity = i2c_tx_cmd[0] ^ i2c_tx_cmd[1] ^ i2c_tx_cmd[2] ^ i2c_tx_cmd[3];
 80044f2:	4041      	eors	r1, r0
 80044f4:	404b      	eors	r3, r1
	parity ^= (parity >> 4);
 80044f6:	1119      	asrs	r1, r3, #4
 80044f8:	4059      	eors	r1, r3
	parity ^= (parity >> 2);
 80044fa:	108b      	asrs	r3, r1, #2
 80044fc:	404b      	eors	r3, r1
	parity ^= (parity >> 1);
 80044fe:	1059      	asrs	r1, r3, #1
 8004500:	404b      	eors	r3, r1
	i2c_tx_cmd[3] = 0x80 | 0x40 | 0x20 | (i2c_rx[9] & 0x1F);// 0x80: temperature disabled
 8004502:	70e0      	strb	r0, [r4, #3]
	if ((parity & 0x01) == 0) {
 8004504:	07db      	lsls	r3, r3, #31
 8004506:	d403      	bmi.n	8004510 <configureServoMagnetSensor+0x5e>
		i2c_tx_cmd[1] |= 0x80;
 8004508:	237e      	movs	r3, #126	; 0x7e
 800450a:	425b      	negs	r3, r3
 800450c:	431a      	orrs	r2, r3
 800450e:	7062      	strb	r2, [r4, #1]
	}					// if needed, add parity bit to have odd parity

	I2CWriteByteSequence(0b1011110, 4, i2c_tx_cmd);
 8004510:	466a      	mov	r2, sp
 8004512:	2104      	movs	r1, #4
 8004514:	205e      	movs	r0, #94	; 0x5e
 8004516:	f7ff fe5f 	bl	80041d8 <I2CWriteByteSequence>
}
 800451a:	b005      	add	sp, #20
 800451c:	bd30      	pop	{r4, r5, pc}
	...

08004520 <sensorsInit>:

// ***********************************************************************************************************************
void sensorsInit() {

	// ***********************************************************************************************************************
	I2C1->CR1 |= I2C_CR1_PE;						// enable I2C
 8004520:	2201      	movs	r2, #1
 8004522:	4b18      	ldr	r3, [pc, #96]	; (8004584 <sensorsInit+0x64>)
void sensorsInit() {
 8004524:	b570      	push	{r4, r5, r6, lr}
	I2C1->CR1 |= I2C_CR1_PE;						// enable I2C
 8004526:	6819      	ldr	r1, [r3, #0]
	I2C1->CR2 &= ~(BIT(11));						// set 7 bit addressing mode

	sleepMS(20);
 8004528:	2014      	movs	r0, #20
	I2C1->CR1 |= I2C_CR1_PE;						// enable I2C
 800452a:	430a      	orrs	r2, r1
 800452c:	601a      	str	r2, [r3, #0]
	I2C1->CR2 &= ~(BIT(11));						// set 7 bit addressing mode
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	4915      	ldr	r1, [pc, #84]	; (8004588 <sensorsInit+0x68>)
 8004532:	400a      	ands	r2, r1
 8004534:	605a      	str	r2, [r3, #4]
	sleepMS(20);
 8004536:	f7ff f933 	bl	80037a0 <sleepMS>

	// ***********************************************************************************************************************
	if (pingSensor(0b0110101) == 0) {				// check if knee sensor exists and has seen itself with SDA=1 at power-up as 0b0110101
 800453a:	2035      	movs	r0, #53	; 0x35
 800453c:	f7ff ff22 	bl	8004384 <pingSensor>
 8004540:	4c12      	ldr	r4, [pc, #72]	; (800458c <sensorsInit+0x6c>)
		configureKneeMagnetSensor(0b0110101);
		magnetSensorKneeAddress = 0b0110101;
	} else {
		magnetSensorKneeAddress = 0;				// no knee sensor available
 8004542:	2300      	movs	r3, #0
	if (pingSensor(0b0110101) == 0) {				// check if knee sensor exists and has seen itself with SDA=1 at power-up as 0b0110101
 8004544:	2800      	cmp	r0, #0
 8004546:	d103      	bne.n	8004550 <sensorsInit+0x30>
		configureKneeMagnetSensor(0b0110101);
 8004548:	3035      	adds	r0, #53	; 0x35
 800454a:	f7ff ff7b 	bl	8004444 <configureKneeMagnetSensor>
		magnetSensorKneeAddress = 0b0110101;
 800454e:	2335      	movs	r3, #53	; 0x35
	}

	// ***********************************************************************************************************************
	if (pingSensor(0b1001101) == 0) {				// check if foot sensor exists and has seen itself with SDA=1 at power-up as 0b1001101
 8004550:	204d      	movs	r0, #77	; 0x4d
		magnetSensorKneeAddress = 0;				// no knee sensor available
 8004552:	6023      	str	r3, [r4, #0]
	if (pingSensor(0b1001101) == 0) {				// check if foot sensor exists and has seen itself with SDA=1 at power-up as 0b1001101
 8004554:	f7ff ff16 	bl	8004384 <pingSensor>
 8004558:	4c0d      	ldr	r4, [pc, #52]	; (8004590 <sensorsInit+0x70>)
		configureFootPressureSensor(0b1001101);
		footPressureSensorAddress = 0b1001101;
	} else {
		footPressureSensorAddress = 0;				// no foot sensor available
 800455a:	2300      	movs	r3, #0
	if (pingSensor(0b1001101) == 0) {				// check if foot sensor exists and has seen itself with SDA=1 at power-up as 0b1001101
 800455c:	2800      	cmp	r0, #0
 800455e:	d103      	bne.n	8004568 <sensorsInit+0x48>
		configureFootPressureSensor(0b1001101);
 8004560:	304d      	adds	r0, #77	; 0x4d
 8004562:	f7ff ff9d 	bl	80044a0 <configureFootPressureSensor>
		footPressureSensorAddress = 0b1001101;
 8004566:	234d      	movs	r3, #77	; 0x4d
		footPressureSensorAddress = 0;				// no foot sensor available
 8004568:	6023      	str	r3, [r4, #0]
	}

	// ***********************************************************************************************************************
	PORTC->CLR = PORTC_MAGSENSOR_POWER;				// pin for on-board (servo) magnet compass off
 800456a:	4d0a      	ldr	r5, [pc, #40]	; (8004594 <sensorsInit+0x74>)
 800456c:	4c0a      	ldr	r4, [pc, #40]	; (8004598 <sensorsInit+0x78>)
	sleepMS(20);
 800456e:	2014      	movs	r0, #20
	PORTC->CLR = PORTC_MAGSENSOR_POWER;				// pin for on-board (servo) magnet compass off
 8004570:	8165      	strh	r5, [r4, #10]
	sleepMS(20);
 8004572:	f7ff f915 	bl	80037a0 <sleepMS>
	PORTC->SET = PORTC_MAGSENSOR_POWER;				// enable on-board magnetic compass sensor -> faster startup (< 0.001ms)
 8004576:	8125      	strh	r5, [r4, #8]
	sleepMS(20);
 8004578:	2014      	movs	r0, #20
 800457a:	f7ff f911 	bl	80037a0 <sleepMS>
	configureServoMagnetSensor();
 800457e:	f7ff ff98 	bl	80044b2 <configureServoMagnetSensor>
}
 8004582:	bd70      	pop	{r4, r5, r6, pc}
 8004584:	40005400 	.word	0x40005400
 8004588:	fffff7ff 	.word	0xfffff7ff
 800458c:	20000240 	.word	0x20000240
 8004590:	20000228 	.word	0x20000228
 8004594:	ffff8000 	.word	0xffff8000
 8004598:	50000810 	.word	0x50000810

0800459c <sensorsIterate>:
	uartSendCharDirect('\n');

}

// ***********************************************************************************************************************
void sensorsIterate() {
 800459c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

	// check if sensor is alive
	if ((systemTimeMS - lastSensorUpdateTimeMS) > 16) {				// max 16ms
 800459e:	4ebf      	ldr	r6, [pc, #764]	; (800489c <sensorsIterate+0x300>)
 80045a0:	4fbf      	ldr	r7, [pc, #764]	; (80048a0 <sensorsIterate+0x304>)
 80045a2:	6833      	ldr	r3, [r6, #0]
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d913      	bls.n	80045d4 <sensorsIterate+0x38>
		setMotorPositionControlOff();
 80045ac:	f7ff fdd6 	bl	800415c <setMotorPositionControlOff>
		setLEDBlink(100, 500);
 80045b0:	21fa      	movs	r1, #250	; 0xfa
 80045b2:	2064      	movs	r0, #100	; 0x64
 80045b4:	0049      	lsls	r1, r1, #1
 80045b6:	f7ff f9f9 	bl	80039ac <setLEDBlink>

		if (systemTimeMS < 1000) {
 80045ba:	4bba      	ldr	r3, [pc, #744]	; (80048a4 <sensorsIterate+0x308>)
 80045bc:	6832      	ldr	r2, [r6, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d808      	bhi.n	80045d4 <sensorsIterate+0x38>
  __ASM volatile ("dsb 0xF":::"memory");
 80045c2:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045c6:	4bb8      	ldr	r3, [pc, #736]	; (80048a8 <sensorsIterate+0x30c>)
 80045c8:	4ab8      	ldr	r2, [pc, #736]	; (80048ac <sensorsIterate+0x310>)
 80045ca:	60da      	str	r2, [r3, #12]
 80045cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80045d0:	46c0      	nop			; (mov r8, r8)
 80045d2:	e7fd      	b.n	80045d0 <sensorsIterate+0x34>
			NVIC_SystemReset();						// reset for a clean restart
		}
//		uartSendString("ALARM: Magnet Sensor not responding!");			// TODO: ALARM
	}

	switch (sensorSM) {						// execute the sensor state machine
 80045d4:	2281      	movs	r2, #129	; 0x81
 80045d6:	4cb6      	ldr	r4, [pc, #728]	; (80048b0 <sensorsIterate+0x314>)
 80045d8:	0052      	lsls	r2, r2, #1
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	4293      	cmp	r3, r2
 80045de:	d100      	bne.n	80045e2 <sensorsIterate+0x46>
 80045e0:	e1d0      	b.n	8004984 <sensorsIterate+0x3e8>
 80045e2:	dd00      	ble.n	80045e6 <sensorsIterate+0x4a>
 80045e4:	e0a2      	b.n	800472c <sensorsIterate+0x190>
 80045e6:	2b07      	cmp	r3, #7
 80045e8:	d100      	bne.n	80045ec <sensorsIterate+0x50>
 80045ea:	e125      	b.n	8004838 <sensorsIterate+0x29c>
 80045ec:	dc27      	bgt.n	800463e <sensorsIterate+0xa2>
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d100      	bne.n	80045f4 <sensorsIterate+0x58>
 80045f2:	e105      	b.n	8004800 <sensorsIterate+0x264>
 80045f4:	dc14      	bgt.n	8004620 <sensorsIterate+0x84>
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d100      	bne.n	80045fc <sensorsIterate+0x60>
 80045fa:	e0f0      	b.n	80047de <sensorsIterate+0x242>
 80045fc:	dd00      	ble.n	8004600 <sensorsIterate+0x64>
 80045fe:	e0f5      	b.n	80047ec <sensorsIterate+0x250>

	// ***********************************************************************************************************************	// BLOCK 0: I2C read mag Sensor
	case 0:										// start I2C inquiry

		I2C_SetAddress(0b1011110);// read from this address (compass on servo PCB)
 8004600:	205e      	movs	r0, #94	; 0x5e
	switch (sensorSM) {						// execute the sensor state machine
 8004602:	2b00      	cmp	r3, #0
 8004604:	d100      	bne.n	8004608 <sensorsIterate+0x6c>
 8004606:	e1a3      	b.n	8004950 <sensorsIterate+0x3b4>
	case 768:
		sensorSM = 0;									// just restart SM
		break;

	default:// this should not happen; signal error and restart state machine!
		uartSendStringDirect("Servo SM error: ");
 8004608:	48aa      	ldr	r0, [pc, #680]	; (80048b4 <sensorsIterate+0x318>)
 800460a:	f000 fce9 	bl	8004fe0 <uartSendStringDirect>
		uartSendHexLong(sensorSM);
 800460e:	6820      	ldr	r0, [r4, #0]
 8004610:	f000 fcf0 	bl	8004ff4 <uartSendHexLong>
		uartBusyWaitForTXDone();
 8004614:	f000 fc78 	bl	8004f08 <uartBusyWaitForTXDone>
		uartSendCharDirect('\n');
 8004618:	200a      	movs	r0, #10
 800461a:	f000 fcc9 	bl	8004fb0 <uartSendCharDirect>
 800461e:	e0dc      	b.n	80047da <sensorsIterate+0x23e>
 8004620:	4aa5      	ldr	r2, [pc, #660]	; (80048b8 <sensorsIterate+0x31c>)
 8004622:	2104      	movs	r1, #4
	switch (sensorSM) {						// execute the sensor state machine
 8004624:	2b05      	cmp	r3, #5
 8004626:	d100      	bne.n	800462a <sensorsIterate+0x8e>
 8004628:	e0fd      	b.n	8004826 <sensorsIterate+0x28a>
 800462a:	dc00      	bgt.n	800462e <sensorsIterate+0x92>
 800462c:	e0f2      	b.n	8004814 <sensorsIterate+0x278>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 800462e:	6993      	ldr	r3, [r2, #24]
 8004630:	420b      	tst	r3, r1
 8004632:	d07a      	beq.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[4] = I2C1->RXDR;					// read data
 8004634:	4ba1      	ldr	r3, [pc, #644]	; (80048bc <sensorsIterate+0x320>)
 8004636:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004638:	611a      	str	r2, [r3, #16]
			SENSORSM_ADVANCE_STATE();
 800463a:	2307      	movs	r3, #7
 800463c:	e0d4      	b.n	80047e8 <sensorsIterate+0x24c>
	switch (sensorSM) {						// execute the sensor state machine
 800463e:	2b0b      	cmp	r3, #11
 8004640:	d100      	bne.n	8004644 <sensorsIterate+0xa8>
 8004642:	e173      	b.n	800492c <sensorsIterate+0x390>
 8004644:	dc55      	bgt.n	80046f2 <sensorsIterate+0x156>
 8004646:	2b09      	cmp	r3, #9
 8004648:	d100      	bne.n	800464c <sensorsIterate+0xb0>
 800464a:	e109      	b.n	8004860 <sensorsIterate+0x2c4>
 800464c:	dc00      	bgt.n	8004650 <sensorsIterate+0xb4>
 800464e:	e0fd      	b.n	800484c <sensorsIterate+0x2b0>
		magIndexNew = (sensorReadDataI2C[3] & 0x0C) >> 2;
 8004650:	499a      	ldr	r1, [pc, #616]	; (80048bc <sensorsIterate+0x320>)
 8004652:	4a9b      	ldr	r2, [pc, #620]	; (80048c0 <sensorsIterate+0x324>)
 8004654:	68ce      	ldr	r6, [r1, #12]
 8004656:	0733      	lsls	r3, r6, #28
 8004658:	0f9b      	lsrs	r3, r3, #30
 800465a:	6013      	str	r3, [r2, #0]
		if (magIndexNew != magIndexOld) {
 800465c:	4a99      	ldr	r2, [pc, #612]	; (80048c4 <sensorsIterate+0x328>)
 800465e:	6810      	ldr	r0, [r2, #0]
 8004660:	4283      	cmp	r3, r0
 8004662:	d100      	bne.n	8004666 <sensorsIterate+0xca>
 8004664:	e152      	b.n	800490c <sensorsIterate+0x370>
				| ((sensorReadDataI2C[4] & 0xF0) >> 4);	// extract magnet sensor "longs"
 8004666:	250f      	movs	r5, #15
 8004668:	6908      	ldr	r0, [r1, #16]
			magIndexOld = magIndexNew;
 800466a:	6013      	str	r3, [r2, #0]
		sensorBx = (((long) sensorReadDataI2C[0]) << 4)
 800466c:	680b      	ldr	r3, [r1, #0]
				| ((sensorReadDataI2C[4] & 0xF0) >> 4);	// extract magnet sensor "longs"
 800466e:	1102      	asrs	r2, r0, #4
		sensorBx = (((long) sensorReadDataI2C[0]) << 4)
 8004670:	011b      	lsls	r3, r3, #4
				| ((sensorReadDataI2C[4] & 0xF0) >> 4);	// extract magnet sensor "longs"
 8004672:	402a      	ands	r2, r5
 8004674:	431a      	orrs	r2, r3
		sensorBy = (((long) sensorReadDataI2C[1]) << 4)
 8004676:	684b      	ldr	r3, [r1, #4]
				| ((sensorReadDataI2C[4] & 0x0F));
 8004678:	4028      	ands	r0, r5
		sensorBy = (((long) sensorReadDataI2C[1]) << 4)
 800467a:	011b      	lsls	r3, r3, #4
				| ((sensorReadDataI2C[4] & 0x0F));
 800467c:	4303      	orrs	r3, r0
		sensorBy = (((long) sensorReadDataI2C[1]) << 4)
 800467e:	4892      	ldr	r0, [pc, #584]	; (80048c8 <sensorsIterate+0x32c>)
		sensorTemp = (((long) (sensorReadDataI2C[3] & 0xF0)) << 4)
 8004680:	0136      	lsls	r6, r6, #4
		sensorBy = (((long) sensorReadDataI2C[1]) << 4)
 8004682:	6003      	str	r3, [r0, #0]
		sensorBz = (((long) sensorReadDataI2C[2]) << 4)
 8004684:	6888      	ldr	r0, [r1, #8]
		sensorBx = (((long) sensorReadDataI2C[0]) << 4)
 8004686:	4f91      	ldr	r7, [pc, #580]	; (80048cc <sensorsIterate+0x330>)
		sensorBz = (((long) sensorReadDataI2C[2]) << 4)
 8004688:	0100      	lsls	r0, r0, #4
 800468a:	9001      	str	r0, [sp, #4]
				| ((sensorReadDataI2C[5] & 0x0F));
 800468c:	0028      	movs	r0, r5
 800468e:	694d      	ldr	r5, [r1, #20]
		sensorBx = (((long) sensorReadDataI2C[0]) << 4)
 8004690:	603a      	str	r2, [r7, #0]
				| ((sensorReadDataI2C[5] & 0x0F));
 8004692:	4028      	ands	r0, r5
 8004694:	9d01      	ldr	r5, [sp, #4]
 8004696:	4328      	orrs	r0, r5
 8004698:	0005      	movs	r5, r0
		sensorBz = (((long) sensorReadDataI2C[2]) << 4)
 800469a:	488d      	ldr	r0, [pc, #564]	; (80048d0 <sensorsIterate+0x334>)
 800469c:	9001      	str	r0, [sp, #4]
 800469e:	6005      	str	r5, [r0, #0]
		sensorTemp = (((long) (sensorReadDataI2C[3] & 0xF0)) << 4)
 80046a0:	20f0      	movs	r0, #240	; 0xf0
 80046a2:	0100      	lsls	r0, r0, #4
 80046a4:	4030      	ands	r0, r6
				| (sensorReadDataI2C[6]);		// extract temperature as "long"
 80046a6:	698e      	ldr	r6, [r1, #24]
		sensorTemp = (((long) (sensorReadDataI2C[3] & 0xF0)) << 4)
 80046a8:	498a      	ldr	r1, [pc, #552]	; (80048d4 <sensorsIterate+0x338>)
				| (sensorReadDataI2C[6]);		// extract temperature as "long"
 80046aa:	4330      	orrs	r0, r6
		sensorTemp = (((long) (sensorReadDataI2C[3] & 0xF0)) << 4)
 80046ac:	6008      	str	r0, [r1, #0]
		if (sensorBx & 0x0800)
 80046ae:	2180      	movs	r1, #128	; 0x80
 80046b0:	0109      	lsls	r1, r1, #4
 80046b2:	420a      	tst	r2, r1
 80046b4:	d002      	beq.n	80046bc <sensorsIterate+0x120>
			sensorBx -= 4096;					// make magnetic values signed
 80046b6:	4888      	ldr	r0, [pc, #544]	; (80048d8 <sensorsIterate+0x33c>)
 80046b8:	1812      	adds	r2, r2, r0
 80046ba:	603a      	str	r2, [r7, #0]
		if (sensorBy & 0x0800)
 80046bc:	420b      	tst	r3, r1
 80046be:	d003      	beq.n	80046c8 <sensorsIterate+0x12c>
			sensorBy -= 4096;
 80046c0:	4a85      	ldr	r2, [pc, #532]	; (80048d8 <sensorsIterate+0x33c>)
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	4a80      	ldr	r2, [pc, #512]	; (80048c8 <sensorsIterate+0x32c>)
 80046c6:	6013      	str	r3, [r2, #0]
		if (sensorBz & 0x0800)
 80046c8:	002b      	movs	r3, r5
 80046ca:	420d      	tst	r5, r1
 80046cc:	d004      	beq.n	80046d8 <sensorsIterate+0x13c>
			sensorBz -= 4096;
 80046ce:	4a82      	ldr	r2, [pc, #520]	; (80048d8 <sensorsIterate+0x33c>)
 80046d0:	4694      	mov	ip, r2
 80046d2:	9a01      	ldr	r2, [sp, #4]
 80046d4:	4463      	add	r3, ip
 80046d6:	6013      	str	r3, [r2, #0]
		sensorBxf = (float) sensorBx;// convert the required ones to float in this iteration
 80046d8:	6838      	ldr	r0, [r7, #0]
 80046da:	f7fc fd2f 	bl	800113c <__aeabi_i2f>
 80046de:	4b7f      	ldr	r3, [pc, #508]	; (80048dc <sensorsIterate+0x340>)
 80046e0:	6018      	str	r0, [r3, #0]
		sensorByf = (float) sensorBy;
 80046e2:	4b79      	ldr	r3, [pc, #484]	; (80048c8 <sensorsIterate+0x32c>)
 80046e4:	6818      	ldr	r0, [r3, #0]
 80046e6:	f7fc fd29 	bl	800113c <__aeabi_i2f>
 80046ea:	4b7d      	ldr	r3, [pc, #500]	; (80048e0 <sensorsIterate+0x344>)
 80046ec:	6018      	str	r0, [r3, #0]
		SENSORSM_ADVANCE_STATE()
 80046ee:	230b      	movs	r3, #11
 80046f0:	e07a      	b.n	80047e8 <sensorsIterate+0x24c>
	switch (sensorSM) {						// execute the sensor state machine
 80046f2:	2580      	movs	r5, #128	; 0x80
 80046f4:	006d      	lsls	r5, r5, #1
 80046f6:	42ab      	cmp	r3, r5
 80046f8:	d100      	bne.n	80046fc <sensorsIterate+0x160>
 80046fa:	e122      	b.n	8004942 <sensorsIterate+0x3a6>
 80046fc:	dd00      	ble.n	8004700 <sensorsIterate+0x164>
 80046fe:	e13a      	b.n	8004976 <sensorsIterate+0x3da>
 8004700:	2b0c      	cmp	r3, #12
 8004702:	d000      	beq.n	8004706 <sensorsIterate+0x16a>
 8004704:	e780      	b.n	8004608 <sensorsIterate+0x6c>
		currentServoPosition = (long) ((2048.0f / M_PI) * sensorAngleF) + 2048;
 8004706:	4b77      	ldr	r3, [pc, #476]	; (80048e4 <sensorsIterate+0x348>)
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	f7fd f809 	bl	8001720 <__aeabi_f2d>
 800470e:	4b76      	ldr	r3, [pc, #472]	; (80048e8 <sensorsIterate+0x34c>)
 8004710:	4a76      	ldr	r2, [pc, #472]	; (80048ec <sensorsIterate+0x350>)
 8004712:	f7fc fd5d 	bl	80011d0 <__aeabi_dmul>
 8004716:	f7fc ffcd 	bl	80016b4 <__aeabi_d2iz>
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	18c0      	adds	r0, r0, r3
 8004720:	4b73      	ldr	r3, [pc, #460]	; (80048f0 <sensorsIterate+0x354>)
		SENSORSM_NEXT_BLOCK()
 8004722:	6025      	str	r5, [r4, #0]
		currentServoPosition = (long) ((2048.0f / M_PI) * sensorAngleF) + 2048;
 8004724:	6018      	str	r0, [r3, #0]
		lastSensorUpdateTimeMS = systemTimeMS;// remember THIS is the time when we got a new sensor update
 8004726:	6833      	ldr	r3, [r6, #0]
 8004728:	603b      	str	r3, [r7, #0]
		sensorSM = 0;
		break;
	}
}
 800472a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	switch (sensorSM) {						// execute the sensor state machine
 800472c:	2285      	movs	r2, #133	; 0x85
 800472e:	0052      	lsls	r2, r2, #1
 8004730:	4293      	cmp	r3, r2
 8004732:	d100      	bne.n	8004736 <sensorsIterate+0x19a>
 8004734:	e169      	b.n	8004a0a <sensorsIterate+0x46e>
 8004736:	dc30      	bgt.n	800479a <sensorsIterate+0x1fe>
 8004738:	3a04      	subs	r2, #4
 800473a:	4d5f      	ldr	r5, [pc, #380]	; (80048b8 <sensorsIterate+0x31c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d100      	bne.n	8004742 <sensorsIterate+0x1a6>
 8004740:	e13d      	b.n	80049be <sensorsIterate+0x422>
 8004742:	dc0e      	bgt.n	8004762 <sensorsIterate+0x1c6>
 8004744:	2082      	movs	r0, #130	; 0x82
 8004746:	2104      	movs	r1, #4
 8004748:	0040      	lsls	r0, r0, #1
 800474a:	4283      	cmp	r3, r0
 800474c:	d100      	bne.n	8004750 <sensorsIterate+0x1b4>
 800474e:	e12d      	b.n	80049ac <sensorsIterate+0x410>
 8004750:	dc00      	bgt.n	8004754 <sensorsIterate+0x1b8>
 8004752:	e122      	b.n	800499a <sensorsIterate+0x3fe>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 8004754:	69ab      	ldr	r3, [r5, #24]
 8004756:	420b      	tst	r3, r1
 8004758:	d0e7      	beq.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[3] = I2C1->RXDR;					// read data
 800475a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800475c:	4b57      	ldr	r3, [pc, #348]	; (80048bc <sensorsIterate+0x320>)
 800475e:	60d9      	str	r1, [r3, #12]
 8004760:	e10e      	b.n	8004980 <sensorsIterate+0x3e4>
	switch (sensorSM) {						// execute the sensor state machine
 8004762:	2284      	movs	r2, #132	; 0x84
 8004764:	0052      	lsls	r2, r2, #1
 8004766:	4293      	cmp	r3, r2
 8004768:	d100      	bne.n	800476c <sensorsIterate+0x1d0>
 800476a:	e139      	b.n	80049e0 <sensorsIterate+0x444>
 800476c:	dc00      	bgt.n	8004770 <sensorsIterate+0x1d4>
 800476e:	e12f      	b.n	80049d0 <sensorsIterate+0x434>
		if ((I2C1->ISR) & (I2C_ISR_STOPF)) {// we expect to see a stop here, so no message
 8004770:	2320      	movs	r3, #32
 8004772:	69aa      	ldr	r2, [r5, #24]
 8004774:	421a      	tst	r2, r3
 8004776:	d100      	bne.n	800477a <sensorsIterate+0x1de>
 8004778:	e0e7      	b.n	800494a <sensorsIterate+0x3ae>
		if ((I2C1->ISR) & (I2C_ISR_BERR)) {
 800477a:	2680      	movs	r6, #128	; 0x80
			I2C1->ICR |= I2C_ICR_STOPCF;
 800477c:	69ea      	ldr	r2, [r5, #28]
 800477e:	0076      	lsls	r6, r6, #1
 8004780:	4313      	orrs	r3, r2
 8004782:	61eb      	str	r3, [r5, #28]
		if ((I2C1->ISR) & (I2C_ISR_BERR)) {
 8004784:	69ab      	ldr	r3, [r5, #24]
 8004786:	4233      	tst	r3, r6
 8004788:	d100      	bne.n	800478c <sensorsIterate+0x1f0>
 800478a:	e132      	b.n	80049f2 <sensorsIterate+0x456>
			uartSendStringDirect("bus error detected");
 800478c:	4859      	ldr	r0, [pc, #356]	; (80048f4 <sensorsIterate+0x358>)
 800478e:	f000 fc27 	bl	8004fe0 <uartSendStringDirect>
			I2C1->ICR |= I2C_ICR_BERRCF;
 8004792:	69eb      	ldr	r3, [r5, #28]
 8004794:	431e      	orrs	r6, r3
 8004796:	61ee      	str	r6, [r5, #28]
 8004798:	e076      	b.n	8004888 <sensorsIterate+0x2ec>
	switch (sensorSM) {						// execute the sensor state machine
 800479a:	4a57      	ldr	r2, [pc, #348]	; (80048f8 <sensorsIterate+0x35c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d100      	bne.n	80047a2 <sensorsIterate+0x206>
 80047a0:	e164      	b.n	8004a6c <sensorsIterate+0x4d0>
 80047a2:	dc10      	bgt.n	80047c6 <sensorsIterate+0x22a>
 80047a4:	4955      	ldr	r1, [pc, #340]	; (80048fc <sensorsIterate+0x360>)
 80047a6:	428b      	cmp	r3, r1
 80047a8:	d100      	bne.n	80047ac <sensorsIterate+0x210>
 80047aa:	e14f      	b.n	8004a4c <sensorsIterate+0x4b0>
 80047ac:	dd00      	ble.n	80047b0 <sensorsIterate+0x214>
 80047ae:	e154      	b.n	8004a5a <sensorsIterate+0x4be>
 80047b0:	3a03      	subs	r2, #3
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d000      	beq.n	80047b8 <sensorsIterate+0x21c>
 80047b6:	e727      	b.n	8004608 <sensorsIterate+0x6c>
		if (footPressureSensorAddress == 0) {
 80047b8:	4b51      	ldr	r3, [pc, #324]	; (8004900 <sensorsIterate+0x364>)
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	2800      	cmp	r0, #0
 80047be:	d000      	beq.n	80047c2 <sensorsIterate+0x226>
 80047c0:	e13e      	b.n	8004a40 <sensorsIterate+0x4a4>
		SENSORSM_NEXT_BLOCK()
 80047c2:	23c0      	movs	r3, #192	; 0xc0
 80047c4:	e0c2      	b.n	800494c <sensorsIterate+0x3b0>
	switch (sensorSM) {						// execute the sensor state machine
 80047c6:	4a4f      	ldr	r2, [pc, #316]	; (8004904 <sensorsIterate+0x368>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d100      	bne.n	80047ce <sensorsIterate+0x232>
 80047cc:	e16d      	b.n	8004aaa <sensorsIterate+0x50e>
 80047ce:	da00      	bge.n	80047d2 <sensorsIterate+0x236>
 80047d0:	e156      	b.n	8004a80 <sensorsIterate+0x4e4>
 80047d2:	32fb      	adds	r2, #251	; 0xfb
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d000      	beq.n	80047da <sensorsIterate+0x23e>
 80047d8:	e716      	b.n	8004608 <sensorsIterate+0x6c>
		sensorSM = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	e004      	b.n	80047e8 <sensorsIterate+0x24c>
		if ((I2C1->CR2 & I2C_CR2_START) == 0) {	// wait for start bit to get cleared
 80047de:	4b36      	ldr	r3, [pc, #216]	; (80048b8 <sensorsIterate+0x31c>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	049b      	lsls	r3, r3, #18
 80047e4:	d4a1      	bmi.n	800472a <sensorsIterate+0x18e>
			SENSORSM_ADVANCE_STATE();
 80047e6:	2302      	movs	r3, #2
		sensorSM = 0;
 80047e8:	6023      	str	r3, [r4, #0]
}
 80047ea:	e79e      	b.n	800472a <sensorsIterate+0x18e>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 80047ec:	4b32      	ldr	r3, [pc, #200]	; (80048b8 <sensorsIterate+0x31c>)
 80047ee:	699a      	ldr	r2, [r3, #24]
 80047f0:	0752      	lsls	r2, r2, #29
 80047f2:	d400      	bmi.n	80047f6 <sensorsIterate+0x25a>
 80047f4:	e799      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[0] = I2C1->RXDR;					// read data
 80047f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047f8:	4b30      	ldr	r3, [pc, #192]	; (80048bc <sensorsIterate+0x320>)
 80047fa:	601a      	str	r2, [r3, #0]
			SENSORSM_ADVANCE_STATE();
 80047fc:	2303      	movs	r3, #3
 80047fe:	e7f3      	b.n	80047e8 <sensorsIterate+0x24c>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 8004800:	2304      	movs	r3, #4
 8004802:	4a2d      	ldr	r2, [pc, #180]	; (80048b8 <sensorsIterate+0x31c>)
 8004804:	6991      	ldr	r1, [r2, #24]
 8004806:	4219      	tst	r1, r3
 8004808:	d100      	bne.n	800480c <sensorsIterate+0x270>
 800480a:	e78e      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[1] = I2C1->RXDR;					// read data
 800480c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800480e:	4a2b      	ldr	r2, [pc, #172]	; (80048bc <sensorsIterate+0x320>)
 8004810:	6051      	str	r1, [r2, #4]
 8004812:	e7e9      	b.n	80047e8 <sensorsIterate+0x24c>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 8004814:	6993      	ldr	r3, [r2, #24]
 8004816:	420b      	tst	r3, r1
 8004818:	d100      	bne.n	800481c <sensorsIterate+0x280>
 800481a:	e786      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[2] = I2C1->RXDR;					// read data
 800481c:	4b27      	ldr	r3, [pc, #156]	; (80048bc <sensorsIterate+0x320>)
 800481e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004820:	609a      	str	r2, [r3, #8]
			SENSORSM_ADVANCE_STATE();
 8004822:	2305      	movs	r3, #5
 8004824:	e7e0      	b.n	80047e8 <sensorsIterate+0x24c>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 8004826:	6993      	ldr	r3, [r2, #24]
 8004828:	420b      	tst	r3, r1
 800482a:	d100      	bne.n	800482e <sensorsIterate+0x292>
 800482c:	e77d      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[3] = I2C1->RXDR;					// read data
 800482e:	4b23      	ldr	r3, [pc, #140]	; (80048bc <sensorsIterate+0x320>)
 8004830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004832:	60da      	str	r2, [r3, #12]
			SENSORSM_ADVANCE_STATE();
 8004834:	2306      	movs	r3, #6
 8004836:	e7d7      	b.n	80047e8 <sensorsIterate+0x24c>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 8004838:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <sensorsIterate+0x31c>)
 800483a:	699a      	ldr	r2, [r3, #24]
 800483c:	0752      	lsls	r2, r2, #29
 800483e:	d400      	bmi.n	8004842 <sensorsIterate+0x2a6>
 8004840:	e773      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[5] = I2C1->RXDR;					// read data
 8004842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <sensorsIterate+0x320>)
 8004846:	615a      	str	r2, [r3, #20]
			SENSORSM_ADVANCE_STATE();
 8004848:	2308      	movs	r3, #8
 800484a:	e7cd      	b.n	80047e8 <sensorsIterate+0x24c>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 800484c:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <sensorsIterate+0x31c>)
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	0752      	lsls	r2, r2, #29
 8004852:	d400      	bmi.n	8004856 <sensorsIterate+0x2ba>
 8004854:	e769      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[6] = I2C1->RXDR;					// read data
 8004856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004858:	4b18      	ldr	r3, [pc, #96]	; (80048bc <sensorsIterate+0x320>)
 800485a:	619a      	str	r2, [r3, #24]
			SENSORSM_ADVANCE_STATE();
 800485c:	2309      	movs	r3, #9
 800485e:	e7c3      	b.n	80047e8 <sensorsIterate+0x24c>
		if ((I2C1->ISR) & (I2C_ISR_STOPF)) {// we expect to see a stop here, so no message
 8004860:	2320      	movs	r3, #32
 8004862:	4e15      	ldr	r6, [pc, #84]	; (80048b8 <sensorsIterate+0x31c>)
 8004864:	69b2      	ldr	r2, [r6, #24]
 8004866:	0035      	movs	r5, r6
 8004868:	421a      	tst	r2, r3
 800486a:	d04f      	beq.n	800490c <sensorsIterate+0x370>
		if ((I2C1->ISR) & (I2C_ISR_BERR)) {
 800486c:	2780      	movs	r7, #128	; 0x80
			I2C1->ICR |= I2C_ICR_STOPCF;
 800486e:	69f2      	ldr	r2, [r6, #28]
		if ((I2C1->ISR) & (I2C_ISR_BERR)) {
 8004870:	007f      	lsls	r7, r7, #1
			I2C1->ICR |= I2C_ICR_STOPCF;
 8004872:	4313      	orrs	r3, r2
 8004874:	61f3      	str	r3, [r6, #28]
		if ((I2C1->ISR) & (I2C_ISR_BERR)) {
 8004876:	69b3      	ldr	r3, [r6, #24]
 8004878:	423b      	tst	r3, r7
 800487a:	d04a      	beq.n	8004912 <sensorsIterate+0x376>
			uartSendStringDirect("bus error detected");
 800487c:	481d      	ldr	r0, [pc, #116]	; (80048f4 <sensorsIterate+0x358>)
 800487e:	f000 fbaf 	bl	8004fe0 <uartSendStringDirect>
			I2C1->ICR |= I2C_ICR_BERRCF;
 8004882:	69f3      	ldr	r3, [r6, #28]
 8004884:	431f      	orrs	r7, r3
 8004886:	61f7      	str	r7, [r6, #28]
			uartSendStringDirect(" - flag cleared\n");
 8004888:	481f      	ldr	r0, [pc, #124]	; (8004908 <sensorsIterate+0x36c>)
 800488a:	f000 fba9 	bl	8004fe0 <uartSendStringDirect>
			SENSORSM_NEXT_BLOCK();
 800488e:	23ff      	movs	r3, #255	; 0xff
 8004890:	6822      	ldr	r2, [r4, #0]
 8004892:	439a      	bics	r2, r3
 8004894:	0013      	movs	r3, r2
 8004896:	3301      	adds	r3, #1
 8004898:	e07d      	b.n	8004996 <sensorsIterate+0x3fa>
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	200002f4 	.word	0x200002f4
 80048a0:	20000234 	.word	0x20000234
 80048a4:	000003e7 	.word	0x000003e7
 80048a8:	e000ed00 	.word	0xe000ed00
 80048ac:	05fa0004 	.word	0x05fa0004
 80048b0:	20000244 	.word	0x20000244
 80048b4:	08005e89 	.word	0x08005e89
 80048b8:	40005400 	.word	0x40005400
 80048bc:	200004bc 	.word	0x200004bc
 80048c0:	20000238 	.word	0x20000238
 80048c4:	2000023c 	.word	0x2000023c
 80048c8:	200004f8 	.word	0x200004f8
 80048cc:	200004dc 	.word	0x200004dc
 80048d0:	200004e4 	.word	0x200004e4
 80048d4:	200004ec 	.word	0x200004ec
 80048d8:	fffff000 	.word	0xfffff000
 80048dc:	200004b4 	.word	0x200004b4
 80048e0:	200004f4 	.word	0x200004f4
 80048e4:	200004f0 	.word	0x200004f0
 80048e8:	40845f30 	.word	0x40845f30
 80048ec:	6dc9c883 	.word	0x6dc9c883
 80048f0:	2000001c 	.word	0x2000001c
 80048f4:	08005e51 	.word	0x08005e51
 80048f8:	00000203 	.word	0x00000203
 80048fc:	00000201 	.word	0x00000201
 8004900:	20000228 	.word	0x20000228
 8004904:	00000205 	.word	0x00000205
 8004908:	08005e40 	.word	0x08005e40
			SENSORSM_NEXT_BLOCK();
 800490c:	2380      	movs	r3, #128	; 0x80
		SENSORSM_ADVANCE_STATE()
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	e76a      	b.n	80047e8 <sensorsIterate+0x24c>
		if ((I2C1->ISR) & (I2C_ISR_NACKF)) {
 8004912:	69b3      	ldr	r3, [r6, #24]
 8004914:	06db      	lsls	r3, r3, #27
 8004916:	d507      	bpl.n	8004928 <sensorsIterate+0x38c>
			uartSendString("failure - no ack");
 8004918:	4868      	ldr	r0, [pc, #416]	; (8004abc <sensorsIterate+0x520>)
 800491a:	f000 fb3f 	bl	8004f9c <uartSendString>
			I2C1->ICR |= I2C_ICR_NACKCF;
 800491e:	2310      	movs	r3, #16
 8004920:	69f2      	ldr	r2, [r6, #28]
 8004922:	4313      	orrs	r3, r2
			I2C1->ICR |= I2C_ICR_NACKCF;
 8004924:	61eb      	str	r3, [r5, #28]
 8004926:	e7af      	b.n	8004888 <sensorsIterate+0x2ec>
		SENSORSM_ADVANCE_STATE()
 8004928:	230a      	movs	r3, #10
 800492a:	e75d      	b.n	80047e8 <sensorsIterate+0x24c>
		sensorAngleF = atan2f(sensorBxf, sensorByf);// compute only atan2 in this iteration (to be really fast back for control)
 800492c:	4b64      	ldr	r3, [pc, #400]	; (8004ac0 <sensorsIterate+0x524>)
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	4b64      	ldr	r3, [pc, #400]	; (8004ac4 <sensorsIterate+0x528>)
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	f001 f836 	bl	80059a4 <atan2f>
 8004938:	4b63      	ldr	r3, [pc, #396]	; (8004ac8 <sensorsIterate+0x52c>)
 800493a:	6018      	str	r0, [r3, #0]
		SENSORSM_ADVANCE_STATE()
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	e752      	b.n	80047e8 <sensorsIterate+0x24c>
		if (magnetSensorKneeAddress == 0) {
 8004942:	4b62      	ldr	r3, [pc, #392]	; (8004acc <sensorsIterate+0x530>)
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	2800      	cmp	r0, #0
 8004948:	d102      	bne.n	8004950 <sensorsIterate+0x3b4>
		SENSORSM_NEXT_BLOCK()
 800494a:	2380      	movs	r3, #128	; 0x80
		SENSORSM_NEXT_BLOCK()
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	e74b      	b.n	80047e8 <sensorsIterate+0x24c>
		I2C_SetAddress(magnetSensorKneeAddress);// read from this address (compass on knee PCB)
 8004950:	f7ff fc22 	bl	8004198 <I2C_SetAddress>
		I2C_SetRead();									// read data
 8004954:	f7ff fc0c 	bl	8004170 <I2C_SetRead>
		I2C_SetNumberOfBytesToTransmit(7);// set how many bytes to be transmitted
 8004958:	2007      	movs	r0, #7
		I2C_SetNumberOfBytesToTransmit(2);// set how many bytes to be transmitted
 800495a:	f7ff fc2b 	bl	80041b4 <I2C_SetNumberOfBytesToTransmit>
		I2C1->CR2 |= BIT(25);// automatic end mode; (i.e. automatically send "end" after number of bytes are transmitted)
 800495e:	2280      	movs	r2, #128	; 0x80
 8004960:	4b5b      	ldr	r3, [pc, #364]	; (8004ad0 <sensorsIterate+0x534>)
 8004962:	0492      	lsls	r2, r2, #18
 8004964:	6859      	ldr	r1, [r3, #4]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
		I2C1->CR2 |= I2C_CR2_START;				// generate I2C start condition
 800496a:	2280      	movs	r2, #128	; 0x80
 800496c:	6859      	ldr	r1, [r3, #4]
 800496e:	0192      	lsls	r2, r2, #6
 8004970:	430a      	orrs	r2, r1
 8004972:	605a      	str	r2, [r3, #4]
 8004974:	e7e2      	b.n	800493c <sensorsIterate+0x3a0>
		if ((I2C1->CR2 & I2C_CR2_START) == 0) {	// wait for start bit to get cleared
 8004976:	4b56      	ldr	r3, [pc, #344]	; (8004ad0 <sensorsIterate+0x534>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	049b      	lsls	r3, r3, #18
 800497c:	d500      	bpl.n	8004980 <sensorsIterate+0x3e4>
 800497e:	e6d4      	b.n	800472a <sensorsIterate+0x18e>
		SENSORSM_ADVANCE_STATE()
 8004980:	6022      	str	r2, [r4, #0]
		break;
 8004982:	e6d2      	b.n	800472a <sensorsIterate+0x18e>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 8004984:	4b52      	ldr	r3, [pc, #328]	; (8004ad0 <sensorsIterate+0x534>)
 8004986:	699a      	ldr	r2, [r3, #24]
 8004988:	0752      	lsls	r2, r2, #29
 800498a:	d400      	bmi.n	800498e <sensorsIterate+0x3f2>
 800498c:	e6cd      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[0] = I2C1->RXDR;					// read data
 800498e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004990:	4b50      	ldr	r3, [pc, #320]	; (8004ad4 <sensorsIterate+0x538>)
 8004992:	601a      	str	r2, [r3, #0]
			SENSORSM_ADVANCE_STATE();
 8004994:	2304      	movs	r3, #4
			SENSORSM_NEXT_BLOCK();
 8004996:	33ff      	adds	r3, #255	; 0xff
 8004998:	e726      	b.n	80047e8 <sensorsIterate+0x24c>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 800499a:	69ab      	ldr	r3, [r5, #24]
 800499c:	420b      	tst	r3, r1
 800499e:	d100      	bne.n	80049a2 <sensorsIterate+0x406>
 80049a0:	e6c3      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[1] = I2C1->RXDR;					// read data
 80049a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80049a4:	4b4b      	ldr	r3, [pc, #300]	; (8004ad4 <sensorsIterate+0x538>)
			SENSORSM_ADVANCE_STATE();
 80049a6:	6020      	str	r0, [r4, #0]
			sensorReadDataI2C[1] = I2C1->RXDR;					// read data
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	e6be      	b.n	800472a <sensorsIterate+0x18e>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 80049ac:	69ab      	ldr	r3, [r5, #24]
 80049ae:	420b      	tst	r3, r1
 80049b0:	d100      	bne.n	80049b4 <sensorsIterate+0x418>
 80049b2:	e6ba      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[2] = I2C1->RXDR;					// read data
 80049b4:	4b47      	ldr	r3, [pc, #284]	; (8004ad4 <sensorsIterate+0x538>)
 80049b6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80049b8:	609a      	str	r2, [r3, #8]
			SENSORSM_ADVANCE_STATE();
 80049ba:	2306      	movs	r3, #6
 80049bc:	e7eb      	b.n	8004996 <sensorsIterate+0x3fa>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 80049be:	69ab      	ldr	r3, [r5, #24]
 80049c0:	075b      	lsls	r3, r3, #29
 80049c2:	d400      	bmi.n	80049c6 <sensorsIterate+0x42a>
 80049c4:	e6b1      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[4] = I2C1->RXDR;					// read data
 80049c6:	4b43      	ldr	r3, [pc, #268]	; (8004ad4 <sensorsIterate+0x538>)
 80049c8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80049ca:	611a      	str	r2, [r3, #16]
			SENSORSM_ADVANCE_STATE();
 80049cc:	2308      	movs	r3, #8
 80049ce:	e7e2      	b.n	8004996 <sensorsIterate+0x3fa>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 80049d0:	69ab      	ldr	r3, [r5, #24]
 80049d2:	075b      	lsls	r3, r3, #29
 80049d4:	d400      	bmi.n	80049d8 <sensorsIterate+0x43c>
 80049d6:	e6a8      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[5] = I2C1->RXDR;					// read data
 80049d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80049da:	4b3e      	ldr	r3, [pc, #248]	; (8004ad4 <sensorsIterate+0x538>)
 80049dc:	6159      	str	r1, [r3, #20]
 80049de:	e7cf      	b.n	8004980 <sensorsIterate+0x3e4>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 80049e0:	69ab      	ldr	r3, [r5, #24]
 80049e2:	075b      	lsls	r3, r3, #29
 80049e4:	d400      	bmi.n	80049e8 <sensorsIterate+0x44c>
 80049e6:	e6a0      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[6] = I2C1->RXDR;					// read data
 80049e8:	4b3a      	ldr	r3, [pc, #232]	; (8004ad4 <sensorsIterate+0x538>)
 80049ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80049ec:	619a      	str	r2, [r3, #24]
			SENSORSM_ADVANCE_STATE();
 80049ee:	230a      	movs	r3, #10
 80049f0:	e7d1      	b.n	8004996 <sensorsIterate+0x3fa>
		if ((I2C1->ISR) & (I2C_ISR_NACKF)) {
 80049f2:	2610      	movs	r6, #16
 80049f4:	69ab      	ldr	r3, [r5, #24]
 80049f6:	4233      	tst	r3, r6
 80049f8:	d005      	beq.n	8004a06 <sensorsIterate+0x46a>
			uartSendString("failure - no ack");
 80049fa:	4830      	ldr	r0, [pc, #192]	; (8004abc <sensorsIterate+0x520>)
 80049fc:	f000 face 	bl	8004f9c <uartSendString>
			I2C1->ICR |= I2C_ICR_NACKCF;
 8004a00:	69eb      	ldr	r3, [r5, #28]
 8004a02:	4333      	orrs	r3, r6
 8004a04:	e78e      	b.n	8004924 <sensorsIterate+0x388>
		SENSORSM_ADVANCE_STATE()
 8004a06:	2385      	movs	r3, #133	; 0x85
 8004a08:	e781      	b.n	800490e <sensorsIterate+0x372>
		kneeMagIndexNew = sensorReadDataI2C[6] & 0x03;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	4831      	ldr	r0, [pc, #196]	; (8004ad4 <sensorsIterate+0x538>)
 8004a0e:	6982      	ldr	r2, [r0, #24]
 8004a10:	4013      	ands	r3, r2
 8004a12:	4a31      	ldr	r2, [pc, #196]	; (8004ad8 <sensorsIterate+0x53c>)
 8004a14:	6013      	str	r3, [r2, #0]
		if (kneeMagIndexNew != kneeMagIndexOld) {
 8004a16:	4a31      	ldr	r2, [pc, #196]	; (8004adc <sensorsIterate+0x540>)
 8004a18:	6811      	ldr	r1, [r2, #0]
 8004a1a:	428b      	cmp	r3, r1
 8004a1c:	d095      	beq.n	800494a <sensorsIterate+0x3ae>
				| ((sensorReadDataI2C[4] & 0xF0) >> 4);
 8004a1e:	260f      	movs	r6, #15
 8004a20:	6901      	ldr	r1, [r0, #16]
			kneeMagIndexOld = kneeMagIndexNew;
 8004a22:	6013      	str	r3, [r2, #0]
		kneeBx = (((long) sensorReadDataI2C[0]) << 4)
 8004a24:	6803      	ldr	r3, [r0, #0]
				| ((sensorReadDataI2C[4] & 0xF0) >> 4);
 8004a26:	110d      	asrs	r5, r1, #4
		kneeBx = (((long) sensorReadDataI2C[0]) << 4)
 8004a28:	011a      	lsls	r2, r3, #4
				| ((sensorReadDataI2C[4] & 0xF0) >> 4);
 8004a2a:	4035      	ands	r5, r6
		kneeBx = (((long) sensorReadDataI2C[0]) << 4)
 8004a2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ae0 <sensorsIterate+0x544>)
				| ((sensorReadDataI2C[4] & 0xF0) >> 4);
 8004a2e:	432a      	orrs	r2, r5
		kneeBx = (((long) sensorReadDataI2C[0]) << 4)
 8004a30:	601a      	str	r2, [r3, #0]
		kneeBy = (((long) sensorReadDataI2C[1]) << 4)
 8004a32:	6843      	ldr	r3, [r0, #4]
				| ((sensorReadDataI2C[4] & 0x0F));
 8004a34:	4031      	ands	r1, r6
		kneeBy = (((long) sensorReadDataI2C[1]) << 4)
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	4a2a      	ldr	r2, [pc, #168]	; (8004ae4 <sensorsIterate+0x548>)
				| ((sensorReadDataI2C[4] & 0x0F));
 8004a3a:	430b      	orrs	r3, r1
		kneeBy = (((long) sensorReadDataI2C[1]) << 4)
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e784      	b.n	800494a <sensorsIterate+0x3ae>
		I2C_SetAddress(footPressureSensorAddress);// read from this address (foot pressure on sensor PCB)
 8004a40:	f7ff fbaa 	bl	8004198 <I2C_SetAddress>
		I2C_SetRead();									// read data
 8004a44:	f7ff fb94 	bl	8004170 <I2C_SetRead>
		I2C_SetNumberOfBytesToTransmit(2);// set how many bytes to be transmitted
 8004a48:	2002      	movs	r0, #2
 8004a4a:	e786      	b.n	800495a <sensorsIterate+0x3be>
		if ((I2C1->CR2 & I2C_CR2_START) == 0) {	// wait for start bit to get cleared
 8004a4c:	4b20      	ldr	r3, [pc, #128]	; (8004ad0 <sensorsIterate+0x534>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	049b      	lsls	r3, r3, #18
 8004a52:	d500      	bpl.n	8004a56 <sensorsIterate+0x4ba>
 8004a54:	e669      	b.n	800472a <sensorsIterate+0x18e>
			SENSORSM_ADVANCE_STATE();
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <sensorsIterate+0x54c>)
 8004a58:	e6c6      	b.n	80047e8 <sensorsIterate+0x24c>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 8004a5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <sensorsIterate+0x534>)
 8004a5c:	6999      	ldr	r1, [r3, #24]
 8004a5e:	0749      	lsls	r1, r1, #29
 8004a60:	d400      	bmi.n	8004a64 <sensorsIterate+0x4c8>
 8004a62:	e662      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[0] = I2C1->RXDR;					// read data
 8004a64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004a66:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <sensorsIterate+0x538>)
 8004a68:	6019      	str	r1, [r3, #0]
 8004a6a:	e789      	b.n	8004980 <sensorsIterate+0x3e4>
		if ((I2C1->ISR) & I2C_ISR_RXNE) {
 8004a6c:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <sensorsIterate+0x534>)
 8004a6e:	699a      	ldr	r2, [r3, #24]
 8004a70:	0752      	lsls	r2, r2, #29
 8004a72:	d400      	bmi.n	8004a76 <sensorsIterate+0x4da>
 8004a74:	e659      	b.n	800472a <sensorsIterate+0x18e>
			sensorReadDataI2C[1] = I2C1->RXDR;					// read data
 8004a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a78:	4b16      	ldr	r3, [pc, #88]	; (8004ad4 <sensorsIterate+0x538>)
 8004a7a:	605a      	str	r2, [r3, #4]
			SENSORSM_ADVANCE_STATE();
 8004a7c:	2381      	movs	r3, #129	; 0x81
 8004a7e:	e765      	b.n	800494c <sensorsIterate+0x3b0>
		if ((I2C1->ISR) & (I2C_ISR_STOPF)) {// we expect to see a stop here, so no message
 8004a80:	2320      	movs	r3, #32
 8004a82:	4d13      	ldr	r5, [pc, #76]	; (8004ad0 <sensorsIterate+0x534>)
 8004a84:	69a9      	ldr	r1, [r5, #24]
 8004a86:	4219      	tst	r1, r3
 8004a88:	d100      	bne.n	8004a8c <sensorsIterate+0x4f0>
 8004a8a:	e69a      	b.n	80047c2 <sensorsIterate+0x226>
		if ((I2C1->ISR) & (I2C_ISR_BERR)) {
 8004a8c:	2680      	movs	r6, #128	; 0x80
			I2C1->ICR |= I2C_ICR_STOPCF;
 8004a8e:	69e9      	ldr	r1, [r5, #28]
 8004a90:	0076      	lsls	r6, r6, #1
 8004a92:	430b      	orrs	r3, r1
 8004a94:	61eb      	str	r3, [r5, #28]
		if ((I2C1->ISR) & (I2C_ISR_BERR)) {
 8004a96:	69ab      	ldr	r3, [r5, #24]
 8004a98:	4233      	tst	r3, r6
 8004a9a:	d000      	beq.n	8004a9e <sensorsIterate+0x502>
 8004a9c:	e676      	b.n	800478c <sensorsIterate+0x1f0>
		if ((I2C1->ISR) & (I2C_ISR_NACKF)) {
 8004a9e:	2610      	movs	r6, #16
 8004aa0:	69ab      	ldr	r3, [r5, #24]
 8004aa2:	4233      	tst	r3, r6
 8004aa4:	d100      	bne.n	8004aa8 <sensorsIterate+0x50c>
 8004aa6:	e76b      	b.n	8004980 <sensorsIterate+0x3e4>
 8004aa8:	e7a7      	b.n	80049fa <sensorsIterate+0x45e>
		footPressureReading = (sensorReadDataI2C[0] << 8)
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <sensorsIterate+0x538>)
 8004aac:	6813      	ldr	r3, [r2, #0]
				| (sensorReadDataI2C[1]);
 8004aae:	6852      	ldr	r2, [r2, #4]
		footPressureReading = (sensorReadDataI2C[0] << 8)
 8004ab0:	021b      	lsls	r3, r3, #8
				| (sensorReadDataI2C[1]);
 8004ab2:	4313      	orrs	r3, r2
		footPressureReading = (sensorReadDataI2C[0] << 8)
 8004ab4:	4a0d      	ldr	r2, [pc, #52]	; (8004aec <sensorsIterate+0x550>)
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e683      	b.n	80047c2 <sensorsIterate+0x226>
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	08005e64 	.word	0x08005e64
 8004ac0:	200004f4 	.word	0x200004f4
 8004ac4:	200004b4 	.word	0x200004b4
 8004ac8:	200004f0 	.word	0x200004f0
 8004acc:	20000240 	.word	0x20000240
 8004ad0:	40005400 	.word	0x40005400
 8004ad4:	200004bc 	.word	0x200004bc
 8004ad8:	2000022c 	.word	0x2000022c
 8004adc:	20000230 	.word	0x20000230
 8004ae0:	200004e8 	.word	0x200004e8
 8004ae4:	200004d8 	.word	0x200004d8
 8004ae8:	00000202 	.word	0x00000202
 8004aec:	200004e0 	.word	0x200004e0

08004af0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af0:	2201      	movs	r2, #1
 8004af2:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_MspInit+0x18>)
 8004af4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004af6:	430a      	orrs	r2, r1
 8004af8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004afa:	2280      	movs	r2, #128	; 0x80
 8004afc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004afe:	0552      	lsls	r2, r2, #21
 8004b00:	430a      	orrs	r2, r1
 8004b02:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b04:	4770      	bx	lr
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	40021000 	.word	0x40021000

08004b0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b0c:	b510      	push	{r4, lr}
 8004b0e:	0004      	movs	r4, r0
 8004b10:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b12:	2214      	movs	r2, #20
 8004b14:	2100      	movs	r1, #0
 8004b16:	a801      	add	r0, sp, #4
 8004b18:	f000 fee2 	bl	80058e0 <memset>
  if(hadc->Instance==ADC1)
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_ADC_MspInit+0x4c>)
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d116      	bne.n	8004b52 <HAL_ADC_MspInit+0x46>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b24:	2280      	movs	r2, #128	; 0x80
 8004b26:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <HAL_ADC_MspInit+0x50>)
 8004b28:	0092      	lsls	r2, r2, #2
 8004b2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA5     ------> ADC_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b2c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b2e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b30:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b32:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b36:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	400b      	ands	r3, r1
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8004b44:	2323      	movs	r3, #35	; 0x23
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b46:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8004b48:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b4a:	3b20      	subs	r3, #32
 8004b4c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4e:	f7fd fb4b 	bl	80021e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004b52:	b006      	add	sp, #24
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	40012400 	.word	0x40012400
 8004b5c:	40021000 	.word	0x40021000

08004b60 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <HAL_ADC_MspDeInit+0x20>)
 8004b62:	6802      	ldr	r2, [r0, #0]
{
 8004b64:	b510      	push	{r4, lr}
  if(hadc->Instance==ADC1)
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d109      	bne.n	8004b7e <HAL_ADC_MspDeInit+0x1e>
    /**ADC GPIO Configuration    
    PA0-CK_IN     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA5     ------> ADC_IN5 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5);
 8004b6a:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_DISABLE();
 8004b6c:	4a05      	ldr	r2, [pc, #20]	; (8004b84 <HAL_ADC_MspDeInit+0x24>)
 8004b6e:	4906      	ldr	r1, [pc, #24]	; (8004b88 <HAL_ADC_MspDeInit+0x28>)
 8004b70:	6b53      	ldr	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5);
 8004b72:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_DISABLE();
 8004b74:	400b      	ands	r3, r1
 8004b76:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5);
 8004b78:	2123      	movs	r1, #35	; 0x23
 8004b7a:	f7fd fbe1 	bl	8002340 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 8004b7e:	bd10      	pop	{r4, pc}
 8004b80:	40012400 	.word	0x40012400
 8004b84:	40021000 	.word	0x40021000
 8004b88:	fffffdff 	.word	0xfffffdff

08004b8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b8c:	b510      	push	{r4, lr}
 8004b8e:	0004      	movs	r4, r0
 8004b90:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b92:	2214      	movs	r2, #20
 8004b94:	2100      	movs	r1, #0
 8004b96:	a801      	add	r0, sp, #4
 8004b98:	f000 fea2 	bl	80058e0 <memset>
  if(hi2c->Instance==I2C1)
 8004b9c:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <HAL_I2C_MspInit+0x54>)
 8004b9e:	6822      	ldr	r2, [r4, #0]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d11a      	bne.n	8004bda <HAL_I2C_MspInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	4c0f      	ldr	r4, [pc, #60]	; (8004be4 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ba8:	480f      	ldr	r0, [pc, #60]	; (8004be8 <HAL_I2C_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004baa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004bac:	430a      	orrs	r2, r1
 8004bae:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004bb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bb2:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bb4:	400b      	ands	r3, r1
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004bba:	23c0      	movs	r3, #192	; 0xc0
 8004bbc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004bbe:	3bae      	subs	r3, #174	; 0xae
 8004bc0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bc2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bc4:	3b11      	subs	r3, #17
 8004bc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bc8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004bca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bcc:	f7fd fb0c 	bl	80021e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bd0:	2380      	movs	r3, #128	; 0x80
 8004bd2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004bd4:	039b      	lsls	r3, r3, #14
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004bda:	b006      	add	sp, #24
 8004bdc:	bd10      	pop	{r4, pc}
 8004bde:	46c0      	nop			; (mov r8, r8)
 8004be0:	40005400 	.word	0x40005400
 8004be4:	40021000 	.word	0x40021000
 8004be8:	50000400 	.word	0x50000400

08004bec <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 8004bec:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <HAL_I2C_MspDeInit+0x20>)
 8004bee:	6802      	ldr	r2, [r0, #0]
{
 8004bf0:	b510      	push	{r4, lr}
  if(hi2c->Instance==I2C1)
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d108      	bne.n	8004c08 <HAL_I2C_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004bf6:	4a06      	ldr	r2, [pc, #24]	; (8004c10 <HAL_I2C_MspDeInit+0x24>)
 8004bf8:	4906      	ldr	r1, [pc, #24]	; (8004c14 <HAL_I2C_MspDeInit+0x28>)
 8004bfa:	6b93      	ldr	r3, [r2, #56]	; 0x38
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8004bfc:	4806      	ldr	r0, [pc, #24]	; (8004c18 <HAL_I2C_MspDeInit+0x2c>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004bfe:	400b      	ands	r3, r1
 8004c00:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8004c02:	21c0      	movs	r1, #192	; 0xc0
 8004c04:	f7fd fb9c 	bl	8002340 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8004c08:	bd10      	pop	{r4, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	40005400 	.word	0x40005400
 8004c10:	40021000 	.word	0x40021000
 8004c14:	ffdfffff 	.word	0xffdfffff
 8004c18:	50000400 	.word	0x50000400

08004c1c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8004c1c:	2280      	movs	r2, #128	; 0x80
 8004c1e:	6803      	ldr	r3, [r0, #0]
 8004c20:	05d2      	lsls	r2, r2, #23
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d105      	bne.n	8004c32 <HAL_TIM_Base_MspInit+0x16>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c26:	2301      	movs	r3, #1
 8004c28:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <HAL_TIM_Base_MspInit+0x38>)
 8004c2a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8004c30:	4770      	bx	lr
  else if(htim_base->Instance==TIM21)
 8004c32:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <HAL_TIM_Base_MspInit+0x3c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d105      	bne.n	8004c44 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8004c38:	2304      	movs	r3, #4
 8004c3a:	4a06      	ldr	r2, [pc, #24]	; (8004c54 <HAL_TIM_Base_MspInit+0x38>)
 8004c3c:	6b51      	ldr	r1, [r2, #52]	; 0x34
    __HAL_RCC_TIM22_CLK_ENABLE();
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004c42:	e7f5      	b.n	8004c30 <HAL_TIM_Base_MspInit+0x14>
  else if(htim_base->Instance==TIM22)
 8004c44:	4a05      	ldr	r2, [pc, #20]	; (8004c5c <HAL_TIM_Base_MspInit+0x40>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d1f2      	bne.n	8004c30 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8004c4a:	4a02      	ldr	r2, [pc, #8]	; (8004c54 <HAL_TIM_Base_MspInit+0x38>)
 8004c4c:	2320      	movs	r3, #32
 8004c4e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004c50:	e7f5      	b.n	8004c3e <HAL_TIM_Base_MspInit+0x22>
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40010800 	.word	0x40010800
 8004c5c:	40011400 	.word	0x40011400

08004c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c60:	b510      	push	{r4, lr}
 8004c62:	0004      	movs	r4, r0
 8004c64:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c66:	2214      	movs	r2, #20
 8004c68:	2100      	movs	r1, #0
 8004c6a:	a803      	add	r0, sp, #12
 8004c6c:	f000 fe38 	bl	80058e0 <memset>
  if(htim->Instance==TIM2)
 8004c70:	2280      	movs	r2, #128	; 0x80
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	05d2      	lsls	r2, r2, #23
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d128      	bne.n	8004ccc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c7a:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c7c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c7e:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <HAL_TIM_MspPostInit+0x98>)
 8004c80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c82:	4301      	orrs	r1, r0
 8004c84:	62d9      	str	r1, [r3, #44]	; 0x2c
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c88:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c8a:	4002      	ands	r2, r0
 8004c8c:	9200      	str	r2, [sp, #0]
 8004c8e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c92:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c94:	4322      	orrs	r2, r4
 8004c96:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c9a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c9c:	4023      	ands	r3, r4
 8004c9e:	9301      	str	r3, [sp, #4]
 8004ca0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ca2:	2380      	movs	r3, #128	; 0x80
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8004ca8:	3bfb      	subs	r3, #251	; 0xfb
 8004caa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cac:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cae:	f7fd fa9b 	bl	80021e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb6:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb8:	4810      	ldr	r0, [pc, #64]	; (8004cfc <HAL_TIM_MspPostInit+0x9c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cba:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cbc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cbe:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004cc0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cc2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cc4:	f7fd fa90 	bl	80021e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM22_MspPostInit 1 */

  /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8004cc8:	b008      	add	sp, #32
 8004cca:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM22)
 8004ccc:	4a0c      	ldr	r2, [pc, #48]	; (8004d00 <HAL_TIM_MspPostInit+0xa0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d1fa      	bne.n	8004cc8 <HAL_TIM_MspPostInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <HAL_TIM_MspPostInit+0x98>)
 8004cd6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004cd8:	4301      	orrs	r1, r0
 8004cda:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004cdc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cde:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ce0:	4003      	ands	r3, r0
 8004ce2:	9302      	str	r3, [sp, #8]
 8004ce4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004ce6:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce8:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004cea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cec:	3b3e      	subs	r3, #62	; 0x3e
 8004cee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM22;
 8004cf0:	3303      	adds	r3, #3
 8004cf2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf4:	05c0      	lsls	r0, r0, #23
 8004cf6:	e7e5      	b.n	8004cc4 <HAL_TIM_MspPostInit+0x64>
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	50000400 	.word	0x50000400
 8004d00:	40011400 	.word	0x40011400

08004d04 <HAL_TIM_Base_MspDeInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8004d04:	2280      	movs	r2, #128	; 0x80
 8004d06:	6803      	ldr	r3, [r0, #0]
 8004d08:	05d2      	lsls	r2, r2, #23
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d105      	bne.n	8004d1a <HAL_TIM_Base_MspDeInit+0x16>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8004d0e:	2101      	movs	r1, #1
 8004d10:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <HAL_TIM_Base_MspDeInit+0x38>)
 8004d12:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004d14:	438b      	bics	r3, r1
 8004d16:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM22_MspDeInit 1 */

  /* USER CODE END TIM22_MspDeInit 1 */
  }

}
 8004d18:	4770      	bx	lr
  else if(htim_base->Instance==TIM21)
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <HAL_TIM_Base_MspDeInit+0x3c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d105      	bne.n	8004d2c <HAL_TIM_Base_MspDeInit+0x28>
    __HAL_RCC_TIM21_CLK_DISABLE();
 8004d20:	2104      	movs	r1, #4
 8004d22:	4a06      	ldr	r2, [pc, #24]	; (8004d3c <HAL_TIM_Base_MspDeInit+0x38>)
 8004d24:	6b53      	ldr	r3, [r2, #52]	; 0x34
    __HAL_RCC_TIM22_CLK_DISABLE();
 8004d26:	438b      	bics	r3, r1
 8004d28:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004d2a:	e7f5      	b.n	8004d18 <HAL_TIM_Base_MspDeInit+0x14>
  else if(htim_base->Instance==TIM22)
 8004d2c:	4a05      	ldr	r2, [pc, #20]	; (8004d44 <HAL_TIM_Base_MspDeInit+0x40>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d1f2      	bne.n	8004d18 <HAL_TIM_Base_MspDeInit+0x14>
    __HAL_RCC_TIM22_CLK_DISABLE();
 8004d32:	4a02      	ldr	r2, [pc, #8]	; (8004d3c <HAL_TIM_Base_MspDeInit+0x38>)
 8004d34:	2120      	movs	r1, #32
 8004d36:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004d38:	e7f5      	b.n	8004d26 <HAL_TIM_Base_MspDeInit+0x22>
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	40010800 	.word	0x40010800
 8004d44:	40011400 	.word	0x40011400

08004d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	0005      	movs	r5, r0
 8004d4c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d4e:	2214      	movs	r2, #20
 8004d50:	2100      	movs	r1, #0
 8004d52:	a801      	add	r0, sp, #4
 8004d54:	f000 fdc4 	bl	80058e0 <memset>
  if(huart->Instance==USART2)
 8004d58:	4b1c      	ldr	r3, [pc, #112]	; (8004dcc <HAL_UART_MspInit+0x84>)
 8004d5a:	682a      	ldr	r2, [r5, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d133      	bne.n	8004dc8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d60:	2280      	movs	r2, #128	; 0x80
 8004d62:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_UART_MspInit+0x88>)
 8004d64:	0292      	lsls	r2, r2, #10
 8004d66:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d68:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d6e:	2201      	movs	r2, #1
 8004d70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d72:	2604      	movs	r6, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d74:	4311      	orrs	r1, r2
 8004d76:	62d9      	str	r1, [r3, #44]	; 0x2c
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d82:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d84:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d86:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d88:	3b0f      	subs	r3, #15
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d8a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d8c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d8e:	9601      	str	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8004d90:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d92:	f7fd fa29 	bl	80021e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8004d96:	4c0f      	ldr	r4, [pc, #60]	; (8004dd4 <HAL_UART_MspInit+0x8c>)
 8004d98:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <HAL_UART_MspInit+0x90>)
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d9a:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8004d9c:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004da2:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004da4:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004da6:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004da8:	3320      	adds	r3, #32
 8004daa:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004dac:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004dae:	0020      	movs	r0, r4
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004db0:	019b      	lsls	r3, r3, #6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8004db2:	6066      	str	r6, [r4, #4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004db4:	6122      	str	r2, [r4, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004db6:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004db8:	f7fd f926 	bl	8002008 <HAL_DMA_Init>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8004dc0:	f7ff f914 	bl	8003fec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004dc4:	66ec      	str	r4, [r5, #108]	; 0x6c
 8004dc6:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004dc8:	b006      	add	sp, #24
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
 8004dcc:	40004400 	.word	0x40004400
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	20000260 	.word	0x20000260
 8004dd8:	40020058 	.word	0x40020058

08004ddc <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 8004ddc:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <HAL_UART_MspDeInit+0x28>)
 8004dde:	6802      	ldr	r2, [r0, #0]
{
 8004de0:	b510      	push	{r4, lr}
 8004de2:	0004      	movs	r4, r0
  if(huart->Instance==USART2)
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d10c      	bne.n	8004e02 <HAL_UART_MspDeInit+0x26>
    __HAL_RCC_USART2_CLK_DISABLE();
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8004de8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8004dea:	4a07      	ldr	r2, [pc, #28]	; (8004e08 <HAL_UART_MspDeInit+0x2c>)
 8004dec:	4907      	ldr	r1, [pc, #28]	; (8004e0c <HAL_UART_MspDeInit+0x30>)
 8004dee:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8004df0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8004df2:	400b      	ands	r3, r1
 8004df4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8004df6:	2104      	movs	r1, #4
 8004df8:	f7fd faa2 	bl	8002340 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004dfc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004dfe:	f7fd f947 	bl	8002090 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8004e02:	bd10      	pop	{r4, pc}
 8004e04:	40004400 	.word	0x40004400
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	fffdffff 	.word	0xfffdffff

08004e10 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004e10:	4770      	bx	lr

08004e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e12:	e7fe      	b.n	8004e12 <HardFault_Handler>

08004e14 <SVC_Handler>:
 8004e14:	4770      	bx	lr

08004e16 <PendSV_Handler>:
 8004e16:	4770      	bx	lr

08004e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e18:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e1a:	f7fc fd3f 	bl	800189c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e1e:	bd10      	pop	{r4, pc}

08004e20 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004e20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004e22:	4802      	ldr	r0, [pc, #8]	; (8004e2c <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8004e24:	f7fd f995 	bl	8002152 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004e28:	bd10      	pop	{r4, pc}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	20000260 	.word	0x20000260

08004e30 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004e30:	2280      	movs	r2, #128	; 0x80
 8004e32:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <SystemInit+0x44>)
 8004e34:	0052      	lsls	r2, r2, #1
 8004e36:	6819      	ldr	r1, [r3, #0]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	490e      	ldr	r1, [pc, #56]	; (8004e78 <SystemInit+0x48>)
 8004e40:	400a      	ands	r2, r1
 8004e42:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	490d      	ldr	r1, [pc, #52]	; (8004e7c <SystemInit+0x4c>)
 8004e48:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004e4a:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004e4c:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	438a      	bics	r2, r1
 8004e52:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	490a      	ldr	r1, [pc, #40]	; (8004e80 <SystemInit+0x50>)
 8004e58:	400a      	ands	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	4909      	ldr	r1, [pc, #36]	; (8004e84 <SystemInit+0x54>)
 8004e60:	400a      	ands	r2, r1
 8004e62:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004e64:	2200      	movs	r2, #0
 8004e66:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e68:	2280      	movs	r2, #128	; 0x80
 8004e6a:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <SystemInit+0x58>)
 8004e6c:	0512      	lsls	r2, r2, #20
 8004e6e:	609a      	str	r2, [r3, #8]
#endif
}
 8004e70:	4770      	bx	lr
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	40021000 	.word	0x40021000
 8004e78:	88ff400c 	.word	0x88ff400c
 8004e7c:	fef6fff6 	.word	0xfef6fff6
 8004e80:	fffbffff 	.word	0xfffbffff
 8004e84:	ff02ffff 	.word	0xff02ffff
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <uartShowVersion>:
#include <mouseServo.h>

// this file will (ok should, but ISN'T) ALWAYS be recompiled to reflect the current __TIME__ and __DATE__

// ***********************************************************************************************************************
void uartShowVersion(void) {
 8004e8c:	b510      	push	{r4, lr}
	uartSendStringDirect("\n\nHBP Mouse Servo Control V");
 8004e8e:	4814      	ldr	r0, [pc, #80]	; (8004ee0 <uartShowVersion+0x54>)
 8004e90:	f000 f8a6 	bl	8004fe0 <uartSendStringDirect>
	uartSendStringDirect(SOFTWARE_VERSION);
 8004e94:	4813      	ldr	r0, [pc, #76]	; (8004ee4 <uartShowVersion+0x58>)
 8004e96:	f000 f8a3 	bl	8004fe0 <uartSendStringDirect>

	uartSendStringDirect(": ");
 8004e9a:	4813      	ldr	r0, [pc, #76]	; (8004ee8 <uartShowVersion+0x5c>)
 8004e9c:	f000 f8a0 	bl	8004fe0 <uartSendStringDirect>
	uartSendStringDirect(__DATE__);
 8004ea0:	4812      	ldr	r0, [pc, #72]	; (8004eec <uartShowVersion+0x60>)
 8004ea2:	f000 f89d 	bl	8004fe0 <uartSendStringDirect>
	uartSendStringDirect(", ");
 8004ea6:	4812      	ldr	r0, [pc, #72]	; (8004ef0 <uartShowVersion+0x64>)
 8004ea8:	f000 f89a 	bl	8004fe0 <uartSendStringDirect>
	uartSendStringDirect(__TIME__);
 8004eac:	4811      	ldr	r0, [pc, #68]	; (8004ef4 <uartShowVersion+0x68>)
 8004eae:	f000 f897 	bl	8004fe0 <uartSendStringDirect>
#ifdef DEBUG
	uartSendStringDirect("  DEBUG");
 8004eb2:	4811      	ldr	r0, [pc, #68]	; (8004ef8 <uartShowVersion+0x6c>)
 8004eb4:	f000 f894 	bl	8004fe0 <uartSendStringDirect>
#endif
	uartSendCharDirect('\n');
 8004eb8:	200a      	movs	r0, #10
 8004eba:	f000 f879 	bl	8004fb0 <uartSendCharDirect>


#ifdef UART_SINGLE_WIRE
	uartSendStringDirect("SingleWire ");
 8004ebe:	480f      	ldr	r0, [pc, #60]	; (8004efc <uartShowVersion+0x70>)
 8004ec0:	f000 f88e 	bl	8004fe0 <uartSendStringDirect>
#endif
	uartSendStringDirect("Servo ID: ");
 8004ec4:	480e      	ldr	r0, [pc, #56]	; (8004f00 <uartShowVersion+0x74>)
 8004ec6:	f000 f88b 	bl	8004fe0 <uartSendStringDirect>
	uartSendHexByte(SERVO_ID & 0xFF);
 8004eca:	4b0e      	ldr	r3, [pc, #56]	; (8004f04 <uartShowVersion+0x78>)
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	b2c0      	uxtb	r0, r0
 8004ed0:	f000 f8d8 	bl	8005084 <uartSendHexByte>
	uartBusyWaitForTXDone();
 8004ed4:	f000 f818 	bl	8004f08 <uartBusyWaitForTXDone>
	uartSendCharDirect('\n');
 8004ed8:	200a      	movs	r0, #10
 8004eda:	f000 f869 	bl	8004fb0 <uartSendCharDirect>

}
 8004ede:	bd10      	pop	{r4, pc}
 8004ee0:	08005ebb 	.word	0x08005ebb
 8004ee4:	08005ed7 	.word	0x08005ed7
 8004ee8:	08005fab 	.word	0x08005fab
 8004eec:	08005edb 	.word	0x08005edb
 8004ef0:	08005ee7 	.word	0x08005ee7
 8004ef4:	08005eea 	.word	0x08005eea
 8004ef8:	08005ef3 	.word	0x08005ef3
 8004efc:	08005efb 	.word	0x08005efb
 8004f00:	08005f07 	.word	0x08005f07
 8004f04:	20000214 	.word	0x20000214

08004f08 <uartBusyWaitForTXDone>:
//}
//void uartIterate() {
//}

// ***********************************************************************************************************************
void uartBusyWaitForTXDone() {
 8004f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while (uartTXWritePointer != uartTXReadPointer) {			// UART transmit
 8004f0a:	2000      	movs	r0, #0
		if ((USART2->ISR) & BIT(7)) {
			if (UARTOutputEnabled) {
				USART2->TDR = uartTXBuffer[uartTXReadPointer];
#ifdef UART_SINGLE_WIRE
				uartRXDiscardCounter++;
 8004f0c:	2701      	movs	r7, #1
	while (uartTXWritePointer != uartTXReadPointer) {			// UART transmit
 8004f0e:	0006      	movs	r6, r0
 8004f10:	4b16      	ldr	r3, [pc, #88]	; (8004f6c <uartBusyWaitForTXDone+0x64>)
			if (UARTOutputEnabled) {
 8004f12:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <uartBusyWaitForTXDone+0x68>)
	while (uartTXWritePointer != uartTXReadPointer) {			// UART transmit
 8004f14:	681b      	ldr	r3, [r3, #0]
			if (UARTOutputEnabled) {
 8004f16:	6812      	ldr	r2, [r2, #0]
	while (uartTXWritePointer != uartTXReadPointer) {			// UART transmit
 8004f18:	469c      	mov	ip, r3
			if (UARTOutputEnabled) {
 8004f1a:	9201      	str	r2, [sp, #4]
 8004f1c:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <uartBusyWaitForTXDone+0x6c>)
 8004f1e:	4a16      	ldr	r2, [pc, #88]	; (8004f78 <uartBusyWaitForTXDone+0x70>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6811      	ldr	r1, [r2, #0]
 8004f24:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <uartBusyWaitForTXDone+0x74>)
	while (uartTXWritePointer != uartTXReadPointer) {			// UART transmit
 8004f26:	459c      	cmp	ip, r3
 8004f28:	d10d      	bne.n	8004f46 <uartBusyWaitForTXDone+0x3e>
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	d002      	beq.n	8004f34 <uartBusyWaitForTXDone+0x2c>
 8004f2e:	4663      	mov	r3, ip
 8004f30:	4c10      	ldr	r4, [pc, #64]	; (8004f74 <uartBusyWaitForTXDone+0x6c>)
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d001      	beq.n	8004f3c <uartBusyWaitForTXDone+0x34>
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <uartBusyWaitForTXDone+0x70>)
 8004f3a:	6019      	str	r1, [r3, #0]
			uartTXReadPointer++;
			uartTXReadPointer &= UART_BUFFER_MASK;
		}
	}

	while (((USART2->ISR) & BIT(6)) == 0) {
 8004f3c:	2340      	movs	r3, #64	; 0x40
 8004f3e:	69d1      	ldr	r1, [r2, #28]
 8004f40:	4219      	tst	r1, r3
 8004f42:	d011      	beq.n	8004f68 <uartBusyWaitForTXDone+0x60>
		asm volatile ("nop");
	};
}
 8004f44:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		if ((USART2->ISR) & BIT(7)) {
 8004f46:	2580      	movs	r5, #128	; 0x80
 8004f48:	69d4      	ldr	r4, [r2, #28]
 8004f4a:	422c      	tst	r4, r5
 8004f4c:	d0eb      	beq.n	8004f26 <uartBusyWaitForTXDone+0x1e>
			if (UARTOutputEnabled) {
 8004f4e:	9c01      	ldr	r4, [sp, #4]
 8004f50:	2c00      	cmp	r4, #0
 8004f52:	d004      	beq.n	8004f5e <uartBusyWaitForTXDone+0x56>
				USART2->TDR = uartTXBuffer[uartTXReadPointer];
 8004f54:	480a      	ldr	r0, [pc, #40]	; (8004f80 <uartBusyWaitForTXDone+0x78>)
				uartRXDiscardCounter++;
 8004f56:	3101      	adds	r1, #1
				USART2->TDR = uartTXBuffer[uartTXReadPointer];
 8004f58:	5cc0      	ldrb	r0, [r0, r3]
 8004f5a:	6290      	str	r0, [r2, #40]	; 0x28
				uartRXDiscardCounter++;
 8004f5c:	0038      	movs	r0, r7
			uartTXReadPointer &= UART_BUFFER_MASK;
 8004f5e:	22ff      	movs	r2, #255	; 0xff
			uartTXReadPointer++;
 8004f60:	3301      	adds	r3, #1
			uartTXReadPointer &= UART_BUFFER_MASK;
 8004f62:	4013      	ands	r3, r2
 8004f64:	003e      	movs	r6, r7
 8004f66:	e7dd      	b.n	8004f24 <uartBusyWaitForTXDone+0x1c>
		asm volatile ("nop");
 8004f68:	46c0      	nop			; (mov r8, r8)
 8004f6a:	e7e8      	b.n	8004f3e <uartBusyWaitForTXDone+0x36>
 8004f6c:	20000258 	.word	0x20000258
 8004f70:	20000024 	.word	0x20000024
 8004f74:	20000254 	.word	0x20000254
 8004f78:	2000024c 	.word	0x2000024c
 8004f7c:	40004400 	.word	0x40004400
 8004f80:	20000600 	.word	0x20000600

08004f84 <uartSendChar>:

// ***********************************************************************************************************************
inline void uartSendChar(char c) {
	uartTXBuffer[uartTXWritePointer++] = c;
 8004f84:	4a03      	ldr	r2, [pc, #12]	; (8004f94 <uartSendChar+0x10>)
 8004f86:	4904      	ldr	r1, [pc, #16]	; (8004f98 <uartSendChar+0x14>)
 8004f88:	6813      	ldr	r3, [r2, #0]
 8004f8a:	54c8      	strb	r0, [r1, r3]
 8004f8c:	3301      	adds	r3, #1
	uartTXWritePointer &= UART_BUFFER_MASK;
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	6013      	str	r3, [r2, #0]
}
 8004f92:	4770      	bx	lr
 8004f94:	20000258 	.word	0x20000258
 8004f98:	20000600 	.word	0x20000600

08004f9c <uartSendString>:

void uartSendString(char *s) {
 8004f9c:	b510      	push	{r4, lr}
 8004f9e:	0004      	movs	r4, r0
	while ((*s) != 0) {
 8004fa0:	7820      	ldrb	r0, [r4, #0]
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	d100      	bne.n	8004fa8 <uartSendString+0xc>
		uartSendChar(*(s++));
	}
}
 8004fa6:	bd10      	pop	{r4, pc}
		uartSendChar(*(s++));
 8004fa8:	3401      	adds	r4, #1
 8004faa:	f7ff ffeb 	bl	8004f84 <uartSendChar>
 8004fae:	e7f7      	b.n	8004fa0 <uartSendString+0x4>

08004fb0 <uartSendCharDirect>:

// ***********************************************************************************************************************
inline void uartSendCharDirect(char c) {
	if (UARTOutputEnabled) {
 8004fb0:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <uartSendCharDirect+0x24>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <uartSendCharDirect+0x1c>
		while (((USART2->ISR) & BIT(7)) == 0) {
 8004fb8:	2280      	movs	r2, #128	; 0x80
 8004fba:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <uartSendCharDirect+0x28>)
 8004fbc:	69d9      	ldr	r1, [r3, #28]
 8004fbe:	4211      	tst	r1, r2
 8004fc0:	d005      	beq.n	8004fce <uartSendCharDirect+0x1e>
			asm volatile ("nop");
		};
		USART2->TDR = c;
#ifdef UART_SINGLE_WIRE
		uartRXDiscardCounter++;
 8004fc2:	4a06      	ldr	r2, [pc, #24]	; (8004fdc <uartSendCharDirect+0x2c>)
		USART2->TDR = c;
 8004fc4:	6298      	str	r0, [r3, #40]	; 0x28
		uartRXDiscardCounter++;
 8004fc6:	6813      	ldr	r3, [r2, #0]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	6013      	str	r3, [r2, #0]
#endif
	}
}
 8004fcc:	4770      	bx	lr
			asm volatile ("nop");
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	e7f4      	b.n	8004fbc <uartSendCharDirect+0xc>
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	20000024 	.word	0x20000024
 8004fd8:	40004400 	.word	0x40004400
 8004fdc:	2000024c 	.word	0x2000024c

08004fe0 <uartSendStringDirect>:

void uartSendStringDirect(char *s) {
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	0004      	movs	r4, r0
	while ((*s) != 0) {
 8004fe4:	7820      	ldrb	r0, [r4, #0]
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d100      	bne.n	8004fec <uartSendStringDirect+0xc>
		uartSendCharDirect(*(s++));
	}
}
 8004fea:	bd10      	pop	{r4, pc}
		uartSendCharDirect(*(s++));
 8004fec:	3401      	adds	r4, #1
 8004fee:	f7ff ffdf 	bl	8004fb0 <uartSendCharDirect>
 8004ff2:	e7f7      	b.n	8004fe4 <uartSendStringDirect+0x4>

08004ff4 <uartSendHexLong>:

// ***********************************************************************************************************************
void uartSendHexLong(long hl) {
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	0004      	movs	r4, r0
	uartSendChar(HEX_LOOKUP_TABLE[(hl >> 28) & 0xF]);
	uartSendChar(HEX_LOOKUP_TABLE[(hl >> 24) & 0xF]);
 8004ff8:	260f      	movs	r6, #15
	uartSendChar(HEX_LOOKUP_TABLE[(hl >> 28) & 0xF]);
 8004ffa:	4d14      	ldr	r5, [pc, #80]	; (800504c <uartSendHexLong+0x58>)
 8004ffc:	0f03      	lsrs	r3, r0, #28
 8004ffe:	5ce8      	ldrb	r0, [r5, r3]
 8005000:	f7ff ffc0 	bl	8004f84 <uartSendChar>
	uartSendChar(HEX_LOOKUP_TABLE[(hl >> 24) & 0xF]);
 8005004:	1623      	asrs	r3, r4, #24
 8005006:	4033      	ands	r3, r6
 8005008:	5ce8      	ldrb	r0, [r5, r3]
 800500a:	f7ff ffbb 	bl	8004f84 <uartSendChar>
	uartSendChar(HEX_LOOKUP_TABLE[(hl >> 20) & 0xF]);
 800500e:	1523      	asrs	r3, r4, #20
 8005010:	4033      	ands	r3, r6
 8005012:	5ce8      	ldrb	r0, [r5, r3]
 8005014:	f7ff ffb6 	bl	8004f84 <uartSendChar>
	uartSendChar(HEX_LOOKUP_TABLE[(hl >> 16) & 0xF]);
 8005018:	1423      	asrs	r3, r4, #16
 800501a:	4033      	ands	r3, r6
 800501c:	5ce8      	ldrb	r0, [r5, r3]
 800501e:	f7ff ffb1 	bl	8004f84 <uartSendChar>
	uartSendChar(HEX_LOOKUP_TABLE[(hl >> 12) & 0xF]);
 8005022:	1323      	asrs	r3, r4, #12
 8005024:	4033      	ands	r3, r6
 8005026:	5ce8      	ldrb	r0, [r5, r3]
 8005028:	f7ff ffac 	bl	8004f84 <uartSendChar>
	uartSendChar(HEX_LOOKUP_TABLE[(hl >> 8) & 0xF]);
 800502c:	1223      	asrs	r3, r4, #8
 800502e:	4033      	ands	r3, r6
 8005030:	5ce8      	ldrb	r0, [r5, r3]
 8005032:	f7ff ffa7 	bl	8004f84 <uartSendChar>
	uartSendChar(HEX_LOOKUP_TABLE[(hl >> 4) & 0xF]);
 8005036:	1123      	asrs	r3, r4, #4
 8005038:	4033      	ands	r3, r6
 800503a:	5ce8      	ldrb	r0, [r5, r3]
	uartSendChar(HEX_LOOKUP_TABLE[(hl) & 0xF]);
 800503c:	4034      	ands	r4, r6
	uartSendChar(HEX_LOOKUP_TABLE[(hl >> 4) & 0xF]);
 800503e:	f7ff ffa1 	bl	8004f84 <uartSendChar>
	uartSendChar(HEX_LOOKUP_TABLE[(hl) & 0xF]);
 8005042:	5d28      	ldrb	r0, [r5, r4]
 8005044:	f7ff ff9e 	bl	8004f84 <uartSendChar>
}
 8005048:	bd70      	pop	{r4, r5, r6, pc}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	08005f12 	.word	0x08005f12

08005050 <uartSendHexShort>:

void uartSendHexShort(long hs) {
 8005050:	b570      	push	{r4, r5, r6, lr}
	uartSendChar(HEX_LOOKUP_TABLE[(hs >> 12) & 0xF]);
 8005052:	260f      	movs	r6, #15
void uartSendHexShort(long hs) {
 8005054:	0004      	movs	r4, r0
	uartSendChar(HEX_LOOKUP_TABLE[(hs >> 12) & 0xF]);
 8005056:	4d0a      	ldr	r5, [pc, #40]	; (8005080 <uartSendHexShort+0x30>)
 8005058:	1303      	asrs	r3, r0, #12
 800505a:	4033      	ands	r3, r6
 800505c:	5ce8      	ldrb	r0, [r5, r3]
 800505e:	f7ff ff91 	bl	8004f84 <uartSendChar>
	uartSendChar(HEX_LOOKUP_TABLE[(hs >> 8) & 0xF]);
 8005062:	1223      	asrs	r3, r4, #8
 8005064:	4033      	ands	r3, r6
 8005066:	5ce8      	ldrb	r0, [r5, r3]
 8005068:	f7ff ff8c 	bl	8004f84 <uartSendChar>
	uartSendChar(HEX_LOOKUP_TABLE[(hs >> 4) & 0xF]);
 800506c:	1123      	asrs	r3, r4, #4
 800506e:	4033      	ands	r3, r6
 8005070:	5ce8      	ldrb	r0, [r5, r3]
	uartSendChar(HEX_LOOKUP_TABLE[(hs) & 0xF]);
 8005072:	4034      	ands	r4, r6
	uartSendChar(HEX_LOOKUP_TABLE[(hs >> 4) & 0xF]);
 8005074:	f7ff ff86 	bl	8004f84 <uartSendChar>
	uartSendChar(HEX_LOOKUP_TABLE[(hs) & 0xF]);
 8005078:	5d28      	ldrb	r0, [r5, r4]
 800507a:	f7ff ff83 	bl	8004f84 <uartSendChar>
}
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	08005f12 	.word	0x08005f12

08005084 <uartSendHexByte>:

void uartSendHexByte(char hb) {
 8005084:	b570      	push	{r4, r5, r6, lr}
	uartSendChar(HEX_LOOKUP_TABLE[(hb >> 4) & 0xF]);
 8005086:	4d06      	ldr	r5, [pc, #24]	; (80050a0 <uartSendHexByte+0x1c>)
 8005088:	0903      	lsrs	r3, r0, #4
void uartSendHexByte(char hb) {
 800508a:	0004      	movs	r4, r0
	uartSendChar(HEX_LOOKUP_TABLE[(hb >> 4) & 0xF]);
 800508c:	5ce8      	ldrb	r0, [r5, r3]
 800508e:	f7ff ff79 	bl	8004f84 <uartSendChar>
	uartSendChar(HEX_LOOKUP_TABLE[(hb) & 0xF]);
 8005092:	230f      	movs	r3, #15
 8005094:	401c      	ands	r4, r3
 8005096:	5d28      	ldrb	r0, [r5, r4]
 8005098:	f7ff ff74 	bl	8004f84 <uartSendChar>
}
 800509c:	bd70      	pop	{r4, r5, r6, pc}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	08005f12 	.word	0x08005f12

080050a4 <uartRXClearDMAForDiscardData>:
	}
	uartSendChar('\n');
}

// ***********************************************************************************************************************
void uartRXClearDMAForDiscardData(void) {// this function clears the DMA INPUT buffer IF (and only if) the chars will get discarded anyways
 80050a4:	b5f0      	push	{r4, r5, r6, r7, lr}
// i.e. because they have been an "echo" of the output
	long UART2_DMABytesAvailable = 0;

	UART2_DMABytesAvailable = (-((DMA1_Channel5->CNDTR) + uartRXReadPointer))
 80050a6:	25ff      	movs	r5, #255	; 0xff
			& (UART_BUFFER_MASK);

#ifdef UART_SINGLE_WIRE
	while ((UART2_DMABytesAvailable) && (uartRXDiscardCounter)) {
 80050a8:	2600      	movs	r6, #0
 80050aa:	2701      	movs	r7, #1
	UART2_DMABytesAvailable = (-((DMA1_Channel5->CNDTR) + uartRXReadPointer))
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <uartRXClearDMAForDiscardData+0x38>)
 80050ae:	480c      	ldr	r0, [pc, #48]	; (80050e0 <uartRXClearDMAForDiscardData+0x3c>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	6802      	ldr	r2, [r0, #0]
 80050b4:	4c0b      	ldr	r4, [pc, #44]	; (80050e4 <uartRXClearDMAForDiscardData+0x40>)
 80050b6:	18d3      	adds	r3, r2, r3
 80050b8:	6821      	ldr	r1, [r4, #0]
 80050ba:	425b      	negs	r3, r3
 80050bc:	402b      	ands	r3, r5
 80050be:	1acb      	subs	r3, r1, r3
	while ((UART2_DMABytesAvailable) && (uartRXDiscardCounter)) {
 80050c0:	4299      	cmp	r1, r3
 80050c2:	d104      	bne.n	80050ce <uartRXClearDMAForDiscardData+0x2a>
 80050c4:	2e00      	cmp	r6, #0
 80050c6:	d001      	beq.n	80050cc <uartRXClearDMAForDiscardData+0x28>
 80050c8:	6021      	str	r1, [r4, #0]
 80050ca:	6002      	str	r2, [r0, #0]

#ifdef UART_SINGLE_WIRE
		uartRXDiscardCounter--;
#endif
	}
}
 80050cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((UART2_DMABytesAvailable) && (uartRXDiscardCounter)) {
 80050ce:	2900      	cmp	r1, #0
 80050d0:	d0f8      	beq.n	80050c4 <uartRXClearDMAForDiscardData+0x20>
		uartRXReadPointer++;
 80050d2:	3201      	adds	r2, #1
		uartRXReadPointer &= UART_BUFFER_MASK;
 80050d4:	402a      	ands	r2, r5
		uartRXDiscardCounter--;
 80050d6:	3901      	subs	r1, #1
 80050d8:	003e      	movs	r6, r7
 80050da:	e7f1      	b.n	80050c0 <uartRXClearDMAForDiscardData+0x1c>
 80050dc:	40020058 	.word	0x40020058
 80050e0:	20000250 	.word	0x20000250
 80050e4:	2000024c 	.word	0x2000024c

080050e8 <uartShowHelp>:

// ***********************************************************************************************************************
void uartShowHelp(void) {
 80050e8:	b510      	push	{r4, lr}

	uartBusyWaitForTXDone();
 80050ea:	f7ff ff0d 	bl	8004f08 <uartBusyWaitForTXDone>

	uartShowVersion();
 80050ee:	f7ff fecd 	bl	8004e8c <uartShowVersion>

	uartSendStringDirect("Available Commands:\n");
 80050f2:	482d      	ldr	r0, [pc, #180]	; (80051a8 <uartShowHelp+0xc0>)
 80050f4:	f7ff ff74 	bl	8004fe0 <uartSendStringDirect>
	uartRXClearDMAForDiscardData();
 80050f8:	f7ff ffd4 	bl	80050a4 <uartRXClearDMAForDiscardData>

	uartSendStringDirect(
 80050fc:	482b      	ldr	r0, [pc, #172]	; (80051ac <uartShowHelp+0xc4>)
 80050fe:	f7ff ff6f 	bl	8004fe0 <uartSendStringDirect>
			"  !P=<>         set servo target position [0..4095]\n");
	uartSendStringDirect("  !P=OFF        set servo motor control off\n");
 8005102:	482b      	ldr	r0, [pc, #172]	; (80051b0 <uartShowHelp+0xc8>)
 8005104:	f7ff ff6c 	bl	8004fe0 <uartSendStringDirect>
	uartRXClearDMAForDiscardData();
 8005108:	f7ff ffcc 	bl	80050a4 <uartRXClearDMAForDiscardData>
	uartSendStringDirect(
 800510c:	4829      	ldr	r0, [pc, #164]	; (80051b4 <uartShowHelp+0xcc>)
 800510e:	f7ff ff67 	bl	8004fe0 <uartSendStringDirect>
			"  !P=BLOCK      set servo motor control off, motor stiff\n");
	uartSendStringDirect(
 8005112:	4829      	ldr	r0, [pc, #164]	; (80051b8 <uartShowHelp+0xd0>)
 8005114:	f7ff ff64 	bl	8004fe0 <uartSendStringDirect>
			"  ?P            get current and (desired) servo position\n");
	uartRXClearDMAForDiscardData();
 8005118:	f7ff ffc4 	bl	80050a4 <uartRXClearDMAForDiscardData>
//	uartSendStringDirect("  !V()          set servo desired velocity\n");
//	uartSendStringDirect("  ?V            get servo current velocity\n");
//	uartRXClearDMAForDiscardData();

	if (magnetSensorKneeAddress) {
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <uartShowHelp+0xd4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <uartShowHelp+0x42>
		uartSendStringDirect("  ?K            get magnetic reading from knee sensor\n");
 8005124:	4826      	ldr	r0, [pc, #152]	; (80051c0 <uartShowHelp+0xd8>)
 8005126:	f7ff ff5b 	bl	8004fe0 <uartSendStringDirect>
	}

	if (footPressureSensorAddress) {
 800512a:	4b26      	ldr	r3, [pc, #152]	; (80051c4 <uartShowHelp+0xdc>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <uartShowHelp+0x50>
		uartSendStringDirect(
 8005132:	4825      	ldr	r0, [pc, #148]	; (80051c8 <uartShowHelp+0xe0>)
 8005134:	f7ff ff54 	bl	8004fe0 <uartSendStringDirect>
				"  ?F            get foot pressure sensor reading\n");
	}

	uartSendCharDirect('\n');
 8005138:	200a      	movs	r0, #10
 800513a:	f7ff ff39 	bl	8004fb0 <uartSendCharDirect>
	uartRXClearDMAForDiscardData();
 800513e:	f7ff ffb1 	bl	80050a4 <uartRXClearDMAForDiscardData>

	uartSendStringDirect("  !C[P,I,D]=<>  set PID control gains\n");
 8005142:	4822      	ldr	r0, [pc, #136]	; (80051cc <uartShowHelp+0xe4>)
 8005144:	f7ff ff4c 	bl	8004fe0 <uartSendStringDirect>
	uartSendStringDirect("  ?C            get current PID control gains\n");
 8005148:	4821      	ldr	r0, [pc, #132]	; (80051d0 <uartShowHelp+0xe8>)
 800514a:	f7ff ff49 	bl	8004fe0 <uartSendStringDirect>
	uartSendCharDirect('\n');
 800514e:	200a      	movs	r0, #10
 8005150:	f7ff ff2e 	bl	8004fb0 <uartSendCharDirect>
	uartRXClearDMAForDiscardData();
 8005154:	f7ff ffa6 	bl	80050a4 <uartRXClearDMAForDiscardData>

	uartSendStringDirect("<> is a 16-bit unsigned int in HEX (4 char)\n");
 8005158:	481e      	ldr	r0, [pc, #120]	; (80051d4 <uartShowHelp+0xec>)
 800515a:	f7ff ff41 	bl	8004fe0 <uartSendStringDirect>
	uartSendStringDirect("() is a 16-bit signed int in HEX (4 char)\n");
 800515e:	481e      	ldr	r0, [pc, #120]	; (80051d8 <uartShowHelp+0xf0>)
 8005160:	f7ff ff3e 	bl	8004fe0 <uartSendStringDirect>
	uartSendCharDirect('\n');
 8005164:	200a      	movs	r0, #10
 8005166:	f7ff ff23 	bl	8004fb0 <uartSendCharDirect>
	uartRXClearDMAForDiscardData();
 800516a:	f7ff ff9b 	bl	80050a4 <uartRXClearDMAForDiscardData>

	uartSendStringDirect(
 800516e:	481b      	ldr	r0, [pc, #108]	; (80051dc <uartShowHelp+0xf4>)
 8005170:	f7ff ff36 	bl	8004fe0 <uartSendStringDirect>
			"  !L[-,+,.,=<>] set LED off/on/blinking/blink-frequency\n");
//	uartSendStringDirect("  ?S            send all sensor values (debug)\n");
	uartRXClearDMAForDiscardData();
 8005174:	f7ff ff96 	bl	80050a4 <uartRXClearDMAForDiscardData>
	uartSendStringDirect(
 8005178:	4819      	ldr	r0, [pc, #100]	; (80051e0 <uartShowHelp+0xf8>)
 800517a:	f7ff ff31 	bl	8004fe0 <uartSendStringDirect>
			"  !U[+,-]       set UART output enabled / disabled\n");
	uartSendCharDirect('\n');
 800517e:	200a      	movs	r0, #10
 8005180:	f7ff ff16 	bl	8004fb0 <uartSendCharDirect>
	uartRXClearDMAForDiscardData();
 8005184:	f7ff ff8e 	bl	80050a4 <uartRXClearDMAForDiscardData>

	uartSendStringDirect("  ?ID           report welcome message and ID\n");
 8005188:	4816      	ldr	r0, [pc, #88]	; (80051e4 <uartShowHelp+0xfc>)
 800518a:	f7ff ff29 	bl	8004fe0 <uartSendStringDirect>
	uartSendStringDirect("  RESET         restart servo\n");
 800518e:	4816      	ldr	r0, [pc, #88]	; (80051e8 <uartShowHelp+0x100>)
 8005190:	f7ff ff26 	bl	8004fe0 <uartSendStringDirect>
	uartSendStringDirect(
 8005194:	4815      	ldr	r0, [pc, #84]	; (80051ec <uartShowHelp+0x104>)
 8005196:	f7ff ff23 	bl	8004fe0 <uartSendStringDirect>
			"  BOOTL         enter boot-loader for reprogramming\n");

	uartSendCharDirect('\n');
 800519a:	200a      	movs	r0, #10
 800519c:	f7ff ff08 	bl	8004fb0 <uartSendCharDirect>
	uartRXClearDMAForDiscardData();
 80051a0:	f7ff ff80 	bl	80050a4 <uartRXClearDMAForDiscardData>
}
 80051a4:	bd10      	pop	{r4, pc}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	08005fae 	.word	0x08005fae
 80051ac:	08005fc3 	.word	0x08005fc3
 80051b0:	08005ff8 	.word	0x08005ff8
 80051b4:	08006025 	.word	0x08006025
 80051b8:	0800605f 	.word	0x0800605f
 80051bc:	20000240 	.word	0x20000240
 80051c0:	08006099 	.word	0x08006099
 80051c4:	20000228 	.word	0x20000228
 80051c8:	080060d0 	.word	0x080060d0
 80051cc:	08006102 	.word	0x08006102
 80051d0:	08006129 	.word	0x08006129
 80051d4:	08006158 	.word	0x08006158
 80051d8:	08006185 	.word	0x08006185
 80051dc:	080061b0 	.word	0x080061b0
 80051e0:	080061e9 	.word	0x080061e9
 80051e4:	0800621d 	.word	0x0800621d
 80051e8:	0800624c 	.word	0x0800624c
 80051ec:	0800626b 	.word	0x0800626b

080051f0 <passiveDuringReprogOfOtherServo>:

// ***********************************************************************************************************************
void passiveDuringReprogOfOtherServo(void) {
 80051f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	long timeMemory;
	long dataCount;
	long UART2_BytesAvailable;

	// ************************************************************************************************** set UART2 to 57600, 8E1 to "listen" to reprog
	USART2->CR1 &= ~(0x00000001);							// disable USART2
 80051f2:	2201      	movs	r2, #1
 80051f4:	4b37      	ldr	r3, [pc, #220]	; (80052d4 <passiveDuringReprogOfOtherServo+0xe4>)
 80051f6:	6819      	ldr	r1, [r3, #0]
 80051f8:	4391      	bics	r1, r2
 80051fa:	6019      	str	r1, [r3, #0]
															// Compute Baud rate: 32MHz / UARTDIV = 57600	--> 32MHz / 57600 = UARTDIV = 555.55 = 0x22C
	USART2->BRR = 0x22C;									// set 57600 Baud
 80051fc:	218b      	movs	r1, #139	; 0x8b
 80051fe:	0089      	lsls	r1, r1, #2
 8005200:	60d9      	str	r1, [r3, #12]
	USART2->CR1 |= BIT(12) | BIT(10);// set 8+parity bits (12); enable parity check (10); set desired parity (9, even)
 8005202:	21a0      	movs	r1, #160	; 0xa0
 8005204:	6818      	ldr	r0, [r3, #0]
 8005206:	0149      	lsls	r1, r1, #5
 8005208:	4301      	orrs	r1, r0
 800520a:	6019      	str	r1, [r3, #0]
	USART2->CR1 |= 0x00000001;									// enable USART2
 800520c:	6819      	ldr	r1, [r3, #0]

	// **************************************************************************************************
	while ((systemTimeMS & 0xFFFF) != (TIM21->CNT)) {// check if (1 ms) has elapsed
 800520e:	4832      	ldr	r0, [pc, #200]	; (80052d8 <passiveDuringReprogOfOtherServo+0xe8>)
	USART2->CR1 |= 0x00000001;									// enable USART2
 8005210:	4311      	orrs	r1, r2
 8005212:	6019      	str	r1, [r3, #0]
	while ((systemTimeMS & 0xFFFF) != (TIM21->CNT)) {// check if (1 ms) has elapsed
 8005214:	2100      	movs	r1, #0
 8005216:	4b31      	ldr	r3, [pc, #196]	; (80052dc <passiveDuringReprogOfOtherServo+0xec>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800521c:	b29d      	uxth	r5, r3
 800521e:	1c5e      	adds	r6, r3, #1
 8005220:	42a5      	cmp	r5, r4
 8005222:	d11e      	bne.n	8005262 <passiveDuringReprogOfOtherServo+0x72>
 8005224:	2900      	cmp	r1, #0
 8005226:	d001      	beq.n	800522c <passiveDuringReprogOfOtherServo+0x3c>
 8005228:	4a2c      	ldr	r2, [pc, #176]	; (80052dc <passiveDuringReprogOfOtherServo+0xec>)
 800522a:	6013      	str	r3, [r2, #0]
		systemTimeMS++;								// advance MS system time
	}
	timeMemory = systemTimeMS;
	dataCount = 0;

	while (timeMemory) {
 800522c:	2400      	movs	r4, #0
 800522e:	2001      	movs	r0, #1
 8005230:	0025      	movs	r5, r4
 8005232:	4a2b      	ldr	r2, [pc, #172]	; (80052e0 <passiveDuringReprogOfOtherServo+0xf0>)
 8005234:	4929      	ldr	r1, [pc, #164]	; (80052dc <passiveDuringReprogOfOtherServo+0xec>)
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	6809      	ldr	r1, [r1, #0]
	dataCount = 0;
 800523a:	9401      	str	r4, [sp, #4]
	while (timeMemory) {
 800523c:	2b00      	cmp	r3, #0
 800523e:	d113      	bne.n	8005268 <passiveDuringReprogOfOtherServo+0x78>
 8005240:	2d00      	cmp	r5, #0
 8005242:	d001      	beq.n	8005248 <passiveDuringReprogOfOtherServo+0x58>
 8005244:	4b25      	ldr	r3, [pc, #148]	; (80052dc <passiveDuringReprogOfOtherServo+0xec>)
 8005246:	6019      	str	r1, [r3, #0]
 8005248:	2c00      	cmp	r4, #0
 800524a:	d001      	beq.n	8005250 <passiveDuringReprogOfOtherServo+0x60>
 800524c:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <passiveDuringReprogOfOtherServo+0xf0>)
 800524e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	4b23      	ldr	r3, [pc, #140]	; (80052e4 <passiveDuringReprogOfOtherServo+0xf4>)
 8005256:	4a24      	ldr	r2, [pc, #144]	; (80052e8 <passiveDuringReprogOfOtherServo+0xf8>)
 8005258:	60da      	str	r2, [r3, #12]
 800525a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	e7fd      	b.n	800525e <passiveDuringReprogOfOtherServo+0x6e>
 8005262:	0033      	movs	r3, r6
 8005264:	0011      	movs	r1, r2
 8005266:	e7d8      	b.n	800521a <passiveDuringReprogOfOtherServo+0x2a>
		IWDG_CLEAR();					// clear watchdog, assuming all well :)
 8005268:	4e20      	ldr	r6, [pc, #128]	; (80052ec <passiveDuringReprogOfOtherServo+0xfc>)
 800526a:	4f21      	ldr	r7, [pc, #132]	; (80052f0 <passiveDuringReprogOfOtherServo+0x100>)
 800526c:	6037      	str	r7, [r6, #0]

		if ((systemTimeMS & 0xFFFF) != (TIM21->CNT)) {// check if (1 ms) has elapsed
 800526e:	4e1a      	ldr	r6, [pc, #104]	; (80052d8 <passiveDuringReprogOfOtherServo+0xe8>)
 8005270:	b28f      	uxth	r7, r1
 8005272:	6a76      	ldr	r6, [r6, #36]	; 0x24
 8005274:	42b7      	cmp	r7, r6
 8005276:	d011      	beq.n	800529c <passiveDuringReprogOfOtherServo+0xac>
			systemTimeMS++;							// advance MS system time

			if ((systemTimeMS & 0x1F) == 0) {// toggle LED at about 16Hz (0x3F => toggle every 31ms)
 8005278:	251f      	movs	r5, #31
			systemTimeMS++;							// advance MS system time
 800527a:	3101      	adds	r1, #1
			if ((systemTimeMS & 0x1F) == 0) {// toggle LED at about 16Hz (0x3F => toggle every 31ms)
 800527c:	4229      	tst	r1, r5
 800527e:	d105      	bne.n	800528c <passiveDuringReprogOfOtherServo+0x9c>
				if ((PORTA->INP) & PORTA_LED_A) {
 8005280:	2740      	movs	r7, #64	; 0x40
 8005282:	4d1c      	ldr	r5, [pc, #112]	; (80052f4 <passiveDuringReprogOfOtherServo+0x104>)
 8005284:	682e      	ldr	r6, [r5, #0]
 8005286:	423e      	tst	r6, r7
 8005288:	d01b      	beq.n	80052c2 <passiveDuringReprogOfOtherServo+0xd2>
					PORTA->CLR = PORTA_LED_A;
 800528a:	816f      	strh	r7, [r5, #10]
				} else {
					PORTA->SET = PORTA_LED_A;
				}
			}

			if (dataCount < 64) {
 800528c:	9e01      	ldr	r6, [sp, #4]
 800528e:	1acd      	subs	r5, r1, r3
 8005290:	2e3f      	cmp	r6, #63	; 0x3f
 8005292:	dc19      	bgt.n	80052c8 <passiveDuringReprogOfOtherServo+0xd8>
				if ((systemTimeMS - timeMemory) > 30000) {// allow 30 seconds before timeout, when programming is not yet started
 8005294:	4e18      	ldr	r6, [pc, #96]	; (80052f8 <passiveDuringReprogOfOtherServo+0x108>)
					timeMemory = 0;
				}
			} else {
				if ((systemTimeMS - timeMemory) > 2000) {// allow 2 seconds before timeout, when programming is ongoing
 8005296:	42b5      	cmp	r5, r6
 8005298:	d819      	bhi.n	80052ce <passiveDuringReprogOfOtherServo+0xde>
 800529a:	0005      	movs	r5, r0
					timeMemory = 0;
				}
			}
		}

		UART2_BytesAvailable = (-((DMA1_Channel5->CNDTR) + uartRXReadPointer))
 800529c:	27ff      	movs	r7, #255	; 0xff
 800529e:	4e17      	ldr	r6, [pc, #92]	; (80052fc <passiveDuringReprogOfOtherServo+0x10c>)
 80052a0:	6876      	ldr	r6, [r6, #4]
 80052a2:	1996      	adds	r6, r2, r6
 80052a4:	4276      	negs	r6, r6
				& (UART_BUFFER_MASK);

		if (UART2_BytesAvailable) {
 80052a6:	423e      	tst	r6, r7
 80052a8:	d0c8      	beq.n	800523c <passiveDuringReprogOfOtherServo+0x4c>
			char newChar = uartRXBufferDMA[uartRXReadPointer++];
 80052aa:	4c15      	ldr	r4, [pc, #84]	; (8005300 <passiveDuringReprogOfOtherServo+0x110>)
 80052ac:	5ca6      	ldrb	r6, [r4, r2]
 80052ae:	3201      	adds	r2, #1
			uartRXReadPointer &= UART_BUFFER_MASK;
 80052b0:	403a      	ands	r2, r7
 80052b2:	0004      	movs	r4, r0
			UART2_BytesAvailable--;

			if (newChar == 0x79) {
 80052b4:	2e79      	cmp	r6, #121	; 0x79
 80052b6:	d1c1      	bne.n	800523c <passiveDuringReprogOfOtherServo+0x4c>
				dataCount++;
 80052b8:	9b01      	ldr	r3, [sp, #4]
 80052ba:	3301      	adds	r3, #1
 80052bc:	9301      	str	r3, [sp, #4]
				timeMemory = systemTimeMS;
 80052be:	000b      	movs	r3, r1
 80052c0:	e7bc      	b.n	800523c <passiveDuringReprogOfOtherServo+0x4c>
					PORTA->SET = PORTA_LED_A;
 80052c2:	2640      	movs	r6, #64	; 0x40
 80052c4:	812e      	strh	r6, [r5, #8]
 80052c6:	e7e1      	b.n	800528c <passiveDuringReprogOfOtherServo+0x9c>
				if ((systemTimeMS - timeMemory) > 2000) {// allow 2 seconds before timeout, when programming is ongoing
 80052c8:	26fa      	movs	r6, #250	; 0xfa
 80052ca:	00f6      	lsls	r6, r6, #3
 80052cc:	e7e3      	b.n	8005296 <passiveDuringReprogOfOtherServo+0xa6>
 80052ce:	0005      	movs	r5, r0
					timeMemory = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	e7e3      	b.n	800529c <passiveDuringReprogOfOtherServo+0xac>
 80052d4:	40004400 	.word	0x40004400
 80052d8:	40010800 	.word	0x40010800
 80052dc:	200002f4 	.word	0x200002f4
 80052e0:	20000250 	.word	0x20000250
 80052e4:	e000ed00 	.word	0xe000ed00
 80052e8:	05fa0004 	.word	0x05fa0004
 80052ec:	40003000 	.word	0x40003000
 80052f0:	0000aaaa 	.word	0x0000aaaa
 80052f4:	50000010 	.word	0x50000010
 80052f8:	00007530 	.word	0x00007530
 80052fc:	40020058 	.word	0x40020058
 8005300:	20000500 	.word	0x20000500

08005304 <uartParseCommand>:
	NVIC_SystemReset();								// reset for a clean restart

}

// ***********************************************************************************************************************
void uartParseCommand(char *cmd) {
 8005304:	b5f0      	push	{r4, r5, r6, r7, lr}

#ifdef UART_SINGLE_WIRE
	if ((cmd[0] - '0') != SERVO_ID) {// on one-wire, only accept commands for THIS servo
 8005306:	7803      	ldrb	r3, [r0, #0]
 8005308:	4ec5      	ldr	r6, [pc, #788]	; (8005620 <uartParseCommand+0x31c>)
 800530a:	001a      	movs	r2, r3
void uartParseCommand(char *cmd) {
 800530c:	0004      	movs	r4, r0
	if ((cmd[0] - '0') != SERVO_ID) {// on one-wire, only accept commands for THIS servo
 800530e:	6830      	ldr	r0, [r6, #0]
 8005310:	3a30      	subs	r2, #48	; 0x30
void uartParseCommand(char *cmd) {
 8005312:	b0c3      	sub	sp, #268	; 0x10c
	if ((cmd[0] - '0') != SERVO_ID) {// on one-wire, only accept commands for THIS servo
 8005314:	4282      	cmp	r2, r0
 8005316:	d008      	beq.n	800532a <uartParseCommand+0x26>

		if (cmd[0] == '*') {// if this command is for all servos, delay some short time and continue
 8005318:	2b2a      	cmp	r3, #42	; 0x2a
 800531a:	d151      	bne.n	80053c0 <uartParseCommand+0xbc>
//			for (int i=0; i<10*SERVO_ID; i++) {					// wait servo-specific time as 10*10ms per ServoID number
//				sleepMS(10*SERVO_ID);
//				IWDG_CLEAR();									// clear watchdog, assuming all well :)
//			}
			IWDG_CLEAR();				// clear watchdog, assuming all well :)
 800531c:	4dc1      	ldr	r5, [pc, #772]	; (8005624 <uartParseCommand+0x320>)
 800531e:	4fc2      	ldr	r7, [pc, #776]	; (8005628 <uartParseCommand+0x324>)
			sleepMS(2 * SERVO_ID);
 8005320:	0040      	lsls	r0, r0, #1
			IWDG_CLEAR();				// clear watchdog, assuming all well :)
 8005322:	602f      	str	r7, [r5, #0]
			sleepMS(2 * SERVO_ID);
 8005324:	f7fe fa3c 	bl	80037a0 <sleepMS>
			IWDG_CLEAR();				// clear watchdog, assuming all well :)
 8005328:	602f      	str	r7, [r5, #0]
			}

			return;
		}
	}
	cmd++;							// skip servo ID, continue parsing command
 800532a:	1c65      	adds	r5, r4, #1
#endif

	char cmdU[UART_BUFFER_SIZE];
	(void) strcpy(cmdU, cmd);
 800532c:	0029      	movs	r1, r5
 800532e:	a802      	add	r0, sp, #8
 8005330:	f000 fade 	bl	80058f0 <strcpy>
	(void) strupr(cmdU);
 8005334:	a802      	add	r0, sp, #8
 8005336:	f000 faf4 	bl	8005922 <strupr>
//	if (strncmp(cmdU, "!ILOOP", 6)==0) {								// infinite loop to test IWDG
//		while (1) {asm volatile ("nop"); }
//		return;
//	}

	if (cmdU[0] == ',') {
 800533a:	ab02      	add	r3, sp, #8
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b2c      	cmp	r3, #44	; 0x2c
 8005340:	d103      	bne.n	800534a <uartParseCommand+0x46>
		sleepMS(1000);				// sleep 1s will trigger WDT
 8005342:	20fa      	movs	r0, #250	; 0xfa
 8005344:	0080      	lsls	r0, r0, #2
 8005346:	f7fe fa2b 	bl	80037a0 <sleepMS>
	}

	if (cmdU[0] == '.') {
 800534a:	ab02      	add	r3, sp, #8
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b2e      	cmp	r3, #46	; 0x2e
 8005350:	d14a      	bne.n	80053e8 <uartParseCommand+0xe4>
		__HAL_RCC_ADC1_CLK_ENABLE();

		for (int st = 0; st < 8; st++) {
 8005352:	2400      	movs	r4, #0
			uartSendHexByte(st);

			for (int i = 0; i < 3; i++) {
				HAL_ADC_Start(&hadc);		// start the on-chip ADC converter
				//long ret =
				HAL_ADC_PollForConversion(&hadc, 10);			// timeout in ms
 8005354:	270a      	movs	r7, #10
		__HAL_RCC_ADC1_CLK_ENABLE();
 8005356:	4ab5      	ldr	r2, [pc, #724]	; (800562c <uartParseCommand+0x328>)
 8005358:	33d3      	adds	r3, #211	; 0xd3
 800535a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800535c:	33ff      	adds	r3, #255	; 0xff
 800535e:	430b      	orrs	r3, r1
 8005360:	6353      	str	r3, [r2, #52]	; 0x34
			ADC1->SMPR &= (uint32_t) (~ADC_SMPR_SMPR);// Clear the old sampling time
 8005362:	2107      	movs	r1, #7
 8005364:	4bb2      	ldr	r3, [pc, #712]	; (8005630 <uartParseCommand+0x32c>)
			uartSendString("ST");
 8005366:	48b3      	ldr	r0, [pc, #716]	; (8005634 <uartParseCommand+0x330>)
			ADC1->SMPR &= (uint32_t) (~ADC_SMPR_SMPR);// Clear the old sampling time
 8005368:	695a      	ldr	r2, [r3, #20]
			uartSendHexByte(st);
 800536a:	2603      	movs	r6, #3
			ADC1->SMPR &= (uint32_t) (~ADC_SMPR_SMPR);// Clear the old sampling time
 800536c:	438a      	bics	r2, r1
 800536e:	615a      	str	r2, [r3, #20]
			ADC1->SMPR |= st;						// Set the new sample time
 8005370:	695a      	ldr	r2, [r3, #20]
 8005372:	4322      	orrs	r2, r4
 8005374:	615a      	str	r2, [r3, #20]
			uartSendString("ST");
 8005376:	f7ff fe11 	bl	8004f9c <uartSendString>
			uartSendHexByte(st);
 800537a:	b2e0      	uxtb	r0, r4
 800537c:	f7ff fe82 	bl	8005084 <uartSendHexByte>
				HAL_ADC_Start(&hadc);		// start the on-chip ADC converter
 8005380:	4dad      	ldr	r5, [pc, #692]	; (8005638 <uartParseCommand+0x334>)
 8005382:	3e01      	subs	r6, #1
 8005384:	0028      	movs	r0, r5
 8005386:	f7fc fc6f 	bl	8001c68 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc, 10);			// timeout in ms
 800538a:	0039      	movs	r1, r7
 800538c:	0028      	movs	r0, r5
 800538e:	f7fc fcb5 	bl	8001cfc <HAL_ADC_PollForConversion>
				long r = HAL_ADC_GetValue(&hadc);
 8005392:	0028      	movs	r0, r5
 8005394:	f7fc fd10 	bl	8001db8 <HAL_ADC_GetValue>
 8005398:	9001      	str	r0, [sp, #4]
//				uartSendChar('0'+i);
				uartSendString(" - ");
 800539a:	48a8      	ldr	r0, [pc, #672]	; (800563c <uartParseCommand+0x338>)
 800539c:	f7ff fdfe 	bl	8004f9c <uartSendString>
//				uartSendHexByte(ret);
//				uartSendString(" - ");
				uartSendHexShort(r);
 80053a0:	9801      	ldr	r0, [sp, #4]
 80053a2:	f7ff fe55 	bl	8005050 <uartSendHexShort>
			for (int i = 0; i < 3; i++) {
 80053a6:	2e00      	cmp	r6, #0
 80053a8:	d1ea      	bne.n	8005380 <uartParseCommand+0x7c>
//				uartSendChar('\n');
			}
			uartSendChar('\n');
 80053aa:	0038      	movs	r0, r7
		for (int st = 0; st < 8; st++) {
 80053ac:	3401      	adds	r4, #1
			uartSendChar('\n');
 80053ae:	f7ff fde9 	bl	8004f84 <uartSendChar>
		for (int st = 0; st < 8; st++) {
 80053b2:	2c08      	cmp	r4, #8
 80053b4:	d1d5      	bne.n	8005362 <uartParseCommand+0x5e>

		}

		HAL_ADC_Stop(&hadc);
 80053b6:	0028      	movs	r0, r5
 80053b8:	f7fc fc82 	bl	8001cc0 <HAL_ADC_Stop>
		uartShowHelp();
		return;
	}
	uartSendString("?: ");									// unknown command
	uartSendString(cmd);
}
 80053bc:	b043      	add	sp, #268	; 0x10c
 80053be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (cmd[1] == 'B') {// UNLESS it's a command to REPROGRAM someone else, then go to "passive reprog"
 80053c0:	7863      	ldrb	r3, [r4, #1]
 80053c2:	2b42      	cmp	r3, #66	; 0x42
 80053c4:	d1fa      	bne.n	80053bc <uartParseCommand+0xb8>
				if (cmd[2] == 'O') {
 80053c6:	78a3      	ldrb	r3, [r4, #2]
 80053c8:	2b4f      	cmp	r3, #79	; 0x4f
 80053ca:	d1f7      	bne.n	80053bc <uartParseCommand+0xb8>
					if (cmd[3] == 'O') {
 80053cc:	78e3      	ldrb	r3, [r4, #3]
 80053ce:	2b4f      	cmp	r3, #79	; 0x4f
 80053d0:	d1f4      	bne.n	80053bc <uartParseCommand+0xb8>
						if (cmd[4] == 'T') {
 80053d2:	7923      	ldrb	r3, [r4, #4]
 80053d4:	2b54      	cmp	r3, #84	; 0x54
 80053d6:	d1f1      	bne.n	80053bc <uartParseCommand+0xb8>
							if (cmd[5] == 'L') {
 80053d8:	7963      	ldrb	r3, [r4, #5]
 80053da:	2b4c      	cmp	r3, #76	; 0x4c
 80053dc:	d1ee      	bne.n	80053bc <uartParseCommand+0xb8>
								if (cmd[6] == '\n') {
 80053de:	79a3      	ldrb	r3, [r4, #6]
 80053e0:	2b0a      	cmp	r3, #10
 80053e2:	d1eb      	bne.n	80053bc <uartParseCommand+0xb8>
									passiveDuringReprogOfOtherServo();
 80053e4:	f7ff ff04 	bl	80051f0 <passiveDuringReprogOfOtherServo>
	if (strncmp(cmdU, "!P=", 3) == 0) {			// Set Servo Position command
 80053e8:	2203      	movs	r2, #3
 80053ea:	4995      	ldr	r1, [pc, #596]	; (8005640 <uartParseCommand+0x33c>)
 80053ec:	a802      	add	r0, sp, #8
 80053ee:	f000 fa87 	bl	8005900 <strncmp>
		if (strncmp((cmdU + 3), "OFF", 3) == 0) {				// Set Servo Off
 80053f2:	2203      	movs	r2, #3
	if (strncmp(cmdU, "!P=", 3) == 0) {			// Set Servo Position command
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d133      	bne.n	8005460 <uartParseCommand+0x15c>
		if (strncmp((cmdU + 3), "OFF", 3) == 0) {				// Set Servo Off
 80053f8:	ab02      	add	r3, sp, #8
 80053fa:	4992      	ldr	r1, [pc, #584]	; (8005644 <uartParseCommand+0x340>)
 80053fc:	1898      	adds	r0, r3, r2
 80053fe:	f000 fa7f 	bl	8005900 <strncmp>
 8005402:	2800      	cmp	r0, #0
 8005404:	d102      	bne.n	800540c <uartParseCommand+0x108>
			setMotorPositionControlOff();
 8005406:	f7fe fea9 	bl	800415c <setMotorPositionControlOff>
			return;
 800540a:	e7d7      	b.n	80053bc <uartParseCommand+0xb8>
		if (strncmp((cmdU + 3), "BLOCK", 5) == 0) {	// Set Servo Motors Blocked
 800540c:	ab02      	add	r3, sp, #8
 800540e:	2205      	movs	r2, #5
 8005410:	498d      	ldr	r1, [pc, #564]	; (8005648 <uartParseCommand+0x344>)
 8005412:	1cd8      	adds	r0, r3, #3
 8005414:	f000 fa74 	bl	8005900 <strncmp>
 8005418:	2800      	cmp	r0, #0
 800541a:	d107      	bne.n	800542c <uartParseCommand+0x128>
			setMotorPositionControlOff();
 800541c:	f7fe fe9e 	bl	800415c <setMotorPositionControlOff>
			TIM2->CCR1 = 65535;
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	4a8a      	ldr	r2, [pc, #552]	; (800564c <uartParseCommand+0x348>)
 8005424:	05db      	lsls	r3, r3, #23
 8005426:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = 65535;
 8005428:	639a      	str	r2, [r3, #56]	; 0x38
			return;
 800542a:	e7c7      	b.n	80053bc <uartParseCommand+0xb8>
		long dSP = ((parseHexDigit(cmd[3])) << 12)
 800542c:	221f      	movs	r2, #31
 800542e:	7921      	ldrb	r1, [r4, #4]
 8005430:	4b87      	ldr	r3, [pc, #540]	; (8005650 <uartParseCommand+0x34c>)
 8005432:	4011      	ands	r1, r2
 8005434:	5c58      	ldrb	r0, [r3, r1]
				+ ((parseHexDigit(cmd[4])) << 8) + (parseHexDigit(cmd[ 5]) << 4)
 8005436:	7961      	ldrb	r1, [r4, #5]
		long dSP = ((parseHexDigit(cmd[3])) << 12)
 8005438:	0300      	lsls	r0, r0, #12
				+ ((parseHexDigit(cmd[4])) << 8) + (parseHexDigit(cmd[ 5]) << 4)
 800543a:	4011      	ands	r1, r2
 800543c:	5c59      	ldrb	r1, [r3, r1]
 800543e:	0209      	lsls	r1, r1, #8
 8005440:	1840      	adds	r0, r0, r1
 8005442:	79a1      	ldrb	r1, [r4, #6]
 8005444:	4011      	ands	r1, r2
 8005446:	5c59      	ldrb	r1, [r3, r1]
 8005448:	0109      	lsls	r1, r1, #4
 800544a:	1840      	adds	r0, r0, r1
				+ (parseHexDigit(cmd[6]));
 800544c:	79e1      	ldrb	r1, [r4, #7]
 800544e:	400a      	ands	r2, r1
 8005450:	5c9b      	ldrb	r3, [r3, r2]
		long dSP = ((parseHexDigit(cmd[3])) << 12)
 8005452:	18c0      	adds	r0, r0, r3
		if ((dSP >= 0) && (dSP < 4096)) {
 8005454:	4b7f      	ldr	r3, [pc, #508]	; (8005654 <uartParseCommand+0x350>)
 8005456:	4298      	cmp	r0, r3
 8005458:	dcb0      	bgt.n	80053bc <uartParseCommand+0xb8>
			setDesiredMotorPosition(dSP);
 800545a:	f7fe fdf9 	bl	8004050 <setDesiredMotorPosition>
 800545e:	e7ad      	b.n	80053bc <uartParseCommand+0xb8>
	if (strncmp(cmdU, "?ID", 3) == 0) {	// Send welcome message and show servo ID
 8005460:	497d      	ldr	r1, [pc, #500]	; (8005658 <uartParseCommand+0x354>)
 8005462:	a802      	add	r0, sp, #8
 8005464:	f000 fa4c 	bl	8005900 <strncmp>
 8005468:	2800      	cmp	r0, #0
 800546a:	d104      	bne.n	8005476 <uartParseCommand+0x172>
		uartBusyWaitForTXDone();
 800546c:	f7ff fd4c 	bl	8004f08 <uartBusyWaitForTXDone>
		uartShowVersion();
 8005470:	f7ff fd0c 	bl	8004e8c <uartShowVersion>
		return;
 8005474:	e7a2      	b.n	80053bc <uartParseCommand+0xb8>
	if (strncmp(cmdU, "?P", 2) == 0) {			// Get Servo Position command
 8005476:	2202      	movs	r2, #2
 8005478:	4978      	ldr	r1, [pc, #480]	; (800565c <uartParseCommand+0x358>)
 800547a:	a802      	add	r0, sp, #8
 800547c:	f000 fa40 	bl	8005900 <strncmp>
 8005480:	2800      	cmp	r0, #0
 8005482:	d118      	bne.n	80054b6 <uartParseCommand+0x1b2>
		uartSendString("P-");
 8005484:	4876      	ldr	r0, [pc, #472]	; (8005660 <uartParseCommand+0x35c>)
 8005486:	f7ff fd89 	bl	8004f9c <uartSendString>
		uartSendHexByte(SERVO_ID);
 800548a:	6830      	ldr	r0, [r6, #0]
 800548c:	b2c0      	uxtb	r0, r0
 800548e:	f7ff fdf9 	bl	8005084 <uartSendHexByte>
		uartSendChar('-');
 8005492:	202d      	movs	r0, #45	; 0x2d
 8005494:	f7ff fd76 	bl	8004f84 <uartSendChar>
		uartSendHexShort(currentServoPosition);
 8005498:	4b72      	ldr	r3, [pc, #456]	; (8005664 <uartParseCommand+0x360>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	f7ff fdd8 	bl	8005050 <uartSendHexShort>
		uartSendChar('-');
 80054a0:	202d      	movs	r0, #45	; 0x2d
 80054a2:	f7ff fd6f 	bl	8004f84 <uartSendChar>
		uartSendHexShort(desiredServoPosition);
 80054a6:	4b70      	ldr	r3, [pc, #448]	; (8005668 <uartParseCommand+0x364>)
			uartSendHexShort(kneeBy);
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	f7ff fdd1 	bl	8005050 <uartSendHexShort>
			uartSendChar('\n');
 80054ae:	200a      	movs	r0, #10
 80054b0:	f7ff fd68 	bl	8004f84 <uartSendChar>
			return;
 80054b4:	e782      	b.n	80053bc <uartParseCommand+0xb8>
	if (magnetSensorKneeAddress) {
 80054b6:	4b6d      	ldr	r3, [pc, #436]	; (800566c <uartParseCommand+0x368>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d019      	beq.n	80054f2 <uartParseCommand+0x1ee>
		if (strncmp(cmdU, "?K", 2) == 0) {	// Get Knee Magnetic Flux command
 80054be:	2202      	movs	r2, #2
 80054c0:	496b      	ldr	r1, [pc, #428]	; (8005670 <uartParseCommand+0x36c>)
 80054c2:	a802      	add	r0, sp, #8
 80054c4:	f000 fa1c 	bl	8005900 <strncmp>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	d112      	bne.n	80054f2 <uartParseCommand+0x1ee>
			uartSendString("K-");
 80054cc:	4869      	ldr	r0, [pc, #420]	; (8005674 <uartParseCommand+0x370>)
 80054ce:	f7ff fd65 	bl	8004f9c <uartSendString>
			uartSendHexByte(SERVO_ID);
 80054d2:	6830      	ldr	r0, [r6, #0]
 80054d4:	b2c0      	uxtb	r0, r0
 80054d6:	f7ff fdd5 	bl	8005084 <uartSendHexByte>
			uartSendChar('-');
 80054da:	202d      	movs	r0, #45	; 0x2d
 80054dc:	f7ff fd52 	bl	8004f84 <uartSendChar>
			uartSendHexShort(kneeBx);
 80054e0:	4b65      	ldr	r3, [pc, #404]	; (8005678 <uartParseCommand+0x374>)
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	f7ff fdb4 	bl	8005050 <uartSendHexShort>
			uartSendChar('-');
 80054e8:	202d      	movs	r0, #45	; 0x2d
 80054ea:	f7ff fd4b 	bl	8004f84 <uartSendChar>
			uartSendHexShort(kneeBy);
 80054ee:	4b63      	ldr	r3, [pc, #396]	; (800567c <uartParseCommand+0x378>)
 80054f0:	e7da      	b.n	80054a8 <uartParseCommand+0x1a4>
	if (footPressureSensorAddress) {
 80054f2:	4b63      	ldr	r3, [pc, #396]	; (8005680 <uartParseCommand+0x37c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d012      	beq.n	8005520 <uartParseCommand+0x21c>
		if (strncmp(cmdU, "?F", 2) == 0) {	// Get Foot Pressure value command
 80054fa:	2202      	movs	r2, #2
 80054fc:	4961      	ldr	r1, [pc, #388]	; (8005684 <uartParseCommand+0x380>)
 80054fe:	a802      	add	r0, sp, #8
 8005500:	f000 f9fe 	bl	8005900 <strncmp>
 8005504:	2800      	cmp	r0, #0
 8005506:	d10b      	bne.n	8005520 <uartParseCommand+0x21c>
			uartSendString("F-");
 8005508:	485f      	ldr	r0, [pc, #380]	; (8005688 <uartParseCommand+0x384>)
 800550a:	f7ff fd47 	bl	8004f9c <uartSendString>
			uartSendHexByte(SERVO_ID);
 800550e:	6830      	ldr	r0, [r6, #0]
 8005510:	b2c0      	uxtb	r0, r0
 8005512:	f7ff fdb7 	bl	8005084 <uartSendHexByte>
			uartSendChar('-');
 8005516:	202d      	movs	r0, #45	; 0x2d
 8005518:	f7ff fd34 	bl	8004f84 <uartSendChar>
			uartSendHexShort(footPressureReading);
 800551c:	4b5b      	ldr	r3, [pc, #364]	; (800568c <uartParseCommand+0x388>)
 800551e:	e7c3      	b.n	80054a8 <uartParseCommand+0x1a4>
	if (strncmp(cmdU, "!L", 2) == 0) {							// LED command?
 8005520:	2202      	movs	r2, #2
 8005522:	495b      	ldr	r1, [pc, #364]	; (8005690 <uartParseCommand+0x38c>)
 8005524:	a802      	add	r0, sp, #8
 8005526:	f000 f9eb 	bl	8005900 <strncmp>
 800552a:	2800      	cmp	r0, #0
 800552c:	d12b      	bne.n	8005586 <uartParseCommand+0x282>
		if (cmd[2] == '+') {
 800552e:	78e3      	ldrb	r3, [r4, #3]
 8005530:	2b2b      	cmp	r3, #43	; 0x2b
 8005532:	d104      	bne.n	800553e <uartParseCommand+0x23a>
			setLED(1, LED_DEFAULT_BRIGHTNESS);
 8005534:	2132      	movs	r1, #50	; 0x32
 8005536:	3001      	adds	r0, #1
			setLED(0, LED_DEFAULT_BRIGHTNESS);
 8005538:	f7fe fa16 	bl	8003968 <setLED>
			return;
 800553c:	e73e      	b.n	80053bc <uartParseCommand+0xb8>
		if (cmd[2] == '-') {
 800553e:	2b2d      	cmp	r3, #45	; 0x2d
 8005540:	d101      	bne.n	8005546 <uartParseCommand+0x242>
			setLED(0, LED_DEFAULT_BRIGHTNESS);
 8005542:	2132      	movs	r1, #50	; 0x32
 8005544:	e7f8      	b.n	8005538 <uartParseCommand+0x234>
		if (cmd[2] == '.') {
 8005546:	2b2e      	cmp	r3, #46	; 0x2e
 8005548:	d104      	bne.n	8005554 <uartParseCommand+0x250>
			setLEDBlink(250, LED_DEFAULT_BRIGHTNESS);
 800554a:	2132      	movs	r1, #50	; 0x32
 800554c:	20fa      	movs	r0, #250	; 0xfa
			setLEDBlink(time, LED_DEFAULT_BRIGHTNESS);
 800554e:	f7fe fa2d 	bl	80039ac <setLEDBlink>
			return;
 8005552:	e733      	b.n	80053bc <uartParseCommand+0xb8>
		if (cmd[2] == '=') {
 8005554:	2b3d      	cmp	r3, #61	; 0x3d
 8005556:	d000      	beq.n	800555a <uartParseCommand+0x256>
 8005558:	e730      	b.n	80053bc <uartParseCommand+0xb8>
			long time = ((parseHexDigit(cmd[3])) << 12)
 800555a:	221f      	movs	r2, #31
 800555c:	7921      	ldrb	r1, [r4, #4]
 800555e:	4b3c      	ldr	r3, [pc, #240]	; (8005650 <uartParseCommand+0x34c>)
 8005560:	4011      	ands	r1, r2
 8005562:	5c58      	ldrb	r0, [r3, r1]
					+ ((parseHexDigit(cmd[4])) << 8)
 8005564:	7961      	ldrb	r1, [r4, #5]
			long time = ((parseHexDigit(cmd[3])) << 12)
 8005566:	0300      	lsls	r0, r0, #12
					+ ((parseHexDigit(cmd[4])) << 8)
 8005568:	4011      	ands	r1, r2
 800556a:	5c59      	ldrb	r1, [r3, r1]
 800556c:	0209      	lsls	r1, r1, #8
 800556e:	1840      	adds	r0, r0, r1
					+ (parseHexDigit(cmd[ 5]) << 4) + (parseHexDigit(cmd[6]));
 8005570:	79a1      	ldrb	r1, [r4, #6]
 8005572:	4011      	ands	r1, r2
 8005574:	5c59      	ldrb	r1, [r3, r1]
 8005576:	0109      	lsls	r1, r1, #4
 8005578:	1840      	adds	r0, r0, r1
 800557a:	79e1      	ldrb	r1, [r4, #7]
 800557c:	400a      	ands	r2, r1
 800557e:	5c9b      	ldrb	r3, [r3, r2]
			setLEDBlink(time, LED_DEFAULT_BRIGHTNESS);
 8005580:	2132      	movs	r1, #50	; 0x32
			long time = ((parseHexDigit(cmd[3])) << 12)
 8005582:	18c0      	adds	r0, r0, r3
 8005584:	e7e3      	b.n	800554e <uartParseCommand+0x24a>
	if (strncmp(cmdU, "!C", 2) == 0) {				// Set PID gain parameter
 8005586:	2202      	movs	r2, #2
 8005588:	4942      	ldr	r1, [pc, #264]	; (8005694 <uartParseCommand+0x390>)
 800558a:	a802      	add	r0, sp, #8
 800558c:	f000 f9b8 	bl	8005900 <strncmp>
 8005590:	2800      	cmp	r0, #0
 8005592:	d123      	bne.n	80055dc <uartParseCommand+0x2d8>
		long gain = ((parseHexDigit(cmd[4])) << 12)
 8005594:	211f      	movs	r1, #31
 8005596:	7963      	ldrb	r3, [r4, #5]
				+ ((parseHexDigit(cmd[5])) << 8) + (parseHexDigit(cmd[ 6]) << 4)
 8005598:	79a0      	ldrb	r0, [r4, #6]
		long gain = ((parseHexDigit(cmd[4])) << 12)
 800559a:	4a2d      	ldr	r2, [pc, #180]	; (8005650 <uartParseCommand+0x34c>)
 800559c:	400b      	ands	r3, r1
				+ ((parseHexDigit(cmd[5])) << 8) + (parseHexDigit(cmd[ 6]) << 4)
 800559e:	4008      	ands	r0, r1
		long gain = ((parseHexDigit(cmd[4])) << 12)
 80055a0:	5cd3      	ldrb	r3, [r2, r3]
				+ ((parseHexDigit(cmd[5])) << 8) + (parseHexDigit(cmd[ 6]) << 4)
 80055a2:	5c10      	ldrb	r0, [r2, r0]
		long gain = ((parseHexDigit(cmd[4])) << 12)
 80055a4:	031b      	lsls	r3, r3, #12
				+ ((parseHexDigit(cmd[5])) << 8) + (parseHexDigit(cmd[ 6]) << 4)
 80055a6:	0200      	lsls	r0, r0, #8
 80055a8:	181b      	adds	r3, r3, r0
 80055aa:	79e0      	ldrb	r0, [r4, #7]
 80055ac:	4008      	ands	r0, r1
 80055ae:	5c10      	ldrb	r0, [r2, r0]
 80055b0:	0100      	lsls	r0, r0, #4
 80055b2:	181b      	adds	r3, r3, r0
				+ (parseHexDigit(cmd[7]));
 80055b4:	7a20      	ldrb	r0, [r4, #8]
 80055b6:	4001      	ands	r1, r0
 80055b8:	5c52      	ldrb	r2, [r2, r1]
		long gain = ((parseHexDigit(cmd[4])) << 12)
 80055ba:	189b      	adds	r3, r3, r2
		if (cmdU[2] == 'P') {
 80055bc:	aa02      	add	r2, sp, #8
 80055be:	7892      	ldrb	r2, [r2, #2]
 80055c0:	2a50      	cmp	r2, #80	; 0x50
 80055c2:	d102      	bne.n	80055ca <uartParseCommand+0x2c6>
			gainP = gain;
 80055c4:	4a34      	ldr	r2, [pc, #208]	; (8005698 <uartParseCommand+0x394>)
					gainD = gain;
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	e6f8      	b.n	80053bc <uartParseCommand+0xb8>
			if (cmdU[2] == 'I') {
 80055ca:	2a49      	cmp	r2, #73	; 0x49
 80055cc:	d101      	bne.n	80055d2 <uartParseCommand+0x2ce>
				gainI = gain;
 80055ce:	4a33      	ldr	r2, [pc, #204]	; (800569c <uartParseCommand+0x398>)
 80055d0:	e7f9      	b.n	80055c6 <uartParseCommand+0x2c2>
				if (cmdU[2] == 'D') {
 80055d2:	2a44      	cmp	r2, #68	; 0x44
 80055d4:	d000      	beq.n	80055d8 <uartParseCommand+0x2d4>
 80055d6:	e6f1      	b.n	80053bc <uartParseCommand+0xb8>
					gainD = gain;
 80055d8:	4a31      	ldr	r2, [pc, #196]	; (80056a0 <uartParseCommand+0x39c>)
 80055da:	e7f4      	b.n	80055c6 <uartParseCommand+0x2c2>
	if (strncmp(cmdU, "?C", 2) == 0) {				// Get PID gain parameter
 80055dc:	2202      	movs	r2, #2
 80055de:	4931      	ldr	r1, [pc, #196]	; (80056a4 <uartParseCommand+0x3a0>)
 80055e0:	a802      	add	r0, sp, #8
 80055e2:	f000 f98d 	bl	8005900 <strncmp>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d160      	bne.n	80056ac <uartParseCommand+0x3a8>
		uartSendString("C-");
 80055ea:	482f      	ldr	r0, [pc, #188]	; (80056a8 <uartParseCommand+0x3a4>)
 80055ec:	f7ff fcd6 	bl	8004f9c <uartSendString>
		uartSendHexByte(SERVO_ID);
 80055f0:	6830      	ldr	r0, [r6, #0]
 80055f2:	b2c0      	uxtb	r0, r0
 80055f4:	f7ff fd46 	bl	8005084 <uartSendHexByte>
		uartSendChar('-');
 80055f8:	202d      	movs	r0, #45	; 0x2d
 80055fa:	f7ff fcc3 	bl	8004f84 <uartSendChar>
		uartSendHexShort(gainP);
 80055fe:	4b26      	ldr	r3, [pc, #152]	; (8005698 <uartParseCommand+0x394>)
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	f7ff fd25 	bl	8005050 <uartSendHexShort>
		uartSendChar('-');
 8005606:	202d      	movs	r0, #45	; 0x2d
 8005608:	f7ff fcbc 	bl	8004f84 <uartSendChar>
		uartSendHexShort(gainI);
 800560c:	4b23      	ldr	r3, [pc, #140]	; (800569c <uartParseCommand+0x398>)
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	f7ff fd1e 	bl	8005050 <uartSendHexShort>
		uartSendChar('-');
 8005614:	202d      	movs	r0, #45	; 0x2d
 8005616:	f7ff fcb5 	bl	8004f84 <uartSendChar>
		uartSendHexShort(gainD);
 800561a:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <uartParseCommand+0x39c>)
 800561c:	e744      	b.n	80054a8 <uartParseCommand+0x1a4>
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	20000214 	.word	0x20000214
 8005624:	40003000 	.word	0x40003000
 8005628:	0000aaaa 	.word	0x0000aaaa
 800562c:	40021000 	.word	0x40021000
 8005630:	40012400 	.word	0x40012400
 8005634:	08005f42 	.word	0x08005f42
 8005638:	200003f0 	.word	0x200003f0
 800563c:	08005f45 	.word	0x08005f45
 8005640:	08005f49 	.word	0x08005f49
 8005644:	08005f4d 	.word	0x08005f4d
 8005648:	08005f51 	.word	0x08005f51
 800564c:	0000ffff 	.word	0x0000ffff
 8005650:	08005f22 	.word	0x08005f22
 8005654:	00000fff 	.word	0x00000fff
 8005658:	08005f57 	.word	0x08005f57
 800565c:	08005f5b 	.word	0x08005f5b
 8005660:	08005f5e 	.word	0x08005f5e
 8005664:	2000001c 	.word	0x2000001c
 8005668:	2000000c 	.word	0x2000000c
 800566c:	20000240 	.word	0x20000240
 8005670:	08005f61 	.word	0x08005f61
 8005674:	08005f64 	.word	0x08005f64
 8005678:	200004e8 	.word	0x200004e8
 800567c:	200004d8 	.word	0x200004d8
 8005680:	20000228 	.word	0x20000228
 8005684:	08005f67 	.word	0x08005f67
 8005688:	08005f6a 	.word	0x08005f6a
 800568c:	200004e0 	.word	0x200004e0
 8005690:	08005f6d 	.word	0x08005f6d
 8005694:	08005f70 	.word	0x08005f70
 8005698:	20000018 	.word	0x20000018
 800569c:	20000014 	.word	0x20000014
 80056a0:	20000010 	.word	0x20000010
 80056a4:	08005f73 	.word	0x08005f73
 80056a8:	08005f76 	.word	0x08005f76
	if (strncmp(cmdU, "!U", 2) == 0) {				// set UART output enable
 80056ac:	2202      	movs	r2, #2
 80056ae:	4941      	ldr	r1, [pc, #260]	; (80057b4 <uartParseCommand+0x4b0>)
 80056b0:	a802      	add	r0, sp, #8
 80056b2:	f000 f925 	bl	8005900 <strncmp>
 80056b6:	1e06      	subs	r6, r0, #0
 80056b8:	d10a      	bne.n	80056d0 <uartParseCommand+0x3cc>
		if (cmd[2] == '+') {
 80056ba:	78e3      	ldrb	r3, [r4, #3]
 80056bc:	4c3e      	ldr	r4, [pc, #248]	; (80057b8 <uartParseCommand+0x4b4>)
 80056be:	2b2b      	cmp	r3, #43	; 0x2b
 80056c0:	d102      	bne.n	80056c8 <uartParseCommand+0x3c4>
			UARTOutputEnabled = 1;
 80056c2:	3b2a      	subs	r3, #42	; 0x2a
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	e679      	b.n	80053bc <uartParseCommand+0xb8>
			uartBusyWaitForTXDone();
 80056c8:	f7ff fc1e 	bl	8004f08 <uartBusyWaitForTXDone>
			UARTOutputEnabled = 0;
 80056cc:	6026      	str	r6, [r4, #0]
 80056ce:	e675      	b.n	80053bc <uartParseCommand+0xb8>
	if (strncmp(cmd, "RESET", 5) == 0) {							// RESET?
 80056d0:	2205      	movs	r2, #5
 80056d2:	493a      	ldr	r1, [pc, #232]	; (80057bc <uartParseCommand+0x4b8>)
 80056d4:	0028      	movs	r0, r5
 80056d6:	f000 f913 	bl	8005900 <strncmp>
 80056da:	2800      	cmp	r0, #0
 80056dc:	d11b      	bne.n	8005716 <uartParseCommand+0x412>
		IWDG_CLEAR();					// clear watchdog, assuming all well :)
 80056de:	4c38      	ldr	r4, [pc, #224]	; (80057c0 <uartParseCommand+0x4bc>)
 80056e0:	4d38      	ldr	r5, [pc, #224]	; (80057c4 <uartParseCommand+0x4c0>)
 80056e2:	6025      	str	r5, [r4, #0]
		setMotorSpeed(0);
 80056e4:	f7fe fcc4 	bl	8004070 <setMotorSpeed>
		uartBusyWaitForTXDone();
 80056e8:	f7ff fc0e 	bl	8004f08 <uartBusyWaitForTXDone>
		uartSendStringDirect("-RESET\n");
 80056ec:	4836      	ldr	r0, [pc, #216]	; (80057c8 <uartParseCommand+0x4c4>)
 80056ee:	f7ff fc77 	bl	8004fe0 <uartSendStringDirect>
		uartBusyWaitForTXDone();
 80056f2:	f7ff fc09 	bl	8004f08 <uartBusyWaitForTXDone>
		RCC->CSR |= BIT(23);// clear reset flags (memory of reset source) (so we're not ending up in the bootloader)
 80056f6:	2380      	movs	r3, #128	; 0x80
 80056f8:	4a34      	ldr	r2, [pc, #208]	; (80057cc <uartParseCommand+0x4c8>)
		IWDG_CLEAR();					// clear watchdog, assuming all well :)
 80056fa:	6025      	str	r5, [r4, #0]
		RCC->CSR |= BIT(23);// clear reset flags (memory of reset source) (so we're not ending up in the bootloader)
 80056fc:	6d11      	ldr	r1, [r2, #80]	; 0x50
 80056fe:	041b      	lsls	r3, r3, #16
 8005700:	430b      	orrs	r3, r1
 8005702:	6513      	str	r3, [r2, #80]	; 0x50
  __ASM volatile ("dsb 0xF":::"memory");
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <uartParseCommand+0x4cc>)
 800570a:	4a32      	ldr	r2, [pc, #200]	; (80057d4 <uartParseCommand+0x4d0>)
 800570c:	60da      	str	r2, [r3, #12]
 800570e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8005712:	46c0      	nop			; (mov r8, r8)
 8005714:	e7fd      	b.n	8005712 <uartParseCommand+0x40e>
	if (strncmp(cmd, "BOOTL", 5) == 0) {						// BOOTLOADER?
 8005716:	2205      	movs	r2, #5
 8005718:	492f      	ldr	r1, [pc, #188]	; (80057d8 <uartParseCommand+0x4d4>)
 800571a:	0028      	movs	r0, r5
 800571c:	f000 f8f0 	bl	8005900 <strncmp>
 8005720:	2800      	cmp	r0, #0
 8005722:	d11f      	bne.n	8005764 <uartParseCommand+0x460>
		setMotorSpeed(0);
 8005724:	f7fe fca4 	bl	8004070 <setMotorSpeed>
		uartBusyWaitForTXDone();
 8005728:	f7ff fbee 	bl	8004f08 <uartBusyWaitForTXDone>
		uartSendStringDirect("-BOOTLOADER\n");
 800572c:	482b      	ldr	r0, [pc, #172]	; (80057dc <uartParseCommand+0x4d8>)
 800572e:	f7ff fc57 	bl	8004fe0 <uartSendStringDirect>
		uartBusyWaitForTXDone();
 8005732:	f7ff fbe9 	bl	8004f08 <uartBusyWaitForTXDone>
		sleepMS(50);							// just to be sure
 8005736:	2032      	movs	r0, #50	; 0x32
 8005738:	f7fe f832 	bl	80037a0 <sleepMS>
		uartBusyWaitForTXDone();
 800573c:	f7ff fbe4 	bl	8004f08 <uartBusyWaitForTXDone>
		IWDG->KR = 0x0000CCCC;			// enable IWDG (independent watch-dog)
 8005740:	4b1f      	ldr	r3, [pc, #124]	; (80057c0 <uartParseCommand+0x4bc>)
 8005742:	4a27      	ldr	r2, [pc, #156]	; (80057e0 <uartParseCommand+0x4dc>)
 8005744:	601a      	str	r2, [r3, #0]
		IWDG->KR = 0x00005555;			// enable register access
 8005746:	4a27      	ldr	r2, [pc, #156]	; (80057e4 <uartParseCommand+0x4e0>)
 8005748:	601a      	str	r2, [r3, #0]
		IWDG->PR = 0x07;// prescaler 256 --> 32Khz/256 --> 125Hz --> 8msec ticks
 800574a:	2207      	movs	r2, #7
 800574c:	605a      	str	r2, [r3, #4]
		IWDG->RLR = 1;					// re-load register, load one tick
 800574e:	3a06      	subs	r2, #6
 8005750:	609a      	str	r2, [r3, #8]
		while (IWDG->SR != 0x00000000) {
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	2a00      	cmp	r2, #0
 8005756:	d103      	bne.n	8005760 <uartParseCommand+0x45c>
		IWDG->KR = 0x0000AAAA;			// start WDT
 8005758:	4a1a      	ldr	r2, [pc, #104]	; (80057c4 <uartParseCommand+0x4c0>)
 800575a:	601a      	str	r2, [r3, #0]
			asm volatile ("nop");
 800575c:	46c0      	nop			; (mov r8, r8)
 800575e:	e7fd      	b.n	800575c <uartParseCommand+0x458>
			asm volatile ("nop");
 8005760:	46c0      	nop			; (mov r8, r8)
 8005762:	e7f6      	b.n	8005752 <uartParseCommand+0x44e>
	if (strncmp(cmd, "REPROG", 6) == 0) {						// BOOTLOADER?
 8005764:	2206      	movs	r2, #6
 8005766:	4920      	ldr	r1, [pc, #128]	; (80057e8 <uartParseCommand+0x4e4>)
 8005768:	0028      	movs	r0, r5
 800576a:	f000 f8c9 	bl	8005900 <strncmp>
 800576e:	2800      	cmp	r0, #0
 8005770:	d10f      	bne.n	8005792 <uartParseCommand+0x48e>
		setMotorSpeed(0);
 8005772:	f7fe fc7d 	bl	8004070 <setMotorSpeed>
		uartBusyWaitForTXDone();
 8005776:	f7ff fbc7 	bl	8004f08 <uartBusyWaitForTXDone>
		uartSendStringDirect("-RP-BOOTLOADER\n");
 800577a:	481c      	ldr	r0, [pc, #112]	; (80057ec <uartParseCommand+0x4e8>)
 800577c:	f7ff fc30 	bl	8004fe0 <uartSendStringDirect>
		uartBusyWaitForTXDone();
 8005780:	f7ff fbc2 	bl	8004f08 <uartBusyWaitForTXDone>
		sleepMS(50);							// just to be sure
 8005784:	2032      	movs	r0, #50	; 0x32
 8005786:	f7fe f80b 	bl	80037a0 <sleepMS>
		uartBusyWaitForTXDone();
 800578a:	f7ff fbbd 	bl	8004f08 <uartBusyWaitForTXDone>
		stopAndEnterBootLoader();
 800578e:	f7fe f8b5 	bl	80038fc <stopAndEnterBootLoader>
	if (strncmp(cmd, "??", 2) == 0) {								// show help
 8005792:	2202      	movs	r2, #2
 8005794:	4916      	ldr	r1, [pc, #88]	; (80057f0 <uartParseCommand+0x4ec>)
 8005796:	0028      	movs	r0, r5
 8005798:	f000 f8b2 	bl	8005900 <strncmp>
 800579c:	2800      	cmp	r0, #0
 800579e:	d102      	bne.n	80057a6 <uartParseCommand+0x4a2>
		uartShowHelp();
 80057a0:	f7ff fca2 	bl	80050e8 <uartShowHelp>
		return;
 80057a4:	e60a      	b.n	80053bc <uartParseCommand+0xb8>
	uartSendString("?: ");									// unknown command
 80057a6:	4813      	ldr	r0, [pc, #76]	; (80057f4 <uartParseCommand+0x4f0>)
 80057a8:	f7ff fbf8 	bl	8004f9c <uartSendString>
	uartSendString(cmd);
 80057ac:	0028      	movs	r0, r5
 80057ae:	f7ff fbf5 	bl	8004f9c <uartSendString>
 80057b2:	e603      	b.n	80053bc <uartParseCommand+0xb8>
 80057b4:	08005f79 	.word	0x08005f79
 80057b8:	20000024 	.word	0x20000024
 80057bc:	08005f7c 	.word	0x08005f7c
 80057c0:	40003000 	.word	0x40003000
 80057c4:	0000aaaa 	.word	0x0000aaaa
 80057c8:	08005f82 	.word	0x08005f82
 80057cc:	40021000 	.word	0x40021000
 80057d0:	e000ed00 	.word	0xe000ed00
 80057d4:	05fa0004 	.word	0x05fa0004
 80057d8:	08005f8a 	.word	0x08005f8a
 80057dc:	08005f9a 	.word	0x08005f9a
 80057e0:	0000cccc 	.word	0x0000cccc
 80057e4:	00005555 	.word	0x00005555
 80057e8:	08005f90 	.word	0x08005f90
 80057ec:	08005f97 	.word	0x08005f97
 80057f0:	08005fa7 	.word	0x08005fa7
 80057f4:	08005faa 	.word	0x08005faa

080057f8 <uartReceiveChar>:
	uartSendChar('-');
	uartSendHexShort(gainD);
	uartSendChar('\n');
}

void uartReceiveChar(char c) {
 80057f8:	b570      	push	{r4, r5, r6, lr}
 80057fa:	4c10      	ldr	r4, [pc, #64]	; (800583c <uartReceiveChar+0x44>)
 80057fc:	6823      	ldr	r3, [r4, #0]

		return;
	}
#endif

	if ((c == '\n') || (c == '\r')) {
 80057fe:	280a      	cmp	r0, #10
 8005800:	d001      	beq.n	8005806 <uartReceiveChar+0xe>
 8005802:	280d      	cmp	r0, #13
 8005804:	d10b      	bne.n	800581e <uartReceiveChar+0x26>
		uartCMDBuffer[uartCMDPointer++] = '\n';
 8005806:	220a      	movs	r2, #10
		uartCMDBuffer[uartCMDPointer++] = 0;
 8005808:	2500      	movs	r5, #0
		uartCMDBuffer[uartCMDPointer++] = '\n';
 800580a:	480d      	ldr	r0, [pc, #52]	; (8005840 <uartReceiveChar+0x48>)
 800580c:	54c2      	strb	r2, [r0, r3]
		uartCMDBuffer[uartCMDPointer++] = 0;
 800580e:	1c9a      	adds	r2, r3, #2
 8005810:	18c3      	adds	r3, r0, r3
 8005812:	6022      	str	r2, [r4, #0]
 8005814:	705d      	strb	r5, [r3, #1]
#ifndef UART_SINGLE_WIRE
		uartSendChar('\n');
#endif
		uartParseCommand(uartCMDBuffer);
 8005816:	f7ff fd75 	bl	8005304 <uartParseCommand>
		uartCMDPointer = 0;
 800581a:	6025      	str	r5, [r4, #0]
		uartCMDBuffer[uartCMDPointer++] = c;
	}
#ifndef UART_SINGLE_WIRE
	uartSendChar(c);
#endif
}
 800581c:	bd70      	pop	{r4, r5, r6, pc}
	if (c == 8) {								// BACKSPACE
 800581e:	2808      	cmp	r0, #8
 8005820:	d104      	bne.n	800582c <uartReceiveChar+0x34>
		if (uartCMDPointer) {
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0fa      	beq.n	800581c <uartReceiveChar+0x24>
			uartCMDPointer--;
 8005826:	3b01      	subs	r3, #1
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	e7f7      	b.n	800581c <uartReceiveChar+0x24>
	if (uartCMDPointer < (UART_BUFFER_SIZE - 2)) {
 800582c:	2bfd      	cmp	r3, #253	; 0xfd
 800582e:	dcf5      	bgt.n	800581c <uartReceiveChar+0x24>
		uartCMDBuffer[uartCMDPointer++] = c;
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	6022      	str	r2, [r4, #0]
 8005834:	4a02      	ldr	r2, [pc, #8]	; (8005840 <uartReceiveChar+0x48>)
 8005836:	54d0      	strb	r0, [r2, r3]
 8005838:	e7f0      	b.n	800581c <uartReceiveChar+0x24>
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	20000248 	.word	0x20000248
 8005840:	20000700 	.word	0x20000700

08005844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005844:	480d      	ldr	r0, [pc, #52]	; (800587c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005846:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005848:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800584a:	e003      	b.n	8005854 <LoopCopyDataInit>

0800584c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800584c:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800584e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005850:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005852:	3104      	adds	r1, #4

08005854 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005854:	480b      	ldr	r0, [pc, #44]	; (8005884 <LoopForever+0xa>)
  ldr  r3, =_edata
 8005856:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <LoopForever+0xe>)
  adds  r2, r0, r1
 8005858:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800585a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800585c:	d3f6      	bcc.n	800584c <CopyDataInit>
  ldr  r2, =_sbss
 800585e:	4a0b      	ldr	r2, [pc, #44]	; (800588c <LoopForever+0x12>)
  b  LoopFillZerobss
 8005860:	e002      	b.n	8005868 <LoopFillZerobss>

08005862 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005862:	2300      	movs	r3, #0
  str  r3, [r2]
 8005864:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005866:	3204      	adds	r2, #4

08005868 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8005868:	4b09      	ldr	r3, [pc, #36]	; (8005890 <LoopForever+0x16>)
  cmp  r2, r3
 800586a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800586c:	d3f9      	bcc.n	8005862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800586e:	f7ff fadf 	bl	8004e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005872:	f000 f811 	bl	8005898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005876:	f7fe f8f1 	bl	8003a5c <main>

0800587a <LoopForever>:

LoopForever:
    b LoopForever
 800587a:	e7fe      	b.n	800587a <LoopForever>
   ldr   r0, =_estack
 800587c:	20001fff 	.word	0x20001fff
  ldr  r3, =_sidata
 8005880:	080063dc 	.word	0x080063dc
  ldr  r0, =_sdata
 8005884:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005888:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 800588c:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8005890:	20000800 	.word	0x20000800

08005894 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005894:	e7fe      	b.n	8005894 <ADC1_COMP_IRQHandler>
	...

08005898 <__libc_init_array>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	2600      	movs	r6, #0
 800589c:	4d0c      	ldr	r5, [pc, #48]	; (80058d0 <__libc_init_array+0x38>)
 800589e:	4c0d      	ldr	r4, [pc, #52]	; (80058d4 <__libc_init_array+0x3c>)
 80058a0:	1b64      	subs	r4, r4, r5
 80058a2:	10a4      	asrs	r4, r4, #2
 80058a4:	42a6      	cmp	r6, r4
 80058a6:	d109      	bne.n	80058bc <__libc_init_array+0x24>
 80058a8:	2600      	movs	r6, #0
 80058aa:	f000 fa1d 	bl	8005ce8 <_init>
 80058ae:	4d0a      	ldr	r5, [pc, #40]	; (80058d8 <__libc_init_array+0x40>)
 80058b0:	4c0a      	ldr	r4, [pc, #40]	; (80058dc <__libc_init_array+0x44>)
 80058b2:	1b64      	subs	r4, r4, r5
 80058b4:	10a4      	asrs	r4, r4, #2
 80058b6:	42a6      	cmp	r6, r4
 80058b8:	d105      	bne.n	80058c6 <__libc_init_array+0x2e>
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	00b3      	lsls	r3, r6, #2
 80058be:	58eb      	ldr	r3, [r5, r3]
 80058c0:	4798      	blx	r3
 80058c2:	3601      	adds	r6, #1
 80058c4:	e7ee      	b.n	80058a4 <__libc_init_array+0xc>
 80058c6:	00b3      	lsls	r3, r6, #2
 80058c8:	58eb      	ldr	r3, [r5, r3]
 80058ca:	4798      	blx	r3
 80058cc:	3601      	adds	r6, #1
 80058ce:	e7f2      	b.n	80058b6 <__libc_init_array+0x1e>
 80058d0:	080063d4 	.word	0x080063d4
 80058d4:	080063d4 	.word	0x080063d4
 80058d8:	080063d4 	.word	0x080063d4
 80058dc:	080063d8 	.word	0x080063d8

080058e0 <memset>:
 80058e0:	0003      	movs	r3, r0
 80058e2:	1812      	adds	r2, r2, r0
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d100      	bne.n	80058ea <memset+0xa>
 80058e8:	4770      	bx	lr
 80058ea:	7019      	strb	r1, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	e7f9      	b.n	80058e4 <memset+0x4>

080058f0 <strcpy>:
 80058f0:	0003      	movs	r3, r0
 80058f2:	780a      	ldrb	r2, [r1, #0]
 80058f4:	3101      	adds	r1, #1
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	2a00      	cmp	r2, #0
 80058fc:	d1f9      	bne.n	80058f2 <strcpy+0x2>
 80058fe:	4770      	bx	lr

08005900 <strncmp>:
 8005900:	2300      	movs	r3, #0
 8005902:	b530      	push	{r4, r5, lr}
 8005904:	429a      	cmp	r2, r3
 8005906:	d00a      	beq.n	800591e <strncmp+0x1e>
 8005908:	3a01      	subs	r2, #1
 800590a:	5cc4      	ldrb	r4, [r0, r3]
 800590c:	5ccd      	ldrb	r5, [r1, r3]
 800590e:	42ac      	cmp	r4, r5
 8005910:	d104      	bne.n	800591c <strncmp+0x1c>
 8005912:	4293      	cmp	r3, r2
 8005914:	d002      	beq.n	800591c <strncmp+0x1c>
 8005916:	3301      	adds	r3, #1
 8005918:	2c00      	cmp	r4, #0
 800591a:	d1f6      	bne.n	800590a <strncmp+0xa>
 800591c:	1b63      	subs	r3, r4, r5
 800591e:	0018      	movs	r0, r3
 8005920:	bd30      	pop	{r4, r5, pc}

08005922 <strupr>:
 8005922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005924:	0005      	movs	r5, r0
 8005926:	0004      	movs	r4, r0
 8005928:	2603      	movs	r6, #3
 800592a:	7827      	ldrb	r7, [r4, #0]
 800592c:	2f00      	cmp	r7, #0
 800592e:	d101      	bne.n	8005934 <strupr+0x12>
 8005930:	0028      	movs	r0, r5
 8005932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005934:	f000 f80a 	bl	800594c <__locale_ctype_ptr>
 8005938:	19c0      	adds	r0, r0, r7
 800593a:	7842      	ldrb	r2, [r0, #1]
 800593c:	4032      	ands	r2, r6
 800593e:	2a02      	cmp	r2, #2
 8005940:	d100      	bne.n	8005944 <strupr+0x22>
 8005942:	3f20      	subs	r7, #32
 8005944:	7027      	strb	r7, [r4, #0]
 8005946:	3401      	adds	r4, #1
 8005948:	e7ef      	b.n	800592a <strupr+0x8>
	...

0800594c <__locale_ctype_ptr>:
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <__locale_ctype_ptr+0x14>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d100      	bne.n	8005958 <__locale_ctype_ptr+0xc>
 8005956:	4b03      	ldr	r3, [pc, #12]	; (8005964 <__locale_ctype_ptr+0x18>)
 8005958:	33ec      	adds	r3, #236	; 0xec
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	4770      	bx	lr
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	20000028 	.word	0x20000028
 8005964:	2000008c 	.word	0x2000008c

08005968 <__ascii_mbtowc>:
 8005968:	b082      	sub	sp, #8
 800596a:	2900      	cmp	r1, #0
 800596c:	d100      	bne.n	8005970 <__ascii_mbtowc+0x8>
 800596e:	a901      	add	r1, sp, #4
 8005970:	1e10      	subs	r0, r2, #0
 8005972:	d006      	beq.n	8005982 <__ascii_mbtowc+0x1a>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <__ascii_mbtowc+0x1e>
 8005978:	7813      	ldrb	r3, [r2, #0]
 800597a:	600b      	str	r3, [r1, #0]
 800597c:	7810      	ldrb	r0, [r2, #0]
 800597e:	1e43      	subs	r3, r0, #1
 8005980:	4198      	sbcs	r0, r3
 8005982:	b002      	add	sp, #8
 8005984:	4770      	bx	lr
 8005986:	2002      	movs	r0, #2
 8005988:	4240      	negs	r0, r0
 800598a:	e7fa      	b.n	8005982 <__ascii_mbtowc+0x1a>

0800598c <__ascii_wctomb>:
 800598c:	1e0b      	subs	r3, r1, #0
 800598e:	d004      	beq.n	800599a <__ascii_wctomb+0xe>
 8005990:	2aff      	cmp	r2, #255	; 0xff
 8005992:	d904      	bls.n	800599e <__ascii_wctomb+0x12>
 8005994:	238a      	movs	r3, #138	; 0x8a
 8005996:	6003      	str	r3, [r0, #0]
 8005998:	3b8b      	subs	r3, #139	; 0x8b
 800599a:	0018      	movs	r0, r3
 800599c:	4770      	bx	lr
 800599e:	700a      	strb	r2, [r1, #0]
 80059a0:	2301      	movs	r3, #1
 80059a2:	e7fa      	b.n	800599a <__ascii_wctomb+0xe>

080059a4 <atan2f>:
 80059a4:	b510      	push	{r4, lr}
 80059a6:	f000 f801 	bl	80059ac <__ieee754_atan2f>
 80059aa:	bd10      	pop	{r4, pc}

080059ac <__ieee754_atan2f>:
 80059ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ae:	25ff      	movs	r5, #255	; 0xff
 80059b0:	004a      	lsls	r2, r1, #1
 80059b2:	9101      	str	r1, [sp, #4]
 80059b4:	0852      	lsrs	r2, r2, #1
 80059b6:	05ed      	lsls	r5, r5, #23
 80059b8:	42aa      	cmp	r2, r5
 80059ba:	dc04      	bgt.n	80059c6 <__ieee754_atan2f+0x1a>
 80059bc:	0043      	lsls	r3, r0, #1
 80059be:	0007      	movs	r7, r0
 80059c0:	085b      	lsrs	r3, r3, #1
 80059c2:	42ab      	cmp	r3, r5
 80059c4:	dd02      	ble.n	80059cc <__ieee754_atan2f+0x20>
 80059c6:	f7fa fd51 	bl	800046c <__aeabi_fadd>
 80059ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059cc:	24fe      	movs	r4, #254	; 0xfe
 80059ce:	05a4      	lsls	r4, r4, #22
 80059d0:	42a1      	cmp	r1, r4
 80059d2:	d102      	bne.n	80059da <__ieee754_atan2f+0x2e>
 80059d4:	f000 f872 	bl	8005abc <atanf>
 80059d8:	e7f7      	b.n	80059ca <__ieee754_atan2f+0x1e>
 80059da:	2602      	movs	r6, #2
 80059dc:	178c      	asrs	r4, r1, #30
 80059de:	4034      	ands	r4, r6
 80059e0:	0fc6      	lsrs	r6, r0, #31
 80059e2:	4334      	orrs	r4, r6
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d105      	bne.n	80059f4 <__ieee754_atan2f+0x48>
 80059e8:	2c02      	cmp	r4, #2
 80059ea:	d050      	beq.n	8005a8e <__ieee754_atan2f+0xe2>
 80059ec:	2c03      	cmp	r4, #3
 80059ee:	d1ec      	bne.n	80059ca <__ieee754_atan2f+0x1e>
 80059f0:	4829      	ldr	r0, [pc, #164]	; (8005a98 <__ieee754_atan2f+0xec>)
 80059f2:	e7ea      	b.n	80059ca <__ieee754_atan2f+0x1e>
 80059f4:	2a00      	cmp	r2, #0
 80059f6:	d103      	bne.n	8005a00 <__ieee754_atan2f+0x54>
 80059f8:	2f00      	cmp	r7, #0
 80059fa:	da4a      	bge.n	8005a92 <__ieee754_atan2f+0xe6>
 80059fc:	4827      	ldr	r0, [pc, #156]	; (8005a9c <__ieee754_atan2f+0xf0>)
 80059fe:	e7e4      	b.n	80059ca <__ieee754_atan2f+0x1e>
 8005a00:	42aa      	cmp	r2, r5
 8005a02:	d117      	bne.n	8005a34 <__ieee754_atan2f+0x88>
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d10b      	bne.n	8005a20 <__ieee754_atan2f+0x74>
 8005a08:	2c02      	cmp	r4, #2
 8005a0a:	d005      	beq.n	8005a18 <__ieee754_atan2f+0x6c>
 8005a0c:	2c03      	cmp	r4, #3
 8005a0e:	d005      	beq.n	8005a1c <__ieee754_atan2f+0x70>
 8005a10:	2c01      	cmp	r4, #1
 8005a12:	d13a      	bne.n	8005a8a <__ieee754_atan2f+0xde>
 8005a14:	4822      	ldr	r0, [pc, #136]	; (8005aa0 <__ieee754_atan2f+0xf4>)
 8005a16:	e7d8      	b.n	80059ca <__ieee754_atan2f+0x1e>
 8005a18:	4822      	ldr	r0, [pc, #136]	; (8005aa4 <__ieee754_atan2f+0xf8>)
 8005a1a:	e7d6      	b.n	80059ca <__ieee754_atan2f+0x1e>
 8005a1c:	4822      	ldr	r0, [pc, #136]	; (8005aa8 <__ieee754_atan2f+0xfc>)
 8005a1e:	e7d4      	b.n	80059ca <__ieee754_atan2f+0x1e>
 8005a20:	2c02      	cmp	r4, #2
 8005a22:	d034      	beq.n	8005a8e <__ieee754_atan2f+0xe2>
 8005a24:	2c03      	cmp	r4, #3
 8005a26:	d0e3      	beq.n	80059f0 <__ieee754_atan2f+0x44>
 8005a28:	2000      	movs	r0, #0
 8005a2a:	2c01      	cmp	r4, #1
 8005a2c:	d1cd      	bne.n	80059ca <__ieee754_atan2f+0x1e>
 8005a2e:	2080      	movs	r0, #128	; 0x80
 8005a30:	0600      	lsls	r0, r0, #24
 8005a32:	e7ca      	b.n	80059ca <__ieee754_atan2f+0x1e>
 8005a34:	42ab      	cmp	r3, r5
 8005a36:	d0df      	beq.n	80059f8 <__ieee754_atan2f+0x4c>
 8005a38:	1a9b      	subs	r3, r3, r2
 8005a3a:	15db      	asrs	r3, r3, #23
 8005a3c:	2b3c      	cmp	r3, #60	; 0x3c
 8005a3e:	dc14      	bgt.n	8005a6a <__ieee754_atan2f+0xbe>
 8005a40:	2900      	cmp	r1, #0
 8005a42:	da01      	bge.n	8005a48 <__ieee754_atan2f+0x9c>
 8005a44:	333c      	adds	r3, #60	; 0x3c
 8005a46:	db12      	blt.n	8005a6e <__ieee754_atan2f+0xc2>
 8005a48:	f7fa feaa 	bl	80007a0 <__aeabi_fdiv>
 8005a4c:	f000 f948 	bl	8005ce0 <fabsf>
 8005a50:	f000 f834 	bl	8005abc <atanf>
 8005a54:	2c01      	cmp	r4, #1
 8005a56:	d00c      	beq.n	8005a72 <__ieee754_atan2f+0xc6>
 8005a58:	2c02      	cmp	r4, #2
 8005a5a:	d00e      	beq.n	8005a7a <__ieee754_atan2f+0xce>
 8005a5c:	2c00      	cmp	r4, #0
 8005a5e:	d0b4      	beq.n	80059ca <__ieee754_atan2f+0x1e>
 8005a60:	4912      	ldr	r1, [pc, #72]	; (8005aac <__ieee754_atan2f+0x100>)
 8005a62:	f7fa fd03 	bl	800046c <__aeabi_fadd>
 8005a66:	4912      	ldr	r1, [pc, #72]	; (8005ab0 <__ieee754_atan2f+0x104>)
 8005a68:	e00c      	b.n	8005a84 <__ieee754_atan2f+0xd8>
 8005a6a:	4812      	ldr	r0, [pc, #72]	; (8005ab4 <__ieee754_atan2f+0x108>)
 8005a6c:	e7f2      	b.n	8005a54 <__ieee754_atan2f+0xa8>
 8005a6e:	2000      	movs	r0, #0
 8005a70:	e7f0      	b.n	8005a54 <__ieee754_atan2f+0xa8>
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	061b      	lsls	r3, r3, #24
 8005a76:	18c0      	adds	r0, r0, r3
 8005a78:	e7a7      	b.n	80059ca <__ieee754_atan2f+0x1e>
 8005a7a:	490c      	ldr	r1, [pc, #48]	; (8005aac <__ieee754_atan2f+0x100>)
 8005a7c:	f7fa fcf6 	bl	800046c <__aeabi_fadd>
 8005a80:	1c01      	adds	r1, r0, #0
 8005a82:	480b      	ldr	r0, [pc, #44]	; (8005ab0 <__ieee754_atan2f+0x104>)
 8005a84:	f7fb f996 	bl	8000db4 <__aeabi_fsub>
 8005a88:	e79f      	b.n	80059ca <__ieee754_atan2f+0x1e>
 8005a8a:	480b      	ldr	r0, [pc, #44]	; (8005ab8 <__ieee754_atan2f+0x10c>)
 8005a8c:	e79d      	b.n	80059ca <__ieee754_atan2f+0x1e>
 8005a8e:	4808      	ldr	r0, [pc, #32]	; (8005ab0 <__ieee754_atan2f+0x104>)
 8005a90:	e79b      	b.n	80059ca <__ieee754_atan2f+0x1e>
 8005a92:	4808      	ldr	r0, [pc, #32]	; (8005ab4 <__ieee754_atan2f+0x108>)
 8005a94:	e799      	b.n	80059ca <__ieee754_atan2f+0x1e>
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	c0490fdb 	.word	0xc0490fdb
 8005a9c:	bfc90fdb 	.word	0xbfc90fdb
 8005aa0:	bf490fdb 	.word	0xbf490fdb
 8005aa4:	4016cbe4 	.word	0x4016cbe4
 8005aa8:	c016cbe4 	.word	0xc016cbe4
 8005aac:	33bbbd2e 	.word	0x33bbbd2e
 8005ab0:	40490fdb 	.word	0x40490fdb
 8005ab4:	3fc90fdb 	.word	0x3fc90fdb
 8005ab8:	3f490fdb 	.word	0x3f490fdb

08005abc <atanf>:
 8005abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005abe:	4b71      	ldr	r3, [pc, #452]	; (8005c84 <atanf+0x1c8>)
 8005ac0:	0045      	lsls	r5, r0, #1
 8005ac2:	1c04      	adds	r4, r0, #0
 8005ac4:	9001      	str	r0, [sp, #4]
 8005ac6:	086d      	lsrs	r5, r5, #1
 8005ac8:	429d      	cmp	r5, r3
 8005aca:	dd0f      	ble.n	8005aec <atanf+0x30>
 8005acc:	23ff      	movs	r3, #255	; 0xff
 8005ace:	05db      	lsls	r3, r3, #23
 8005ad0:	429d      	cmp	r5, r3
 8005ad2:	dd04      	ble.n	8005ade <atanf+0x22>
 8005ad4:	1c01      	adds	r1, r0, #0
 8005ad6:	f7fa fcc9 	bl	800046c <__aeabi_fadd>
 8005ada:	1c04      	adds	r4, r0, #0
 8005adc:	e004      	b.n	8005ae8 <atanf+0x2c>
 8005ade:	9b01      	ldr	r3, [sp, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dc00      	bgt.n	8005ae6 <atanf+0x2a>
 8005ae4:	e0cb      	b.n	8005c7e <atanf+0x1c2>
 8005ae6:	4c68      	ldr	r4, [pc, #416]	; (8005c88 <atanf+0x1cc>)
 8005ae8:	1c20      	adds	r0, r4, #0
 8005aea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aec:	4b67      	ldr	r3, [pc, #412]	; (8005c8c <atanf+0x1d0>)
 8005aee:	429d      	cmp	r5, r3
 8005af0:	dc0e      	bgt.n	8005b10 <atanf+0x54>
 8005af2:	4b67      	ldr	r3, [pc, #412]	; (8005c90 <atanf+0x1d4>)
 8005af4:	429d      	cmp	r5, r3
 8005af6:	dc08      	bgt.n	8005b0a <atanf+0x4e>
 8005af8:	4966      	ldr	r1, [pc, #408]	; (8005c94 <atanf+0x1d8>)
 8005afa:	f7fa fcb7 	bl	800046c <__aeabi_fadd>
 8005afe:	21fe      	movs	r1, #254	; 0xfe
 8005b00:	0589      	lsls	r1, r1, #22
 8005b02:	f7fa fbbd 	bl	8000280 <__aeabi_fcmpgt>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d1ee      	bne.n	8005ae8 <atanf+0x2c>
 8005b0a:	2501      	movs	r5, #1
 8005b0c:	426d      	negs	r5, r5
 8005b0e:	e01b      	b.n	8005b48 <atanf+0x8c>
 8005b10:	f000 f8e6 	bl	8005ce0 <fabsf>
 8005b14:	4b60      	ldr	r3, [pc, #384]	; (8005c98 <atanf+0x1dc>)
 8005b16:	1c04      	adds	r4, r0, #0
 8005b18:	429d      	cmp	r5, r3
 8005b1a:	dc7b      	bgt.n	8005c14 <atanf+0x158>
 8005b1c:	4b5f      	ldr	r3, [pc, #380]	; (8005c9c <atanf+0x1e0>)
 8005b1e:	429d      	cmp	r5, r3
 8005b20:	dc67      	bgt.n	8005bf2 <atanf+0x136>
 8005b22:	1c01      	adds	r1, r0, #0
 8005b24:	f7fa fca2 	bl	800046c <__aeabi_fadd>
 8005b28:	21fe      	movs	r1, #254	; 0xfe
 8005b2a:	0589      	lsls	r1, r1, #22
 8005b2c:	f7fb f942 	bl	8000db4 <__aeabi_fsub>
 8005b30:	2180      	movs	r1, #128	; 0x80
 8005b32:	1c05      	adds	r5, r0, #0
 8005b34:	05c9      	lsls	r1, r1, #23
 8005b36:	1c20      	adds	r0, r4, #0
 8005b38:	f7fa fc98 	bl	800046c <__aeabi_fadd>
 8005b3c:	1c01      	adds	r1, r0, #0
 8005b3e:	1c28      	adds	r0, r5, #0
 8005b40:	f7fa fe2e 	bl	80007a0 <__aeabi_fdiv>
 8005b44:	2500      	movs	r5, #0
 8005b46:	1c04      	adds	r4, r0, #0
 8005b48:	1c21      	adds	r1, r4, #0
 8005b4a:	1c20      	adds	r0, r4, #0
 8005b4c:	f7fb f800 	bl	8000b50 <__aeabi_fmul>
 8005b50:	1c01      	adds	r1, r0, #0
 8005b52:	1c07      	adds	r7, r0, #0
 8005b54:	f7fa fffc 	bl	8000b50 <__aeabi_fmul>
 8005b58:	4951      	ldr	r1, [pc, #324]	; (8005ca0 <atanf+0x1e4>)
 8005b5a:	1c06      	adds	r6, r0, #0
 8005b5c:	f7fa fff8 	bl	8000b50 <__aeabi_fmul>
 8005b60:	4950      	ldr	r1, [pc, #320]	; (8005ca4 <atanf+0x1e8>)
 8005b62:	f7fa fc83 	bl	800046c <__aeabi_fadd>
 8005b66:	1c31      	adds	r1, r6, #0
 8005b68:	f7fa fff2 	bl	8000b50 <__aeabi_fmul>
 8005b6c:	494e      	ldr	r1, [pc, #312]	; (8005ca8 <atanf+0x1ec>)
 8005b6e:	f7fa fc7d 	bl	800046c <__aeabi_fadd>
 8005b72:	1c31      	adds	r1, r6, #0
 8005b74:	f7fa ffec 	bl	8000b50 <__aeabi_fmul>
 8005b78:	494c      	ldr	r1, [pc, #304]	; (8005cac <atanf+0x1f0>)
 8005b7a:	f7fa fc77 	bl	800046c <__aeabi_fadd>
 8005b7e:	1c31      	adds	r1, r6, #0
 8005b80:	f7fa ffe6 	bl	8000b50 <__aeabi_fmul>
 8005b84:	494a      	ldr	r1, [pc, #296]	; (8005cb0 <atanf+0x1f4>)
 8005b86:	f7fa fc71 	bl	800046c <__aeabi_fadd>
 8005b8a:	1c31      	adds	r1, r6, #0
 8005b8c:	f7fa ffe0 	bl	8000b50 <__aeabi_fmul>
 8005b90:	4948      	ldr	r1, [pc, #288]	; (8005cb4 <atanf+0x1f8>)
 8005b92:	f7fa fc6b 	bl	800046c <__aeabi_fadd>
 8005b96:	1c39      	adds	r1, r7, #0
 8005b98:	f7fa ffda 	bl	8000b50 <__aeabi_fmul>
 8005b9c:	4946      	ldr	r1, [pc, #280]	; (8005cb8 <atanf+0x1fc>)
 8005b9e:	1c07      	adds	r7, r0, #0
 8005ba0:	1c30      	adds	r0, r6, #0
 8005ba2:	f7fa ffd5 	bl	8000b50 <__aeabi_fmul>
 8005ba6:	4945      	ldr	r1, [pc, #276]	; (8005cbc <atanf+0x200>)
 8005ba8:	f7fb f904 	bl	8000db4 <__aeabi_fsub>
 8005bac:	1c31      	adds	r1, r6, #0
 8005bae:	f7fa ffcf 	bl	8000b50 <__aeabi_fmul>
 8005bb2:	4943      	ldr	r1, [pc, #268]	; (8005cc0 <atanf+0x204>)
 8005bb4:	f7fb f8fe 	bl	8000db4 <__aeabi_fsub>
 8005bb8:	1c31      	adds	r1, r6, #0
 8005bba:	f7fa ffc9 	bl	8000b50 <__aeabi_fmul>
 8005bbe:	4941      	ldr	r1, [pc, #260]	; (8005cc4 <atanf+0x208>)
 8005bc0:	f7fb f8f8 	bl	8000db4 <__aeabi_fsub>
 8005bc4:	1c31      	adds	r1, r6, #0
 8005bc6:	f7fa ffc3 	bl	8000b50 <__aeabi_fmul>
 8005bca:	493f      	ldr	r1, [pc, #252]	; (8005cc8 <atanf+0x20c>)
 8005bcc:	f7fb f8f2 	bl	8000db4 <__aeabi_fsub>
 8005bd0:	1c31      	adds	r1, r6, #0
 8005bd2:	f7fa ffbd 	bl	8000b50 <__aeabi_fmul>
 8005bd6:	1c01      	adds	r1, r0, #0
 8005bd8:	1c38      	adds	r0, r7, #0
 8005bda:	f7fa fc47 	bl	800046c <__aeabi_fadd>
 8005bde:	1c21      	adds	r1, r4, #0
 8005be0:	f7fa ffb6 	bl	8000b50 <__aeabi_fmul>
 8005be4:	1c6b      	adds	r3, r5, #1
 8005be6:	d134      	bne.n	8005c52 <atanf+0x196>
 8005be8:	1c01      	adds	r1, r0, #0
 8005bea:	1c20      	adds	r0, r4, #0
 8005bec:	f7fb f8e2 	bl	8000db4 <__aeabi_fsub>
 8005bf0:	e773      	b.n	8005ada <atanf+0x1e>
 8005bf2:	21fe      	movs	r1, #254	; 0xfe
 8005bf4:	0589      	lsls	r1, r1, #22
 8005bf6:	f7fb f8dd 	bl	8000db4 <__aeabi_fsub>
 8005bfa:	21fe      	movs	r1, #254	; 0xfe
 8005bfc:	1c05      	adds	r5, r0, #0
 8005bfe:	0589      	lsls	r1, r1, #22
 8005c00:	1c20      	adds	r0, r4, #0
 8005c02:	f7fa fc33 	bl	800046c <__aeabi_fadd>
 8005c06:	1c01      	adds	r1, r0, #0
 8005c08:	1c28      	adds	r0, r5, #0
 8005c0a:	f7fa fdc9 	bl	80007a0 <__aeabi_fdiv>
 8005c0e:	2501      	movs	r5, #1
 8005c10:	1c04      	adds	r4, r0, #0
 8005c12:	e799      	b.n	8005b48 <atanf+0x8c>
 8005c14:	4b2d      	ldr	r3, [pc, #180]	; (8005ccc <atanf+0x210>)
 8005c16:	429d      	cmp	r5, r3
 8005c18:	dc14      	bgt.n	8005c44 <atanf+0x188>
 8005c1a:	21ff      	movs	r1, #255	; 0xff
 8005c1c:	0589      	lsls	r1, r1, #22
 8005c1e:	f7fb f8c9 	bl	8000db4 <__aeabi_fsub>
 8005c22:	21ff      	movs	r1, #255	; 0xff
 8005c24:	1c05      	adds	r5, r0, #0
 8005c26:	0589      	lsls	r1, r1, #22
 8005c28:	1c20      	adds	r0, r4, #0
 8005c2a:	f7fa ff91 	bl	8000b50 <__aeabi_fmul>
 8005c2e:	21fe      	movs	r1, #254	; 0xfe
 8005c30:	0589      	lsls	r1, r1, #22
 8005c32:	f7fa fc1b 	bl	800046c <__aeabi_fadd>
 8005c36:	1c01      	adds	r1, r0, #0
 8005c38:	1c28      	adds	r0, r5, #0
 8005c3a:	f7fa fdb1 	bl	80007a0 <__aeabi_fdiv>
 8005c3e:	2502      	movs	r5, #2
 8005c40:	1c04      	adds	r4, r0, #0
 8005c42:	e781      	b.n	8005b48 <atanf+0x8c>
 8005c44:	1c01      	adds	r1, r0, #0
 8005c46:	4822      	ldr	r0, [pc, #136]	; (8005cd0 <atanf+0x214>)
 8005c48:	f7fa fdaa 	bl	80007a0 <__aeabi_fdiv>
 8005c4c:	2503      	movs	r5, #3
 8005c4e:	1c04      	adds	r4, r0, #0
 8005c50:	e77a      	b.n	8005b48 <atanf+0x8c>
 8005c52:	4b20      	ldr	r3, [pc, #128]	; (8005cd4 <atanf+0x218>)
 8005c54:	00ad      	lsls	r5, r5, #2
 8005c56:	58e9      	ldr	r1, [r5, r3]
 8005c58:	f7fb f8ac 	bl	8000db4 <__aeabi_fsub>
 8005c5c:	1c21      	adds	r1, r4, #0
 8005c5e:	f7fb f8a9 	bl	8000db4 <__aeabi_fsub>
 8005c62:	4b1d      	ldr	r3, [pc, #116]	; (8005cd8 <atanf+0x21c>)
 8005c64:	1c01      	adds	r1, r0, #0
 8005c66:	58e8      	ldr	r0, [r5, r3]
 8005c68:	f7fb f8a4 	bl	8000db4 <__aeabi_fsub>
 8005c6c:	9b01      	ldr	r3, [sp, #4]
 8005c6e:	1c04      	adds	r4, r0, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	db00      	blt.n	8005c76 <atanf+0x1ba>
 8005c74:	e738      	b.n	8005ae8 <atanf+0x2c>
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	061b      	lsls	r3, r3, #24
 8005c7a:	18c4      	adds	r4, r0, r3
 8005c7c:	e734      	b.n	8005ae8 <atanf+0x2c>
 8005c7e:	4c17      	ldr	r4, [pc, #92]	; (8005cdc <atanf+0x220>)
 8005c80:	e732      	b.n	8005ae8 <atanf+0x2c>
 8005c82:	46c0      	nop			; (mov r8, r8)
 8005c84:	507fffff 	.word	0x507fffff
 8005c88:	3fc90fdb 	.word	0x3fc90fdb
 8005c8c:	3edfffff 	.word	0x3edfffff
 8005c90:	30ffffff 	.word	0x30ffffff
 8005c94:	7149f2ca 	.word	0x7149f2ca
 8005c98:	3f97ffff 	.word	0x3f97ffff
 8005c9c:	3f2fffff 	.word	0x3f2fffff
 8005ca0:	3c8569d7 	.word	0x3c8569d7
 8005ca4:	3d4bda59 	.word	0x3d4bda59
 8005ca8:	3d886b35 	.word	0x3d886b35
 8005cac:	3dba2e6e 	.word	0x3dba2e6e
 8005cb0:	3e124925 	.word	0x3e124925
 8005cb4:	3eaaaaab 	.word	0x3eaaaaab
 8005cb8:	bd15a221 	.word	0xbd15a221
 8005cbc:	3d6ef16b 	.word	0x3d6ef16b
 8005cc0:	3d9d8795 	.word	0x3d9d8795
 8005cc4:	3de38e38 	.word	0x3de38e38
 8005cc8:	3e4ccccd 	.word	0x3e4ccccd
 8005ccc:	401bffff 	.word	0x401bffff
 8005cd0:	bf800000 	.word	0xbf800000
 8005cd4:	080063bc 	.word	0x080063bc
 8005cd8:	080063ac 	.word	0x080063ac
 8005cdc:	bfc90fdb 	.word	0xbfc90fdb

08005ce0 <fabsf>:
 8005ce0:	0040      	lsls	r0, r0, #1
 8005ce2:	0840      	lsrs	r0, r0, #1
 8005ce4:	4770      	bx	lr
	...

08005ce8 <_init>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr

08005cf4 <_fini>:
 8005cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfa:	bc08      	pop	{r3}
 8005cfc:	469e      	mov	lr, r3
 8005cfe:	4770      	bx	lr
