
Spine R4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd0  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08003eb0  08003eb0  00013eb0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042a4  080042a4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042ac  080042ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042ac  080042ac  000142ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042b0  080042b0  000142b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080042b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044c0  200001e0  08004494  000201e0  2**2
                  ALLOC
 10 .SEC_SRAM1    00008000  20010000  20010000  00030000  2**12
                  ALLOC
 11 ._user_heap_stack 00000600  200046a0  200046a0  000246a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019501  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000030f7  00000000  00000000  00039711  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000bb27  00000000  00000000  0003c808  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000e88  00000000  00000000  00048330  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001460  00000000  00000000  000491b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000098b9  00000000  00000000  0004a618  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00005bf2  00000000  00000000  00053ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00059ac3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e4c  00000000  00000000  00059b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003e98 	.word	0x08003e98

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	08003e98 	.word	0x08003e98

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_InitTick+0x3c>)
{
 8000524:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <HAL_InitTick+0x40>)
 8000528:	7818      	ldrb	r0, [r3, #0]
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000532:	6810      	ldr	r0, [r2, #0]
 8000534:	fbb0 f0f3 	udiv	r0, r0, r3
 8000538:	f000 f9c8 	bl	80008cc <HAL_SYSTICK_Config>
 800053c:	4604      	mov	r4, r0
 800053e:	b958      	cbnz	r0, 8000558 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000540:	2d0f      	cmp	r5, #15
 8000542:	d809      	bhi.n	8000558 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000544:	4602      	mov	r2, r0
 8000546:	4629      	mov	r1, r5
 8000548:	f04f 30ff 	mov.w	r0, #4294967295
 800054c:	f000 f97e 	bl	800084c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <HAL_InitTick+0x44>)
 8000552:	4620      	mov	r0, r4
 8000554:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000556:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000558:	2001      	movs	r0, #1
 800055a:	e7fc      	b.n	8000556 <HAL_InitTick+0x36>
 800055c:	20000000 	.word	0x20000000
 8000560:	2000000c 	.word	0x2000000c
 8000564:	20000004 	.word	0x20000004

08000568 <HAL_Init>:
{
 8000568:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800056a:	2003      	movs	r0, #3
 800056c:	f000 f95c 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff ffd5 	bl	8000520 <HAL_InitTick>
  HAL_MspInit();
 8000576:	f002 fc41 	bl	8002dfc <HAL_MspInit>
}
 800057a:	2000      	movs	r0, #0
 800057c:	bd08      	pop	{r3, pc}
	...

08000580 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000580:	4a03      	ldr	r2, [pc, #12]	; (8000590 <HAL_IncTick+0x10>)
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_IncTick+0x14>)
 8000584:	6811      	ldr	r1, [r2, #0]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	440b      	add	r3, r1
 800058a:	6013      	str	r3, [r2, #0]
}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000248 	.word	0x20000248
 8000594:	20000000 	.word	0x20000000

08000598 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <HAL_GetTick+0x8>)
 800059a:	6818      	ldr	r0, [r3, #0]
}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000248 	.word	0x20000248

080005a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005a4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005a6:	4604      	mov	r4, r0
 80005a8:	2800      	cmp	r0, #0
 80005aa:	f000 809b 	beq.w	80006e4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005ae:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80005b0:	b925      	cbnz	r5, 80005bc <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005b2:	f002 fc3b 	bl	8002e2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005b6:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005b8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005be:	06db      	lsls	r3, r3, #27
 80005c0:	f100 808e 	bmi.w	80006e0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005ca:	f023 0302 	bic.w	r3, r3, #2
 80005ce:	f043 0302 	orr.w	r3, r3, #2
 80005d2:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80005d4:	4b44      	ldr	r3, [pc, #272]	; (80006e8 <HAL_ADC_Init+0x144>)
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005dc:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	6861      	ldr	r1, [r4, #4]
 80005e2:	430a      	orrs	r2, r1
 80005e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005e6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005e8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005f2:	685a      	ldr	r2, [r3, #4]
 80005f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005f8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005fa:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000602:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000604:	685a      	ldr	r2, [r3, #4]
 8000606:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000608:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800060a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800060c:	689a      	ldr	r2, [r3, #8]
 800060e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000614:	689a      	ldr	r2, [r3, #8]
 8000616:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000618:	4934      	ldr	r1, [pc, #208]	; (80006ec <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800061a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800061c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800061e:	428a      	cmp	r2, r1
 8000620:	d052      	beq.n	80006c8 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000622:	6899      	ldr	r1, [r3, #8]
 8000624:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000628:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800062a:	6899      	ldr	r1, [r3, #8]
 800062c:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800062e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000630:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000632:	689a      	ldr	r2, [r3, #8]
 8000634:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000638:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800063a:	689a      	ldr	r2, [r3, #8]
 800063c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800063e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000640:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000642:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000644:	f022 0202 	bic.w	r2, r2, #2
 8000648:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000650:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000652:	f894 2020 	ldrb.w	r2, [r4, #32]
 8000656:	2a00      	cmp	r2, #0
 8000658:	d03e      	beq.n	80006d8 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800065a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800065c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800065e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000662:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000664:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000666:	685a      	ldr	r2, [r3, #4]
 8000668:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800066c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000674:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8000676:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800067a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800067c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000680:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000686:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800068a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800069e:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80006a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006a2:	689a      	ldr	r2, [r3, #8]
 80006a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006aa:	689a      	ldr	r2, [r3, #8]
 80006ac:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006b0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006b2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006b6:	f023 0303 	bic.w	r3, r3, #3
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006c0:	2300      	movs	r3, #0
 80006c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80006c6:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006d6:	e7b2      	b.n	800063e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006d8:	685a      	ldr	r2, [r3, #4]
 80006da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006de:	e7c9      	b.n	8000674 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006e0:	2001      	movs	r0, #1
 80006e2:	e7ed      	b.n	80006c0 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006e4:	2001      	movs	r0, #1
 80006e6:	e7ee      	b.n	80006c6 <HAL_ADC_Init+0x122>
 80006e8:	40012300 	.word	0x40012300
 80006ec:	0f000001 	.word	0x0f000001

080006f0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 80006f0:	2300      	movs	r3, #0
{
 80006f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80006f4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d06d      	beq.n	80007da <HAL_ADC_ConfigChannel+0xea>
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006fe:	680c      	ldr	r4, [r1, #0]
  __HAL_LOCK(hadc);
 8000700:	2301      	movs	r3, #1
 8000702:	688e      	ldr	r6, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000704:	2c09      	cmp	r4, #9
  __HAL_LOCK(hadc);
 8000706:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800070a:	b2a5      	uxth	r5, r4
 800070c:	6803      	ldr	r3, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 800070e:	d930      	bls.n	8000772 <HAL_ADC_ConfigChannel+0x82>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000710:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8000714:	f04f 0c07 	mov.w	ip, #7
 8000718:	68df      	ldr	r7, [r3, #12]
 800071a:	3a1e      	subs	r2, #30
 800071c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000720:	ea27 070c 	bic.w	r7, r7, ip
 8000724:	60df      	str	r7, [r3, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000726:	4f3b      	ldr	r7, [pc, #236]	; (8000814 <HAL_ADC_ConfigChannel+0x124>)
 8000728:	42bc      	cmp	r4, r7
 800072a:	d11d      	bne.n	8000768 <HAL_ADC_ConfigChannel+0x78>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800072c:	68da      	ldr	r2, [r3, #12]
 800072e:	ea42 6206 	orr.w	r2, r2, r6, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000732:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7)
 8000734:	6849      	ldr	r1, [r1, #4]
 8000736:	2906      	cmp	r1, #6
 8000738:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800073c:	d829      	bhi.n	8000792 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800073e:	3a05      	subs	r2, #5
 8000740:	261f      	movs	r6, #31
 8000742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000744:	4096      	lsls	r6, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000746:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800074a:	ea21 0106 	bic.w	r1, r1, r6
 800074e:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000750:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000752:	430a      	orrs	r2, r1
 8000754:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000756:	4a30      	ldr	r2, [pc, #192]	; (8000818 <HAL_ADC_ConfigChannel+0x128>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d036      	beq.n	80007ca <HAL_ADC_ConfigChannel+0xda>
  __HAL_UNLOCK(hadc);
 800075c:	2300      	movs	r3, #0
 800075e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000762:	4618      	mov	r0, r3
}
 8000764:	b003      	add	sp, #12
 8000766:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000768:	68df      	ldr	r7, [r3, #12]
 800076a:	fa06 f202 	lsl.w	r2, r6, r2
 800076e:	433a      	orrs	r2, r7
 8000770:	e7df      	b.n	8000732 <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000772:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000776:	f04f 0c07 	mov.w	ip, #7
 800077a:	691f      	ldr	r7, [r3, #16]
 800077c:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000780:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000784:	ea27 070c 	bic.w	r7, r7, ip
 8000788:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800078a:	691f      	ldr	r7, [r3, #16]
 800078c:	433a      	orrs	r2, r7
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	e7d0      	b.n	8000734 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 8000792:	290c      	cmp	r1, #12
 8000794:	f04f 011f 	mov.w	r1, #31
 8000798:	d80b      	bhi.n	80007b2 <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800079a:	3a23      	subs	r2, #35	; 0x23
 800079c:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800079e:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007a0:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007a4:	ea26 0101 	bic.w	r1, r6, r1
 80007a8:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007ac:	430a      	orrs	r2, r1
 80007ae:	631a      	str	r2, [r3, #48]	; 0x30
 80007b0:	e7d1      	b.n	8000756 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007b2:	3a41      	subs	r2, #65	; 0x41
 80007b4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80007b6:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007b8:	fa05 f202 	lsl.w	r2, r5, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007bc:	ea26 0101 	bic.w	r1, r6, r1
 80007c0:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007c4:	430a      	orrs	r2, r1
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80007c8:	e7c5      	b.n	8000756 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007ca:	2c12      	cmp	r4, #18
 80007cc:	d107      	bne.n	80007de <HAL_ADC_ConfigChannel+0xee>
    ADC->CCR |= ADC_CCR_VBATE;
 80007ce:	4a13      	ldr	r2, [pc, #76]	; (800081c <HAL_ADC_ConfigChannel+0x12c>)
 80007d0:	6853      	ldr	r3, [r2, #4]
 80007d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007d6:	6053      	str	r3, [r2, #4]
 80007d8:	e7c0      	b.n	800075c <HAL_ADC_ConfigChannel+0x6c>
  __HAL_LOCK(hadc);
 80007da:	2002      	movs	r0, #2
 80007dc:	e7c2      	b.n	8000764 <HAL_ADC_ConfigChannel+0x74>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_ADC_ConfigChannel+0x124>)
 80007e0:	429c      	cmp	r4, r3
 80007e2:	d001      	beq.n	80007e8 <HAL_ADC_ConfigChannel+0xf8>
 80007e4:	2c11      	cmp	r4, #17
 80007e6:	d1b9      	bne.n	800075c <HAL_ADC_ConfigChannel+0x6c>
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007e8:	490c      	ldr	r1, [pc, #48]	; (800081c <HAL_ADC_ConfigChannel+0x12c>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007ea:	429c      	cmp	r4, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007ec:	684a      	ldr	r2, [r1, #4]
 80007ee:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007f2:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007f4:	d1b2      	bne.n	800075c <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_ADC_ConfigChannel+0x130>)
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <HAL_ADC_ConfigChannel+0x134>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000800:	230a      	movs	r3, #10
 8000802:	4353      	muls	r3, r2
        counter--;
 8000804:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8000806:	9b01      	ldr	r3, [sp, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d0a7      	beq.n	800075c <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 800080c:	9b01      	ldr	r3, [sp, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	e7f8      	b.n	8000804 <HAL_ADC_ConfigChannel+0x114>
 8000812:	bf00      	nop
 8000814:	10000012 	.word	0x10000012
 8000818:	40012000 	.word	0x40012000
 800081c:	40012300 	.word	0x40012300
 8000820:	2000000c 	.word	0x2000000c
 8000824:	000f4240 	.word	0x000f4240

08000828 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800082a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800082e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000836:	041b      	lsls	r3, r3, #16
 8000838:	0c1b      	lsrs	r3, r3, #16
 800083a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800083e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000842:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000844:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084e:	b570      	push	{r4, r5, r6, lr}
 8000850:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000852:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000856:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800085a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800085e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	2d04      	cmp	r5, #4
 8000862:	bf28      	it	cs
 8000864:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086c:	bf8c      	ite	hi
 800086e:	3c03      	subhi	r4, #3
 8000870:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 8000872:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	ea21 0303 	bic.w	r3, r1, r3
 8000878:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800087c:	fa06 f404 	lsl.w	r4, r6, r4
 8000880:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	ea43 0304 	orr.w	r3, r3, r4
 8000888:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800088c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800088e:	db06      	blt.n	800089e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000894:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000898:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800089c:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089e:	f000 000f 	and.w	r0, r0, #15
 80008a2:	4a02      	ldr	r2, [pc, #8]	; (80008ac <HAL_NVIC_SetPriority+0x60>)
 80008a4:	5413      	strb	r3, [r2, r0]
 80008a6:	e7f9      	b.n	800089c <HAL_NVIC_SetPriority+0x50>
 80008a8:	e000ed00 	.word	0xe000ed00
 80008ac:	e000ed14 	.word	0xe000ed14

080008b0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80008b0:	2800      	cmp	r0, #0
 80008b2:	db08      	blt.n	80008c6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b4:	0942      	lsrs	r2, r0, #5
 80008b6:	2301      	movs	r3, #1
 80008b8:	f000 001f 	and.w	r0, r0, #31
 80008bc:	fa03 f000 	lsl.w	r0, r3, r0
 80008c0:	4b01      	ldr	r3, [pc, #4]	; (80008c8 <HAL_NVIC_EnableIRQ+0x18>)
 80008c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008c6:	4770      	bx	lr
 80008c8:	e000e100 	.word	0xe000e100

080008cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	3801      	subs	r0, #1
 80008ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008d2:	d20a      	bcs.n	80008ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d6:	21f0      	movs	r1, #240	; 0xf0
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008da:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008de:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e010 	.word	0xe000e010
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80008f8:	6803      	ldr	r3, [r0, #0]
 80008fa:	2118      	movs	r1, #24
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000902:	3a10      	subs	r2, #16
 8000904:	f023 0303 	bic.w	r3, r3, #3
 8000908:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800090c:	4904      	ldr	r1, [pc, #16]	; (8000920 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800090e:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000910:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000912:	bf88      	it	hi
 8000914:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000916:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000918:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 800091a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	08003eb0 	.word	0x08003eb0

08000924 <HAL_DMA_Init>:
{
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000928:	f7ff fe36 	bl	8000598 <HAL_GetTick>
 800092c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800092e:	2c00      	cmp	r4, #0
 8000930:	d071      	beq.n	8000a16 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8000932:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8000934:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8000936:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 800093a:	2302      	movs	r3, #2
 800093c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000940:	6813      	ldr	r3, [r2, #0]
 8000942:	f023 0301 	bic.w	r3, r3, #1
 8000946:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000948:	6821      	ldr	r1, [r4, #0]
 800094a:	680b      	ldr	r3, [r1, #0]
 800094c:	07d8      	lsls	r0, r3, #31
 800094e:	d43c      	bmi.n	80009ca <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000950:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000952:	4d32      	ldr	r5, [pc, #200]	; (8000a1c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000954:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000956:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000958:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800095c:	4313      	orrs	r3, r2
 800095e:	68e2      	ldr	r2, [r4, #12]
 8000960:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000962:	6922      	ldr	r2, [r4, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	6962      	ldr	r2, [r4, #20]
 8000968:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800096a:	69e2      	ldr	r2, [r4, #28]
 800096c:	4303      	orrs	r3, r0
 800096e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000970:	6a22      	ldr	r2, [r4, #32]
 8000972:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000974:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000976:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000978:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800097c:	bf02      	ittt	eq
 800097e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8000982:	4335      	orreq	r5, r6
 8000984:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000986:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8000988:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800098a:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800098c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000990:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000994:	d10b      	bne.n	80009ae <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000996:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000998:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800099a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800099c:	b13d      	cbz	r5, 80009ae <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800099e:	b9f8      	cbnz	r0, 80009e0 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80009a0:	2a01      	cmp	r2, #1
 80009a2:	d02d      	beq.n	8000a00 <HAL_DMA_Init+0xdc>
 80009a4:	d301      	bcc.n	80009aa <HAL_DMA_Init+0x86>
 80009a6:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80009a8:	d101      	bne.n	80009ae <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80009aa:	01ea      	lsls	r2, r5, #7
 80009ac:	d42b      	bmi.n	8000a06 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80009ae:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80009b0:	4620      	mov	r0, r4
 80009b2:	f7ff ffa1 	bl	80008f8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80009b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80009b8:	233f      	movs	r3, #63	; 0x3f
 80009ba:	4093      	lsls	r3, r2
 80009bc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009be:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80009c0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009c2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80009c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80009c8:	e009      	b.n	80009de <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80009ca:	f7ff fde5 	bl	8000598 <HAL_GetTick>
 80009ce:	1b40      	subs	r0, r0, r5
 80009d0:	2805      	cmp	r0, #5
 80009d2:	d9b9      	bls.n	8000948 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009d4:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80009d6:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80009d8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80009da:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80009de:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80009e0:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80009e4:	d113      	bne.n	8000a0e <HAL_DMA_Init+0xea>
    switch (tmp)
 80009e6:	2a03      	cmp	r2, #3
 80009e8:	d8e1      	bhi.n	80009ae <HAL_DMA_Init+0x8a>
 80009ea:	a001      	add	r0, pc, #4	; (adr r0, 80009f0 <HAL_DMA_Init+0xcc>)
 80009ec:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80009f0:	08000a07 	.word	0x08000a07
 80009f4:	080009ab 	.word	0x080009ab
 80009f8:	08000a07 	.word	0x08000a07
 80009fc:	08000a01 	.word	0x08000a01
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000a00:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8000a04:	d1d3      	bne.n	80009ae <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a06:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8000a08:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000a0a:	6563      	str	r3, [r4, #84]	; 0x54
 8000a0c:	e7e5      	b.n	80009da <HAL_DMA_Init+0xb6>
    switch (tmp)
 8000a0e:	2a02      	cmp	r2, #2
 8000a10:	d9f9      	bls.n	8000a06 <HAL_DMA_Init+0xe2>
 8000a12:	2a03      	cmp	r2, #3
 8000a14:	e7c8      	b.n	80009a8 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8000a16:	2001      	movs	r0, #1
 8000a18:	e7e1      	b.n	80009de <HAL_DMA_Init+0xba>
 8000a1a:	bf00      	nop
 8000a1c:	e010803f 	.word	0xe010803f

08000a20 <HAL_DMA_Start>:
{
 8000a20:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 8000a22:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a26:	2c01      	cmp	r4, #1
 8000a28:	d022      	beq.n	8000a70 <HAL_DMA_Start+0x50>
 8000a2a:	2401      	movs	r4, #1
 8000a2c:	2500      	movs	r5, #0
 8000a2e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a32:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000a36:	2c01      	cmp	r4, #1
 8000a38:	f04f 0402 	mov.w	r4, #2
 8000a3c:	d116      	bne.n	8000a6c <HAL_DMA_Start+0x4c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a3e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a42:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a44:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a46:	6825      	ldr	r5, [r4, #0]
 8000a48:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a4c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8000a4e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a50:	6883      	ldr	r3, [r0, #8]
 8000a52:	2b40      	cmp	r3, #64	; 0x40
 8000a54:	d107      	bne.n	8000a66 <HAL_DMA_Start+0x46>
    hdma->Instance->PAR = DstAddress;
 8000a56:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000a58:	60e1      	str	r1, [r4, #12]
    __HAL_DMA_ENABLE(hdma);
 8000a5a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a5c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6023      	str	r3, [r4, #0]
}
 8000a64:	bd30      	pop	{r4, r5, pc}
    hdma->Instance->PAR = SrcAddress;
 8000a66:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000a68:	60e2      	str	r2, [r4, #12]
 8000a6a:	e7f6      	b.n	8000a5a <HAL_DMA_Start+0x3a>
    __HAL_UNLOCK(hdma);
 8000a6c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000a70:	2002      	movs	r0, #2
 8000a72:	e7f7      	b.n	8000a64 <HAL_DMA_Start+0x44>

08000a74 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8000a74:	2300      	movs	r3, #0
{
 8000a76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8000a78:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a7a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8000a7c:	4b5b      	ldr	r3, [pc, #364]	; (8000bec <HAL_DMA_IRQHandler+0x178>)
{
 8000a7e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a80:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8000a82:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a84:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000a86:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000a88:	409a      	lsls	r2, r3
 8000a8a:	4232      	tst	r2, r6
 8000a8c:	d00c      	beq.n	8000aa8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000a8e:	6801      	ldr	r1, [r0, #0]
 8000a90:	6808      	ldr	r0, [r1, #0]
 8000a92:	0740      	lsls	r0, r0, #29
 8000a94:	d508      	bpl.n	8000aa8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000a96:	6808      	ldr	r0, [r1, #0]
 8000a98:	f020 0004 	bic.w	r0, r0, #4
 8000a9c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000a9e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000aa0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000aa2:	f042 0201 	orr.w	r2, r2, #1
 8000aa6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	409a      	lsls	r2, r3
 8000aac:	4232      	tst	r2, r6
 8000aae:	d008      	beq.n	8000ac2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ab0:	6821      	ldr	r1, [r4, #0]
 8000ab2:	6949      	ldr	r1, [r1, #20]
 8000ab4:	0609      	lsls	r1, r1, #24
 8000ab6:	d504      	bpl.n	8000ac2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ab8:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000aba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000abc:	f042 0202 	orr.w	r2, r2, #2
 8000ac0:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	409a      	lsls	r2, r3
 8000ac6:	4232      	tst	r2, r6
 8000ac8:	d008      	beq.n	8000adc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000aca:	6821      	ldr	r1, [r4, #0]
 8000acc:	6809      	ldr	r1, [r1, #0]
 8000ace:	0788      	lsls	r0, r1, #30
 8000ad0:	d504      	bpl.n	8000adc <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000ad2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ad4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000ad6:	f042 0204 	orr.w	r2, r2, #4
 8000ada:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000adc:	2210      	movs	r2, #16
 8000ade:	409a      	lsls	r2, r3
 8000ae0:	4232      	tst	r2, r6
 8000ae2:	d010      	beq.n	8000b06 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	6819      	ldr	r1, [r3, #0]
 8000ae8:	0709      	lsls	r1, r1, #28
 8000aea:	d50c      	bpl.n	8000b06 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000aec:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	0350      	lsls	r0, r2, #13
 8000af2:	d537      	bpl.n	8000b64 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	0319      	lsls	r1, r3, #12
 8000af8:	d401      	bmi.n	8000afe <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000afc:	e000      	b.n	8000b00 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000afe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8000b00:	b10b      	cbz	r3, 8000b06 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8000b02:	4620      	mov	r0, r4
 8000b04:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000b06:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000b08:	2220      	movs	r2, #32
 8000b0a:	408a      	lsls	r2, r1
 8000b0c:	4232      	tst	r2, r6
 8000b0e:	d03a      	beq.n	8000b86 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	6818      	ldr	r0, [r3, #0]
 8000b14:	06c6      	lsls	r6, r0, #27
 8000b16:	d536      	bpl.n	8000b86 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000b18:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b1a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000b1e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b20:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000b22:	d127      	bne.n	8000b74 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000b24:	f022 0216 	bic.w	r2, r2, #22
 8000b28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000b2a:	695a      	ldr	r2, [r3, #20]
 8000b2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b30:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000b32:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b34:	b90a      	cbnz	r2, 8000b3a <HAL_DMA_IRQHandler+0xc6>
 8000b36:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000b38:	b11a      	cbz	r2, 8000b42 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	f022 0208 	bic.w	r2, r2, #8
 8000b40:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b42:	233f      	movs	r3, #63	; 0x3f
 8000b44:	408b      	lsls	r3, r1
 8000b46:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000b54:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d045      	beq.n	8000be6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8000b5a:	4620      	mov	r0, r4
}
 8000b5c:	b003      	add	sp, #12
 8000b5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8000b62:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	05d2      	lsls	r2, r2, #23
 8000b68:	d4c7      	bmi.n	8000afa <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	f022 0208 	bic.w	r2, r2, #8
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	e7c2      	b.n	8000afa <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000b74:	0350      	lsls	r0, r2, #13
 8000b76:	d527      	bpl.n	8000bc8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	0319      	lsls	r1, r3, #12
 8000b7c:	d431      	bmi.n	8000be2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8000b7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000b80:	b10b      	cbz	r3, 8000b86 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8000b82:	4620      	mov	r0, r4
 8000b84:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000b86:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b88:	b36b      	cbz	r3, 8000be6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000b8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b8c:	07da      	lsls	r2, r3, #31
 8000b8e:	d519      	bpl.n	8000bc4 <HAL_DMA_IRQHandler+0x150>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b90:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000b92:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000b94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000b98:	6813      	ldr	r3, [r2, #0]
 8000b9a:	f023 0301 	bic.w	r3, r3, #1
 8000b9e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8000ba0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000ba4:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000ba8:	9b01      	ldr	r3, [sp, #4]
 8000baa:	3301      	adds	r3, #1
 8000bac:	42bb      	cmp	r3, r7
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	d802      	bhi.n	8000bb8 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000bb2:	6813      	ldr	r3, [r2, #0]
 8000bb4:	07db      	lsls	r3, r3, #31
 8000bb6:	d4f7      	bmi.n	8000ba8 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000bc4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000bc6:	e7c6      	b.n	8000b56 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8000bce:	d108      	bne.n	8000be2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000bd0:	6819      	ldr	r1, [r3, #0]
 8000bd2:	f021 0110 	bic.w	r1, r1, #16
 8000bd6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000bd8:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000bda:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000bde:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000be2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000be4:	e7cc      	b.n	8000b80 <HAL_DMA_IRQHandler+0x10c>
}
 8000be6:	b003      	add	sp, #12
 8000be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000000c 	.word	0x2000000c

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf4:	680b      	ldr	r3, [r1, #0]
{
 8000bf6:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000da4 <HAL_GPIO_Init+0x1b4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfc:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000bfe:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c00:	4a66      	ldr	r2, [pc, #408]	; (8000d9c <HAL_GPIO_Init+0x1ac>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c02:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8000da8 <HAL_GPIO_Init+0x1b8>
    ioposition = ((uint32_t)0x01) << position;
 8000c06:	f04f 0c01 	mov.w	ip, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0a:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000c0c:	fa0c fc03 	lsl.w	ip, ip, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c10:	ea04 060c 	and.w	r6, r4, ip
    if(iocurrent == ioposition)
 8000c14:	45b4      	cmp	ip, r6
 8000c16:	f040 80ab 	bne.w	8000d70 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c1a:	684c      	ldr	r4, [r1, #4]
 8000c1c:	f024 0710 	bic.w	r7, r4, #16
 8000c20:	2f02      	cmp	r7, #2
 8000c22:	d116      	bne.n	8000c52 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000c24:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c28:	f003 0b07 	and.w	fp, r3, #7
 8000c2c:	f04f 0e0f 	mov.w	lr, #15
 8000c30:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000c34:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000c38:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c3c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000c40:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c44:	690d      	ldr	r5, [r1, #16]
 8000c46:	fa05 f50b 	lsl.w	r5, r5, fp
 8000c4a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 8000c4e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000c52:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c56:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000c58:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c5c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c60:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c64:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c66:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c6a:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c6c:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c6e:	ea05 0b0b 	and.w	fp, r5, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c72:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 8000c76:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c7a:	d811      	bhi.n	8000ca0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000c7c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c7e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000c82:	68cf      	ldr	r7, [r1, #12]
 8000c84:	fa07 fe0a 	lsl.w	lr, r7, sl
 8000c88:	ea4e 070b 	orr.w	r7, lr, fp
        GPIOx->OSPEEDR = temp;
 8000c8c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c8e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c90:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c94:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000c98:	409f      	lsls	r7, r3
 8000c9a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000c9e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000ca0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ca2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ca4:	688f      	ldr	r7, [r1, #8]
 8000ca6:	fa07 f70a 	lsl.w	r7, r7, sl
 8000caa:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000cac:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cae:	00e5      	lsls	r5, r4, #3
 8000cb0:	d55e      	bpl.n	8000d70 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb2:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000cb6:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cba:	f003 0c03 	and.w	ip, r3, #3
 8000cbe:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000cc6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cca:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000cd2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000cd6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000cda:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000cde:	9503      	str	r5, [sp, #12]
 8000ce0:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ce2:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 8000ce6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cea:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cee:	4d2c      	ldr	r5, [pc, #176]	; (8000da0 <HAL_GPIO_Init+0x1b0>)
 8000cf0:	42a8      	cmp	r0, r5
 8000cf2:	d044      	beq.n	8000d7e <HAL_GPIO_Init+0x18e>
 8000cf4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cf8:	42a8      	cmp	r0, r5
 8000cfa:	d042      	beq.n	8000d82 <HAL_GPIO_Init+0x192>
 8000cfc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d00:	42a8      	cmp	r0, r5
 8000d02:	d040      	beq.n	8000d86 <HAL_GPIO_Init+0x196>
 8000d04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d08:	42a8      	cmp	r0, r5
 8000d0a:	d03e      	beq.n	8000d8a <HAL_GPIO_Init+0x19a>
 8000d0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d10:	42a8      	cmp	r0, r5
 8000d12:	d03c      	beq.n	8000d8e <HAL_GPIO_Init+0x19e>
 8000d14:	4548      	cmp	r0, r9
 8000d16:	d03c      	beq.n	8000d92 <HAL_GPIO_Init+0x1a2>
 8000d18:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000d1c:	42a8      	cmp	r0, r5
 8000d1e:	d03a      	beq.n	8000d96 <HAL_GPIO_Init+0x1a6>
 8000d20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d24:	42a8      	cmp	r0, r5
 8000d26:	bf14      	ite	ne
 8000d28:	2508      	movne	r5, #8
 8000d2a:	2507      	moveq	r5, #7
 8000d2c:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d30:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d34:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d38:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d3a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000d3e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d40:	bf0c      	ite	eq
 8000d42:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d44:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d46:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000d4a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000d4c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000d4e:	bf0c      	ite	eq
 8000d50:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d52:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d54:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000d58:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000d5a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000d5c:	bf0c      	ite	eq
 8000d5e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000d60:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d62:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000d64:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000d66:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000d68:	bf54      	ite	pl
 8000d6a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000d6c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d6e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d70:	3301      	adds	r3, #1
 8000d72:	2b10      	cmp	r3, #16
 8000d74:	f47f af47 	bne.w	8000c06 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000d78:	b005      	add	sp, #20
 8000d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d7e:	2500      	movs	r5, #0
 8000d80:	e7d4      	b.n	8000d2c <HAL_GPIO_Init+0x13c>
 8000d82:	2501      	movs	r5, #1
 8000d84:	e7d2      	b.n	8000d2c <HAL_GPIO_Init+0x13c>
 8000d86:	2502      	movs	r5, #2
 8000d88:	e7d0      	b.n	8000d2c <HAL_GPIO_Init+0x13c>
 8000d8a:	2503      	movs	r5, #3
 8000d8c:	e7ce      	b.n	8000d2c <HAL_GPIO_Init+0x13c>
 8000d8e:	2504      	movs	r5, #4
 8000d90:	e7cc      	b.n	8000d2c <HAL_GPIO_Init+0x13c>
 8000d92:	2505      	movs	r5, #5
 8000d94:	e7ca      	b.n	8000d2c <HAL_GPIO_Init+0x13c>
 8000d96:	2506      	movs	r5, #6
 8000d98:	e7c8      	b.n	8000d2c <HAL_GPIO_Init+0x13c>
 8000d9a:	bf00      	nop
 8000d9c:	40013c00 	.word	0x40013c00
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40021400 	.word	0x40021400

08000dac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000dac:	b10a      	cbz	r2, 8000db2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000dae:	6181      	str	r1, [r0, #24]
  }
}
 8000db0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000db2:	0409      	lsls	r1, r1, #16
 8000db4:	e7fb      	b.n	8000dae <HAL_GPIO_WritePin+0x2>

08000db6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000db6:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000db8:	4604      	mov	r4, r0
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	d04a      	beq.n	8000e54 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dbe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000dc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dc6:	b91b      	cbnz	r3, 8000dd0 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000dc8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000dcc:	f002 f85c 	bl	8002e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000dd0:	2324      	movs	r3, #36	; 0x24
 8000dd2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	f022 0201 	bic.w	r2, r2, #1
 8000dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000de0:	6862      	ldr	r2, [r4, #4]
 8000de2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000de6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000df4:	2901      	cmp	r1, #1
 8000df6:	d124      	bne.n	8000e42 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000df8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dfc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dfe:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e00:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e02:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e0a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e12:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000e14:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	69a1      	ldr	r1, [r4, #24]
 8000e1c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000e20:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e22:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	f042 0201 	orr.w	r2, r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000e32:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e34:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e3a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e3c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8000e40:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e46:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e48:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e4a:	d1d8      	bne.n	8000dfe <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	e7d4      	b.n	8000dfe <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000e54:	2001      	movs	r0, #1
 8000e56:	e7f3      	b.n	8000e40 <HAL_I2C_Init+0x8a>

08000e58 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e58:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	2a20      	cmp	r2, #32
{
 8000e60:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e62:	d11d      	bne.n	8000ea0 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e64:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d019      	beq.n	8000ea0 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e6c:	2324      	movs	r3, #36	; 0x24
 8000e6e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e72:	6803      	ldr	r3, [r0, #0]
 8000e74:	681c      	ldr	r4, [r3, #0]
 8000e76:	f024 0401 	bic.w	r4, r4, #1
 8000e7a:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000e7c:	681c      	ldr	r4, [r3, #0]
 8000e7e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000e82:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e84:	681c      	ldr	r4, [r3, #0]
 8000e86:	4321      	orrs	r1, r4
 8000e88:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e8a:	6819      	ldr	r1, [r3, #0]
 8000e8c:	f041 0101 	orr.w	r1, r1, #1
 8000e90:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e92:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e94:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000e98:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000e9c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000e9e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	e7fc      	b.n	8000e9e <HAL_I2CEx_ConfigAnalogFilter+0x46>

08000ea4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ea4:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ea6:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000eaa:	b2e4      	uxtb	r4, r4
 8000eac:	2c20      	cmp	r4, #32
 8000eae:	d11c      	bne.n	8000eea <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000eb0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d018      	beq.n	8000eea <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000eb8:	2324      	movs	r3, #36	; 0x24
 8000eba:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ebe:	6803      	ldr	r3, [r0, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	f022 0201 	bic.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000ec8:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000eca:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000ece:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000ed2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	f042 0201 	orr.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000edc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000ede:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000ee2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000ee6:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000ee8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8000eea:	2002      	movs	r0, #2
 8000eec:	e7fc      	b.n	8000ee8 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08000ef0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000ef2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ef6:	4c19      	ldr	r4, [pc, #100]	; (8000f5c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000efc:	641a      	str	r2, [r3, #64]	; 0x40
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f10:	f7ff fb42 	bl	8000598 <HAL_GetTick>
 8000f14:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f16:	6863      	ldr	r3, [r4, #4]
 8000f18:	03da      	lsls	r2, r3, #15
 8000f1a:	d50c      	bpl.n	8000f36 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f22:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f24:	f7ff fb38 	bl	8000598 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f28:	4c0c      	ldr	r4, [pc, #48]	; (8000f5c <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000f2a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f2c:	6863      	ldr	r3, [r4, #4]
 8000f2e:	039b      	lsls	r3, r3, #14
 8000f30:	d50a      	bpl.n	8000f48 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000f32:	2000      	movs	r0, #0
 8000f34:	e006      	b.n	8000f44 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f36:	f7ff fb2f 	bl	8000598 <HAL_GetTick>
 8000f3a:	1b40      	subs	r0, r0, r5
 8000f3c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f40:	d9e9      	bls.n	8000f16 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000f42:	2003      	movs	r0, #3
}
 8000f44:	b003      	add	sp, #12
 8000f46:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f48:	f7ff fb26 	bl	8000598 <HAL_GetTick>
 8000f4c:	1b40      	subs	r0, r0, r5
 8000f4e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000f52:	d9eb      	bls.n	8000f2c <HAL_PWREx_EnableOverDrive+0x3c>
 8000f54:	e7f5      	b.n	8000f42 <HAL_PWREx_EnableOverDrive+0x52>
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f64:	4604      	mov	r4, r0
 8000f66:	b918      	cbnz	r0, 8000f70 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000f68:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000f6a:	b002      	add	sp, #8
 8000f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f70:	6803      	ldr	r3, [r0, #0]
 8000f72:	07d8      	lsls	r0, r3, #31
 8000f74:	d410      	bmi.n	8000f98 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f76:	6823      	ldr	r3, [r4, #0]
 8000f78:	0799      	lsls	r1, r3, #30
 8000f7a:	d45e      	bmi.n	800103a <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f7c:	6823      	ldr	r3, [r4, #0]
 8000f7e:	0719      	lsls	r1, r3, #28
 8000f80:	f100 80a3 	bmi.w	80010ca <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	075a      	lsls	r2, r3, #29
 8000f88:	f100 80c4 	bmi.w	8001114 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f8c:	69a2      	ldr	r2, [r4, #24]
 8000f8e:	2a00      	cmp	r2, #0
 8000f90:	f040 812e 	bne.w	80011f0 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000f94:	2000      	movs	r0, #0
 8000f96:	e7e8      	b.n	8000f6a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f98:	4b93      	ldr	r3, [pc, #588]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	f002 020c 	and.w	r2, r2, #12
 8000fa0:	2a04      	cmp	r2, #4
 8000fa2:	d007      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	f002 020c 	and.w	r2, r2, #12
 8000faa:	2a08      	cmp	r2, #8
 8000fac:	d10a      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x64>
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	025a      	lsls	r2, r3, #9
 8000fb2:	d507      	bpl.n	8000fc4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	4b8c      	ldr	r3, [pc, #560]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	039b      	lsls	r3, r3, #14
 8000fba:	d5dc      	bpl.n	8000f76 <HAL_RCC_OscConfig+0x16>
 8000fbc:	6863      	ldr	r3, [r4, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1d9      	bne.n	8000f76 <HAL_RCC_OscConfig+0x16>
 8000fc2:	e7d1      	b.n	8000f68 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc4:	6863      	ldr	r3, [r4, #4]
 8000fc6:	4d88      	ldr	r5, [pc, #544]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8000fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fcc:	d111      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x92>
 8000fce:	682b      	ldr	r3, [r5, #0]
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fadf 	bl	8000598 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	4d83      	ldr	r5, [pc, #524]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000fdc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	682b      	ldr	r3, [r5, #0]
 8000fe0:	039f      	lsls	r7, r3, #14
 8000fe2:	d4c8      	bmi.n	8000f76 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fad8 	bl	8000598 <HAL_GetTick>
 8000fe8:	1b80      	subs	r0, r0, r6
 8000fea:	2864      	cmp	r0, #100	; 0x64
 8000fec:	d9f7      	bls.n	8000fde <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000fee:	2003      	movs	r0, #3
 8000ff0:	e7bb      	b.n	8000f6a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff2:	b99b      	cbnz	r3, 800101c <HAL_RCC_OscConfig+0xbc>
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffa:	602b      	str	r3, [r5, #0]
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001002:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001004:	f7ff fac8 	bl	8000598 <HAL_GetTick>
 8001008:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	0398      	lsls	r0, r3, #14
 800100e:	d5b2      	bpl.n	8000f76 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fac2 	bl	8000598 <HAL_GetTick>
 8001014:	1b80      	subs	r0, r0, r6
 8001016:	2864      	cmp	r0, #100	; 0x64
 8001018:	d9f7      	bls.n	800100a <HAL_RCC_OscConfig+0xaa>
 800101a:	e7e8      	b.n	8000fee <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800101c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001020:	682b      	ldr	r3, [r5, #0]
 8001022:	d103      	bne.n	800102c <HAL_RCC_OscConfig+0xcc>
 8001024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001028:	602b      	str	r3, [r5, #0]
 800102a:	e7d0      	b.n	8000fce <HAL_RCC_OscConfig+0x6e>
 800102c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001030:	602b      	str	r3, [r5, #0]
 8001032:	682b      	ldr	r3, [r5, #0]
 8001034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001038:	e7cc      	b.n	8000fd4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800103a:	4b6b      	ldr	r3, [pc, #428]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	f012 0f0c 	tst.w	r2, #12
 8001042:	d007      	beq.n	8001054 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	f002 020c 	and.w	r2, r2, #12
 800104a:	2a08      	cmp	r2, #8
 800104c:	d111      	bne.n	8001072 <HAL_RCC_OscConfig+0x112>
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	0259      	lsls	r1, r3, #9
 8001052:	d40e      	bmi.n	8001072 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001054:	4b64      	ldr	r3, [pc, #400]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	0792      	lsls	r2, r2, #30
 800105a:	d502      	bpl.n	8001062 <HAL_RCC_OscConfig+0x102>
 800105c:	68e2      	ldr	r2, [r4, #12]
 800105e:	2a01      	cmp	r2, #1
 8001060:	d182      	bne.n	8000f68 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	6921      	ldr	r1, [r4, #16]
 8001066:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800106a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800106e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001070:	e784      	b.n	8000f7c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001072:	68e3      	ldr	r3, [r4, #12]
 8001074:	4d5c      	ldr	r5, [pc, #368]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001076:	b1bb      	cbz	r3, 80010a8 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001080:	f7ff fa8a 	bl	8000598 <HAL_GetTick>
 8001084:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001086:	682b      	ldr	r3, [r5, #0]
 8001088:	079f      	lsls	r7, r3, #30
 800108a:	d507      	bpl.n	800109c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108c:	682b      	ldr	r3, [r5, #0]
 800108e:	6922      	ldr	r2, [r4, #16]
 8001090:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001094:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001098:	602b      	str	r3, [r5, #0]
 800109a:	e76f      	b.n	8000f7c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109c:	f7ff fa7c 	bl	8000598 <HAL_GetTick>
 80010a0:	1b80      	subs	r0, r0, r6
 80010a2:	2802      	cmp	r0, #2
 80010a4:	d9ef      	bls.n	8001086 <HAL_RCC_OscConfig+0x126>
 80010a6:	e7a2      	b.n	8000fee <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	f023 0301 	bic.w	r3, r3, #1
 80010ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010b0:	f7ff fa72 	bl	8000598 <HAL_GetTick>
 80010b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	0798      	lsls	r0, r3, #30
 80010ba:	f57f af5f 	bpl.w	8000f7c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010be:	f7ff fa6b 	bl	8000598 <HAL_GetTick>
 80010c2:	1b80      	subs	r0, r0, r6
 80010c4:	2802      	cmp	r0, #2
 80010c6:	d9f6      	bls.n	80010b6 <HAL_RCC_OscConfig+0x156>
 80010c8:	e791      	b.n	8000fee <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010ca:	6963      	ldr	r3, [r4, #20]
 80010cc:	4d46      	ldr	r5, [pc, #280]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 80010ce:	b183      	cbz	r3, 80010f2 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80010d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80010d8:	f7ff fa5e 	bl	8000598 <HAL_GetTick>
 80010dc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010e0:	079b      	lsls	r3, r3, #30
 80010e2:	f53f af4f 	bmi.w	8000f84 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e6:	f7ff fa57 	bl	8000598 <HAL_GetTick>
 80010ea:	1b80      	subs	r0, r0, r6
 80010ec:	2802      	cmp	r0, #2
 80010ee:	d9f6      	bls.n	80010de <HAL_RCC_OscConfig+0x17e>
 80010f0:	e77d      	b.n	8000fee <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80010f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010f4:	f023 0301 	bic.w	r3, r3, #1
 80010f8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80010fa:	f7ff fa4d 	bl	8000598 <HAL_GetTick>
 80010fe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001102:	079f      	lsls	r7, r3, #30
 8001104:	f57f af3e 	bpl.w	8000f84 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001108:	f7ff fa46 	bl	8000598 <HAL_GetTick>
 800110c:	1b80      	subs	r0, r0, r6
 800110e:	2802      	cmp	r0, #2
 8001110:	d9f6      	bls.n	8001100 <HAL_RCC_OscConfig+0x1a0>
 8001112:	e76c      	b.n	8000fee <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001114:	4b34      	ldr	r3, [pc, #208]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001118:	00d0      	lsls	r0, r2, #3
 800111a:	d427      	bmi.n	800116c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800111e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001124:	641a      	str	r2, [r3, #64]	; 0x40
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001130:	4d2e      	ldr	r5, [pc, #184]	; (80011ec <HAL_RCC_OscConfig+0x28c>)
 8001132:	682b      	ldr	r3, [r5, #0]
 8001134:	05d9      	lsls	r1, r3, #23
 8001136:	d51b      	bpl.n	8001170 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001138:	68a3      	ldr	r3, [r4, #8]
 800113a:	4d2b      	ldr	r5, [pc, #172]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 800113c:	2b01      	cmp	r3, #1
 800113e:	d127      	bne.n	8001190 <HAL_RCC_OscConfig+0x230>
 8001140:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001148:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800114c:	f7ff fa24 	bl	8000598 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001150:	4f25      	ldr	r7, [pc, #148]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001152:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001156:	079b      	lsls	r3, r3, #30
 8001158:	d53f      	bpl.n	80011da <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800115a:	2e00      	cmp	r6, #0
 800115c:	f43f af16 	beq.w	8000f8c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001160:	4a21      	ldr	r2, [pc, #132]	; (80011e8 <HAL_RCC_OscConfig+0x288>)
 8001162:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	e70f      	b.n	8000f8c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800116c:	2600      	movs	r6, #0
 800116e:	e7df      	b.n	8001130 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001178:	f7ff fa0e 	bl	8000598 <HAL_GetTick>
 800117c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800117e:	682b      	ldr	r3, [r5, #0]
 8001180:	05da      	lsls	r2, r3, #23
 8001182:	d4d9      	bmi.n	8001138 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001184:	f7ff fa08 	bl	8000598 <HAL_GetTick>
 8001188:	1bc0      	subs	r0, r0, r7
 800118a:	2864      	cmp	r0, #100	; 0x64
 800118c:	d9f7      	bls.n	800117e <HAL_RCC_OscConfig+0x21e>
 800118e:	e72e      	b.n	8000fee <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001190:	b9ab      	cbnz	r3, 80011be <HAL_RCC_OscConfig+0x25e>
 8001192:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001194:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	672b      	str	r3, [r5, #112]	; 0x70
 800119e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011a0:	f023 0304 	bic.w	r3, r3, #4
 80011a4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80011a6:	f7ff f9f7 	bl	8000598 <HAL_GetTick>
 80011aa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011ae:	0798      	lsls	r0, r3, #30
 80011b0:	d5d3      	bpl.n	800115a <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011b2:	f7ff f9f1 	bl	8000598 <HAL_GetTick>
 80011b6:	1bc0      	subs	r0, r0, r7
 80011b8:	4540      	cmp	r0, r8
 80011ba:	d9f7      	bls.n	80011ac <HAL_RCC_OscConfig+0x24c>
 80011bc:	e717      	b.n	8000fee <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011be:	2b05      	cmp	r3, #5
 80011c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011c2:	d103      	bne.n	80011cc <HAL_RCC_OscConfig+0x26c>
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	672b      	str	r3, [r5, #112]	; 0x70
 80011ca:	e7b9      	b.n	8001140 <HAL_RCC_OscConfig+0x1e0>
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	672b      	str	r3, [r5, #112]	; 0x70
 80011d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	e7b5      	b.n	8001146 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011da:	f7ff f9dd 	bl	8000598 <HAL_GetTick>
 80011de:	eba0 0008 	sub.w	r0, r0, r8
 80011e2:	42a8      	cmp	r0, r5
 80011e4:	d9b6      	bls.n	8001154 <HAL_RCC_OscConfig+0x1f4>
 80011e6:	e702      	b.n	8000fee <HAL_RCC_OscConfig+0x8e>
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f0:	4d24      	ldr	r5, [pc, #144]	; (8001284 <HAL_RCC_OscConfig+0x324>)
 80011f2:	68ab      	ldr	r3, [r5, #8]
 80011f4:	f003 030c 	and.w	r3, r3, #12
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	f43f aeb5 	beq.w	8000f68 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80011fe:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001200:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001206:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001208:	d12e      	bne.n	8001268 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800120a:	f7ff f9c5 	bl	8000598 <HAL_GetTick>
 800120e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	0199      	lsls	r1, r3, #6
 8001214:	d422      	bmi.n	800125c <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001216:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800121a:	4313      	orrs	r3, r2
 800121c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800121e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001222:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001226:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001228:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800122c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122e:	4c15      	ldr	r4, [pc, #84]	; (8001284 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001230:	0852      	lsrs	r2, r2, #1
 8001232:	3a01      	subs	r2, #1
 8001234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001238:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800123a:	682b      	ldr	r3, [r5, #0]
 800123c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001240:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001242:	f7ff f9a9 	bl	8000598 <HAL_GetTick>
 8001246:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	019a      	lsls	r2, r3, #6
 800124c:	f53f aea2 	bmi.w	8000f94 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff f9a2 	bl	8000598 <HAL_GetTick>
 8001254:	1b40      	subs	r0, r0, r5
 8001256:	2802      	cmp	r0, #2
 8001258:	d9f6      	bls.n	8001248 <HAL_RCC_OscConfig+0x2e8>
 800125a:	e6c8      	b.n	8000fee <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800125c:	f7ff f99c 	bl	8000598 <HAL_GetTick>
 8001260:	1b80      	subs	r0, r0, r6
 8001262:	2802      	cmp	r0, #2
 8001264:	d9d4      	bls.n	8001210 <HAL_RCC_OscConfig+0x2b0>
 8001266:	e6c2      	b.n	8000fee <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001268:	f7ff f996 	bl	8000598 <HAL_GetTick>
 800126c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800126e:	682b      	ldr	r3, [r5, #0]
 8001270:	019b      	lsls	r3, r3, #6
 8001272:	f57f ae8f 	bpl.w	8000f94 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001276:	f7ff f98f 	bl	8000598 <HAL_GetTick>
 800127a:	1b00      	subs	r0, r0, r4
 800127c:	2802      	cmp	r0, #2
 800127e:	d9f6      	bls.n	800126e <HAL_RCC_OscConfig+0x30e>
 8001280:	e6b5      	b.n	8000fee <HAL_RCC_OscConfig+0x8e>
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001288:	4913      	ldr	r1, [pc, #76]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800128a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800128c:	688b      	ldr	r3, [r1, #8]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b04      	cmp	r3, #4
 8001294:	d003      	beq.n	800129e <HAL_RCC_GetSysClockFreq+0x16>
 8001296:	2b08      	cmp	r3, #8
 8001298:	d003      	beq.n	80012a2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800129a:	4810      	ldr	r0, [pc, #64]	; (80012dc <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 800129c:	e000      	b.n	80012a0 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 800129e:	4810      	ldr	r0, [pc, #64]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x58>)
}
 80012a0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012a2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80012a4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012a6:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80012ac:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80012b4:	bf1a      	itte	ne
 80012b6:	480a      	ldrne	r0, [pc, #40]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x58>)
 80012b8:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012ba:	4808      	ldreq	r0, [pc, #32]	; (80012dc <HAL_RCC_GetSysClockFreq+0x54>)
 80012bc:	fba1 0100 	umull	r0, r1, r1, r0
 80012c0:	f7fe ffae 	bl	8000220 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x50>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80012cc:	3301      	adds	r3, #1
 80012ce:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80012d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80012d4:	e7e4      	b.n	80012a0 <HAL_RCC_GetSysClockFreq+0x18>
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	00f42400 	.word	0x00f42400
 80012e0:	017d7840 	.word	0x017d7840

080012e4 <HAL_RCC_ClockConfig>:
{
 80012e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80012ea:	4604      	mov	r4, r0
 80012ec:	b910      	cbnz	r0, 80012f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80012ee:	2001      	movs	r0, #1
}
 80012f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012f4:	4a45      	ldr	r2, [pc, #276]	; (800140c <HAL_RCC_ClockConfig+0x128>)
 80012f6:	6813      	ldr	r3, [r2, #0]
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	428b      	cmp	r3, r1
 80012fe:	d327      	bcc.n	8001350 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001300:	6821      	ldr	r1, [r4, #0]
 8001302:	078f      	lsls	r7, r1, #30
 8001304:	d42f      	bmi.n	8001366 <HAL_RCC_ClockConfig+0x82>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001306:	07c8      	lsls	r0, r1, #31
 8001308:	d442      	bmi.n	8001390 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800130a:	4a40      	ldr	r2, [pc, #256]	; (800140c <HAL_RCC_ClockConfig+0x128>)
 800130c:	6813      	ldr	r3, [r2, #0]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	42ab      	cmp	r3, r5
 8001314:	d865      	bhi.n	80013e2 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001316:	6822      	ldr	r2, [r4, #0]
 8001318:	0751      	lsls	r1, r2, #29
 800131a:	d46e      	bmi.n	80013fa <HAL_RCC_ClockConfig+0x116>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131c:	0713      	lsls	r3, r2, #28
 800131e:	d507      	bpl.n	8001330 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001320:	4a3b      	ldr	r2, [pc, #236]	; (8001410 <HAL_RCC_ClockConfig+0x12c>)
 8001322:	6921      	ldr	r1, [r4, #16]
 8001324:	6893      	ldr	r3, [r2, #8]
 8001326:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800132a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800132e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001330:	f7ff ffaa 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <HAL_RCC_ClockConfig+0x12c>)
 8001336:	4a37      	ldr	r2, [pc, #220]	; (8001414 <HAL_RCC_ClockConfig+0x130>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	40d8      	lsrs	r0, r3
 8001342:	4b35      	ldr	r3, [pc, #212]	; (8001418 <HAL_RCC_ClockConfig+0x134>)
 8001344:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001346:	2000      	movs	r0, #0
 8001348:	f7ff f8ea 	bl	8000520 <HAL_InitTick>
  return HAL_OK;
 800134c:	2000      	movs	r0, #0
 800134e:	e7cf      	b.n	80012f0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001350:	6813      	ldr	r3, [r2, #0]
 8001352:	f023 030f 	bic.w	r3, r3, #15
 8001356:	430b      	orrs	r3, r1
 8001358:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	6813      	ldr	r3, [r2, #0]
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	428b      	cmp	r3, r1
 8001362:	d1c4      	bne.n	80012ee <HAL_RCC_ClockConfig+0xa>
 8001364:	e7cc      	b.n	8001300 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001366:	f011 0f04 	tst.w	r1, #4
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <HAL_RCC_ClockConfig+0x12c>)
 800136c:	d003      	beq.n	8001376 <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001374:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001376:	070e      	lsls	r6, r1, #28
 8001378:	d503      	bpl.n	8001382 <HAL_RCC_ClockConfig+0x9e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001380:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	68a0      	ldr	r0, [r4, #8]
 8001386:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800138a:	4302      	orrs	r2, r0
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	e7ba      	b.n	8001306 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001390:	6861      	ldr	r1, [r4, #4]
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <HAL_RCC_ClockConfig+0x12c>)
 8001394:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001398:	d11b      	bne.n	80013d2 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800139e:	d0a6      	beq.n	80012ee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013a0:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013a2:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	4e1a      	ldr	r6, [pc, #104]	; (8001410 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013a8:	f022 0203 	bic.w	r2, r2, #3
 80013ac:	430a      	orrs	r2, r1
 80013ae:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80013b0:	f7ff f8f2 	bl	8000598 <HAL_GetTick>
 80013b4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b6:	68b3      	ldr	r3, [r6, #8]
 80013b8:	6862      	ldr	r2, [r4, #4]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013c2:	d0a2      	beq.n	800130a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013c4:	f7ff f8e8 	bl	8000598 <HAL_GetTick>
 80013c8:	1bc0      	subs	r0, r0, r7
 80013ca:	4540      	cmp	r0, r8
 80013cc:	d9f3      	bls.n	80013b6 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80013ce:	2003      	movs	r0, #3
 80013d0:	e78e      	b.n	80012f0 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013d2:	2902      	cmp	r1, #2
 80013d4:	d102      	bne.n	80013dc <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80013da:	e7e0      	b.n	800139e <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	f012 0f02 	tst.w	r2, #2
 80013e0:	e7dd      	b.n	800139e <HAL_RCC_ClockConfig+0xba>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e2:	6813      	ldr	r3, [r2, #0]
 80013e4:	f023 030f 	bic.w	r3, r3, #15
 80013e8:	432b      	orrs	r3, r5
 80013ea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ec:	6813      	ldr	r3, [r2, #0]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	42ab      	cmp	r3, r5
 80013f4:	f47f af7b 	bne.w	80012ee <HAL_RCC_ClockConfig+0xa>
 80013f8:	e78d      	b.n	8001316 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013fa:	4905      	ldr	r1, [pc, #20]	; (8001410 <HAL_RCC_ClockConfig+0x12c>)
 80013fc:	68e0      	ldr	r0, [r4, #12]
 80013fe:	688b      	ldr	r3, [r1, #8]
 8001400:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001404:	4303      	orrs	r3, r0
 8001406:	608b      	str	r3, [r1, #8]
 8001408:	e788      	b.n	800131c <HAL_RCC_ClockConfig+0x38>
 800140a:	bf00      	nop
 800140c:	40023c00 	.word	0x40023c00
 8001410:	40023800 	.word	0x40023800
 8001414:	08003ed2 	.word	0x08003ed2
 8001418:	2000000c 	.word	0x2000000c

0800141c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <HAL_RCC_GetPCLK1Freq+0x14>)
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001426:	5cd3      	ldrb	r3, [r2, r3]
 8001428:	4a03      	ldr	r2, [pc, #12]	; (8001438 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800142a:	6810      	ldr	r0, [r2, #0]
}
 800142c:	40d8      	lsrs	r0, r3
 800142e:	4770      	bx	lr
 8001430:	40023800 	.word	0x40023800
 8001434:	08003ee2 	.word	0x08003ee2
 8001438:	2000000c 	.word	0x2000000c

0800143c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <HAL_RCC_GetPCLK2Freq+0x14>)
 800143e:	4a05      	ldr	r2, [pc, #20]	; (8001454 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	4a03      	ldr	r2, [pc, #12]	; (8001458 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800144a:	6810      	ldr	r0, [r2, #0]
}
 800144c:	40d8      	lsrs	r0, r3
 800144e:	4770      	bx	lr
 8001450:	40023800 	.word	0x40023800
 8001454:	08003ee2 	.word	0x08003ee2
 8001458:	2000000c 	.word	0x2000000c

0800145c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800145c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001460:	6802      	ldr	r2, [r0, #0]
{
 8001462:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001464:	f012 0601 	ands.w	r6, r2, #1
 8001468:	d00b      	beq.n	8001482 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800146a:	4bb9      	ldr	r3, [pc, #740]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800146c:	6899      	ldr	r1, [r3, #8]
 800146e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001472:	6099      	str	r1, [r3, #8]
 8001474:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8001476:	6899      	ldr	r1, [r3, #8]
 8001478:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800147a:	fab6 f686 	clz	r6, r6
 800147e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001480:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001482:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001486:	d012      	beq.n	80014ae <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001488:	49b1      	ldr	r1, [pc, #708]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800148a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800148c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001490:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001494:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001498:	bf08      	it	eq
 800149a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800149c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80014a0:	bf16      	itet	ne
 80014a2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80014a6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80014a8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80014aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80014ae:	02d7      	lsls	r7, r2, #11
 80014b0:	d510      	bpl.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80014b2:	48a7      	ldr	r0, [pc, #668]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80014b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80014b6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80014ba:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80014be:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80014c2:	ea43 0301 	orr.w	r3, r3, r1
 80014c6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80014ca:	f000 814b 	beq.w	8001764 <HAL_RCCEx_PeriphCLKConfig+0x308>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80014ce:	2900      	cmp	r1, #0
 80014d0:	bf08      	it	eq
 80014d2:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014d4:	0690      	lsls	r0, r2, #26
 80014d6:	d531      	bpl.n	800153c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80014d8:	4b9d      	ldr	r3, [pc, #628]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80014da:	4f9e      	ldr	r7, [pc, #632]	; (8001754 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80014dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014f6:	f7ff f84f 	bl	8000598 <HAL_GetTick>
 80014fa:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	05d9      	lsls	r1, r3, #23
 8001500:	f140 8132 	bpl.w	8001768 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001504:	4f92      	ldr	r7, [pc, #584]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001506:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001508:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800150c:	f040 8137 	bne.w	800177e <HAL_RCCEx_PeriphCLKConfig+0x322>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001510:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001512:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001516:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800151a:	4a8d      	ldr	r2, [pc, #564]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800151c:	f040 8155 	bne.w	80017ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8001520:	6891      	ldr	r1, [r2, #8]
 8001522:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001526:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800152a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800152e:	4301      	orrs	r1, r0
 8001530:	6091      	str	r1, [r2, #8]
 8001532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001536:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001538:	430b      	orrs	r3, r1
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	06df      	lsls	r7, r3, #27
 8001540:	d50c      	bpl.n	800155c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001542:	4a83      	ldr	r2, [pc, #524]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001544:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001548:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800154c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001550:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001554:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001556:	4301      	orrs	r1, r0
 8001558:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800155c:	0458      	lsls	r0, r3, #17
 800155e:	d508      	bpl.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001560:	497b      	ldr	r1, [pc, #492]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001562:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001564:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001568:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800156c:	4302      	orrs	r2, r0
 800156e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001572:	0419      	lsls	r1, r3, #16
 8001574:	d508      	bpl.n	8001588 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001576:	4976      	ldr	r1, [pc, #472]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001578:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800157a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800157e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001582:	4302      	orrs	r2, r0
 8001584:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001588:	03da      	lsls	r2, r3, #15
 800158a:	d508      	bpl.n	800159e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800158c:	4970      	ldr	r1, [pc, #448]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800158e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001590:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001594:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001598:	4302      	orrs	r2, r0
 800159a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800159e:	065f      	lsls	r7, r3, #25
 80015a0:	d508      	bpl.n	80015b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80015a2:	496b      	ldr	r1, [pc, #428]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80015a4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80015a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015aa:	f022 0203 	bic.w	r2, r2, #3
 80015ae:	4302      	orrs	r2, r0
 80015b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80015b4:	0618      	lsls	r0, r3, #24
 80015b6:	d508      	bpl.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80015b8:	4965      	ldr	r1, [pc, #404]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80015ba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80015bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015c0:	f022 020c 	bic.w	r2, r2, #12
 80015c4:	4302      	orrs	r2, r0
 80015c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80015ca:	05d9      	lsls	r1, r3, #23
 80015cc:	d508      	bpl.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80015ce:	4960      	ldr	r1, [pc, #384]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80015d0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80015d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015d6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80015da:	4302      	orrs	r2, r0
 80015dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80015e0:	059a      	lsls	r2, r3, #22
 80015e2:	d508      	bpl.n	80015f6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80015e4:	495a      	ldr	r1, [pc, #360]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80015e6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80015e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015ec:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80015f0:	4302      	orrs	r2, r0
 80015f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80015f6:	055f      	lsls	r7, r3, #21
 80015f8:	d508      	bpl.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80015fa:	4955      	ldr	r1, [pc, #340]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80015fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80015fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001602:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001606:	4302      	orrs	r2, r0
 8001608:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800160c:	0518      	lsls	r0, r3, #20
 800160e:	d508      	bpl.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001610:	494f      	ldr	r1, [pc, #316]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001612:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001614:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001618:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800161c:	4302      	orrs	r2, r0
 800161e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001622:	04d9      	lsls	r1, r3, #19
 8001624:	d508      	bpl.n	8001638 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001626:	494a      	ldr	r1, [pc, #296]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001628:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800162a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800162e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001632:	4302      	orrs	r2, r0
 8001634:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001638:	049a      	lsls	r2, r3, #18
 800163a:	d508      	bpl.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800163c:	4944      	ldr	r1, [pc, #272]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800163e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001640:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001644:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001648:	4302      	orrs	r2, r0
 800164a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800164e:	029f      	lsls	r7, r3, #10
 8001650:	d50c      	bpl.n	800166c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001652:	483f      	ldr	r0, [pc, #252]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001654:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001656:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800165a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800165e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001662:	bf08      	it	eq
 8001664:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001666:	430a      	orrs	r2, r1
 8001668:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800166c:	0358      	lsls	r0, r3, #13
 800166e:	d508      	bpl.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001670:	4937      	ldr	r1, [pc, #220]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001672:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001674:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001678:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800167c:	4302      	orrs	r2, r0
 800167e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001682:	0219      	lsls	r1, r3, #8
 8001684:	d508      	bpl.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001686:	4932      	ldr	r1, [pc, #200]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001688:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800168a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800168e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001692:	4302      	orrs	r2, r0
 8001694:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	d508      	bpl.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800169c:	492c      	ldr	r1, [pc, #176]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800169e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80016a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80016a4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80016a8:	4302      	orrs	r2, r0
 80016aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80016ae:	2e00      	cmp	r6, #0
 80016b0:	f040 808f 	bne.w	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80016b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016b8:	f000 808b 	beq.w	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80016bc:	2d01      	cmp	r5, #1
 80016be:	d14f      	bne.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80016c0:	4d23      	ldr	r5, [pc, #140]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80016c2:	682b      	ldr	r3, [r5, #0]
 80016c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016ca:	f7fe ff65 	bl	8000598 <HAL_GetTick>
 80016ce:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	009f      	lsls	r7, r3, #2
 80016d4:	f100 80e0 	bmi.w	8001898 <HAL_RCCEx_PeriphCLKConfig+0x43c>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80016d8:	6820      	ldr	r0, [r4, #0]
 80016da:	0305      	lsls	r5, r0, #12
 80016dc:	d501      	bpl.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80016de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016e0:	b11b      	cbz	r3, 80016ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80016e2:	02c1      	lsls	r1, r0, #11
 80016e4:	d518      	bpl.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80016e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016e8:	b9b3      	cbnz	r3, 8001718 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80016ea:	4919      	ldr	r1, [pc, #100]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80016ec:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80016f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80016f4:	061b      	lsls	r3, r3, #24
 80016f6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80016fa:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80016fe:	4313      	orrs	r3, r2
 8001700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001704:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8001708:	6a22      	ldr	r2, [r4, #32]
 800170a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800170e:	3a01      	subs	r2, #1
 8001710:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001718:	0282      	lsls	r2, r0, #10
 800171a:	d510      	bpl.n	800173e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800171c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800171e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001722:	d10c      	bne.n	800173e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001724:	490a      	ldr	r1, [pc, #40]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8001726:	69a3      	ldr	r3, [r4, #24]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001728:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800172c:	6920      	ldr	r0, [r4, #16]
 800172e:	041b      	lsls	r3, r3, #16
 8001730:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001734:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001738:	4313      	orrs	r3, r2
 800173a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800173e:	4c04      	ldr	r4, [pc, #16]	; (8001750 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001746:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001748:	f7fe ff26 	bl	8000598 <HAL_GetTick>
 800174c:	4605      	mov	r5, r0
 800174e:	e003      	b.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8001750:	40023800 	.word	0x40023800
 8001754:	40007000 	.word	0x40007000

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	f140 80a3 	bpl.w	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001760:	2000      	movs	r0, #0
 8001762:	e009      	b.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      plli2sused = 1;
 8001764:	2601      	movs	r6, #1
 8001766:	e6b5      	b.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001768:	f7fe ff16 	bl	8000598 <HAL_GetTick>
 800176c:	eba0 0008 	sub.w	r0, r0, r8
 8001770:	2864      	cmp	r0, #100	; 0x64
 8001772:	f67f aec3 	bls.w	80014fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
        return HAL_TIMEOUT;
 8001776:	2003      	movs	r0, #3
}
 8001778:	b003      	add	sp, #12
 800177a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800177e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001780:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001784:	4293      	cmp	r3, r2
 8001786:	f43f aec3 	beq.w	8001510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800178a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800178c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800178e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001792:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001796:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001798:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800179a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800179e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80017a0:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80017a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017a4:	07da      	lsls	r2, r3, #31
 80017a6:	f57f aeb3 	bpl.w	8001510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        tickstart = HAL_GetTick();
 80017aa:	f7fe fef5 	bl	8000598 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ae:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80017b2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017b6:	079b      	lsls	r3, r3, #30
 80017b8:	f53f aeaa 	bmi.w	8001510 <HAL_RCCEx_PeriphCLKConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017bc:	f7fe feec 	bl	8000598 <HAL_GetTick>
 80017c0:	eba0 0008 	sub.w	r0, r0, r8
 80017c4:	4548      	cmp	r0, r9
 80017c6:	d9f5      	bls.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x358>
 80017c8:	e7d5      	b.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017ca:	6891      	ldr	r1, [r2, #8]
 80017cc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80017d0:	e6ae      	b.n	8001530 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    __HAL_RCC_PLLI2S_DISABLE();
 80017d2:	4e38      	ldr	r6, [pc, #224]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80017d4:	6833      	ldr	r3, [r6, #0]
 80017d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80017da:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80017dc:	f7fe fedc 	bl	8000598 <HAL_GetTick>
 80017e0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017e2:	6833      	ldr	r3, [r6, #0]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	d451      	bmi.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x430>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80017e8:	6822      	ldr	r2, [r4, #0]
 80017ea:	07d7      	lsls	r7, r2, #31
 80017ec:	d50d      	bpl.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80017ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017f0:	b95b      	cbnz	r3, 800180a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80017f2:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80017f6:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 80017fa:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80017fe:	071b      	lsls	r3, r3, #28
 8001800:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001804:	430b      	orrs	r3, r1
 8001806:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800180a:	0310      	lsls	r0, r2, #12
 800180c:	d503      	bpl.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800180e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001814:	d005      	beq.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8001816:	02d1      	lsls	r1, r2, #11
 8001818:	d519      	bpl.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800181a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800181c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001820:	d115      	bne.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001822:	4924      	ldr	r1, [pc, #144]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8001824:	68e3      	ldr	r3, [r4, #12]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001826:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800182a:	6866      	ldr	r6, [r4, #4]
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001832:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001836:	4303      	orrs	r3, r0
 8001838:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800183c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001840:	69e3      	ldr	r3, [r4, #28]
 8001842:	f020 001f 	bic.w	r0, r0, #31
 8001846:	3b01      	subs	r3, #1
 8001848:	4303      	orrs	r3, r0
 800184a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800184e:	0192      	lsls	r2, r2, #6
 8001850:	d50a      	bpl.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001852:	68e3      	ldr	r3, [r4, #12]
 8001854:	6862      	ldr	r2, [r4, #4]
 8001856:	061b      	lsls	r3, r3, #24
 8001858:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800185c:	68a2      	ldr	r2, [r4, #8]
 800185e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001862:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001864:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001868:	4e12      	ldr	r6, [pc, #72]	; (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800186a:	6833      	ldr	r3, [r6, #0]
 800186c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001870:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001872:	f7fe fe91 	bl	8000598 <HAL_GetTick>
 8001876:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001878:	6833      	ldr	r3, [r6, #0]
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	f53f af1e 	bmi.w	80016bc <HAL_RCCEx_PeriphCLKConfig+0x260>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001880:	f7fe fe8a 	bl	8000598 <HAL_GetTick>
 8001884:	1bc0      	subs	r0, r0, r7
 8001886:	2864      	cmp	r0, #100	; 0x64
 8001888:	d9f6      	bls.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800188a:	e774      	b.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800188c:	f7fe fe84 	bl	8000598 <HAL_GetTick>
 8001890:	1bc0      	subs	r0, r0, r7
 8001892:	2864      	cmp	r0, #100	; 0x64
 8001894:	d9a5      	bls.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001896:	e76e      	b.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001898:	f7fe fe7e 	bl	8000598 <HAL_GetTick>
 800189c:	1b80      	subs	r0, r0, r6
 800189e:	2864      	cmp	r0, #100	; 0x64
 80018a0:	f67f af16 	bls.w	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80018a4:	e767      	b.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x31a>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80018a6:	f7fe fe77 	bl	8000598 <HAL_GetTick>
 80018aa:	1b40      	subs	r0, r0, r5
 80018ac:	2864      	cmp	r0, #100	; 0x64
 80018ae:	f67f af53 	bls.w	8001758 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80018b2:	e760      	b.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 80018b4:	40023800 	.word	0x40023800

080018b8 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018b8:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018ba:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80018bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <HAL_TIM_Base_Start+0x2c>)
 80018c2:	6891      	ldr	r1, [r2, #8]
 80018c4:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d006      	beq.n	80018d8 <HAL_TIM_Base_Start+0x20>
 80018ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ce:	d003      	beq.n	80018d8 <HAL_TIM_Base_Start+0x20>
  {
    __HAL_TIM_ENABLE(htim);
 80018d0:	6813      	ldr	r3, [r2, #0]
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6013      	str	r3, [r2, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018d8:	2301      	movs	r3, #1
 80018da:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 80018de:	2000      	movs	r0, #0
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	00010007 	.word	0x00010007

080018e8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e8:	4a30      	ldr	r2, [pc, #192]	; (80019ac <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80018ea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018ec:	4290      	cmp	r0, r2
 80018ee:	d012      	beq.n	8001916 <TIM_Base_SetConfig+0x2e>
 80018f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018f4:	d00f      	beq.n	8001916 <TIM_Base_SetConfig+0x2e>
 80018f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80018fa:	4290      	cmp	r0, r2
 80018fc:	d00b      	beq.n	8001916 <TIM_Base_SetConfig+0x2e>
 80018fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001902:	4290      	cmp	r0, r2
 8001904:	d007      	beq.n	8001916 <TIM_Base_SetConfig+0x2e>
 8001906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800190a:	4290      	cmp	r0, r2
 800190c:	d003      	beq.n	8001916 <TIM_Base_SetConfig+0x2e>
 800190e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001912:	4290      	cmp	r0, r2
 8001914:	d119      	bne.n	800194a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001916:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800191c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800191e:	4a23      	ldr	r2, [pc, #140]	; (80019ac <TIM_Base_SetConfig+0xc4>)
 8001920:	4290      	cmp	r0, r2
 8001922:	d029      	beq.n	8001978 <TIM_Base_SetConfig+0x90>
 8001924:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001928:	d026      	beq.n	8001978 <TIM_Base_SetConfig+0x90>
 800192a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800192e:	4290      	cmp	r0, r2
 8001930:	d022      	beq.n	8001978 <TIM_Base_SetConfig+0x90>
 8001932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001936:	4290      	cmp	r0, r2
 8001938:	d01e      	beq.n	8001978 <TIM_Base_SetConfig+0x90>
 800193a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800193e:	4290      	cmp	r0, r2
 8001940:	d01a      	beq.n	8001978 <TIM_Base_SetConfig+0x90>
 8001942:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001946:	4290      	cmp	r0, r2
 8001948:	d016      	beq.n	8001978 <TIM_Base_SetConfig+0x90>
 800194a:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <TIM_Base_SetConfig+0xc8>)
 800194c:	4290      	cmp	r0, r2
 800194e:	d013      	beq.n	8001978 <TIM_Base_SetConfig+0x90>
 8001950:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001954:	4290      	cmp	r0, r2
 8001956:	d00f      	beq.n	8001978 <TIM_Base_SetConfig+0x90>
 8001958:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800195c:	4290      	cmp	r0, r2
 800195e:	d00b      	beq.n	8001978 <TIM_Base_SetConfig+0x90>
 8001960:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001964:	4290      	cmp	r0, r2
 8001966:	d007      	beq.n	8001978 <TIM_Base_SetConfig+0x90>
 8001968:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800196c:	4290      	cmp	r0, r2
 800196e:	d003      	beq.n	8001978 <TIM_Base_SetConfig+0x90>
 8001970:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001974:	4290      	cmp	r0, r2
 8001976:	d103      	bne.n	8001980 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800197c:	68ca      	ldr	r2, [r1, #12]
 800197e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001980:	694a      	ldr	r2, [r1, #20]
 8001982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001986:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001988:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800198a:	688b      	ldr	r3, [r1, #8]
 800198c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800198e:	680b      	ldr	r3, [r1, #0]
 8001990:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <TIM_Base_SetConfig+0xc4>)
 8001994:	4298      	cmp	r0, r3
 8001996:	d003      	beq.n	80019a0 <TIM_Base_SetConfig+0xb8>
 8001998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800199c:	4298      	cmp	r0, r3
 800199e:	d101      	bne.n	80019a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019a0:	690b      	ldr	r3, [r1, #16]
 80019a2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019a4:	2301      	movs	r3, #1
 80019a6:	6143      	str	r3, [r0, #20]
}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40010000 	.word	0x40010000
 80019b0:	40014000 	.word	0x40014000

080019b4 <HAL_TIM_Base_Init>:
{
 80019b4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80019b6:	4604      	mov	r4, r0
 80019b8:	b1a0      	cbz	r0, 80019e4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80019be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80019c2:	b91b      	cbnz	r3, 80019cc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80019c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80019c8:	f001 fa94 	bl	8002ef4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80019cc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019ce:	6820      	ldr	r0, [r4, #0]
 80019d0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80019d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d6:	f7ff ff87 	bl	80018e8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80019da:	2301      	movs	r3, #1
  return HAL_OK;
 80019dc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80019de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80019e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
 80019e6:	e7fc      	b.n	80019e2 <HAL_TIM_Base_Init+0x2e>

080019e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80019e8:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019ea:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 80019ec:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019ee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019f2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019f6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019f8:	6083      	str	r3, [r0, #8]
}
 80019fa:	bd10      	pop	{r4, pc}

080019fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80019fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a00:	2b01      	cmp	r3, #1
{
 8001a02:	b570      	push	{r4, r5, r6, lr}
 8001a04:	4604      	mov	r4, r0
 8001a06:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001a0a:	d017      	beq.n	8001a3c <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001a10:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8001a12:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001a14:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001a18:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a1a:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_TIM_ConfigClockSource+0x124>)
 8001a1c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001a1e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001a20:	680b      	ldr	r3, [r1, #0]
 8001a22:	2b40      	cmp	r3, #64	; 0x40
 8001a24:	d065      	beq.n	8001af2 <HAL_TIM_ConfigClockSource+0xf6>
 8001a26:	d815      	bhi.n	8001a54 <HAL_TIM_ConfigClockSource+0x58>
 8001a28:	2b10      	cmp	r3, #16
 8001a2a:	d00c      	beq.n	8001a46 <HAL_TIM_ConfigClockSource+0x4a>
 8001a2c:	d807      	bhi.n	8001a3e <HAL_TIM_ConfigClockSource+0x42>
 8001a2e:	b153      	cbz	r3, 8001a46 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8001a30:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001a32:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001a38:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001a3c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001a3e:	2b20      	cmp	r3, #32
 8001a40:	d001      	beq.n	8001a46 <HAL_TIM_ConfigClockSource+0x4a>
 8001a42:	2b30      	cmp	r3, #48	; 0x30
 8001a44:	d1f4      	bne.n	8001a30 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8001a46:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a48:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a50:	4313      	orrs	r3, r2
 8001a52:	e01a      	b.n	8001a8a <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8001a54:	2b60      	cmp	r3, #96	; 0x60
 8001a56:	d034      	beq.n	8001ac2 <HAL_TIM_ConfigClockSource+0xc6>
 8001a58:	d819      	bhi.n	8001a8e <HAL_TIM_ConfigClockSource+0x92>
 8001a5a:	2b50      	cmp	r3, #80	; 0x50
 8001a5c:	d1e8      	bne.n	8001a30 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a5e:	684a      	ldr	r2, [r1, #4]
 8001a60:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a62:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a64:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a66:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a6a:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8001a6e:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a70:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a72:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a78:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001a7c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a7e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001a80:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a86:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001a8a:	6083      	str	r3, [r0, #8]
 8001a8c:	e7d0      	b.n	8001a30 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 8001a8e:	2b70      	cmp	r3, #112	; 0x70
 8001a90:	d00c      	beq.n	8001aac <HAL_TIM_ConfigClockSource+0xb0>
 8001a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a96:	d1cb      	bne.n	8001a30 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8001a98:	68cb      	ldr	r3, [r1, #12]
 8001a9a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001a9e:	f7ff ffa3 	bl	80019e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001aa2:	6822      	ldr	r2, [r4, #0]
 8001aa4:	6893      	ldr	r3, [r2, #8]
 8001aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aaa:	e008      	b.n	8001abe <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8001aac:	68cb      	ldr	r3, [r1, #12]
 8001aae:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001ab2:	f7ff ff99 	bl	80019e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ab6:	6822      	ldr	r2, [r4, #0]
 8001ab8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001aba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001abe:	6093      	str	r3, [r2, #8]
      break;
 8001ac0:	e7b6      	b.n	8001a30 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ac2:	684d      	ldr	r5, [r1, #4]
 8001ac4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ac6:	6a01      	ldr	r1, [r0, #32]
 8001ac8:	f021 0110 	bic.w	r1, r1, #16
 8001acc:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ace:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001ad0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ad2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ada:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ade:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001ae2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ae4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001ae6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001aec:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001af0:	e7cb      	b.n	8001a8a <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001af2:	684a      	ldr	r2, [r1, #4]
 8001af4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001af6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001af8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001afa:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001afe:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 8001b02:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b04:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b06:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b0c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001b10:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b12:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001b14:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b1a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001b1e:	e7b4      	b.n	8001a8a <HAL_TIM_ConfigClockSource+0x8e>
 8001b20:	fffe0088 	.word	0xfffe0088

08001b24 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 8001b24:	6800      	ldr	r0, [r0, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001b26:	684a      	ldr	r2, [r1, #4]
{
 8001b28:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 8001b2a:	6883      	ldr	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8001b2c:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001b2e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001b34:	ea43 0302 	orr.w	r3, r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3c:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001b40:	ea43 0304 	orr.w	r3, r3, r4
  htim->Instance->SMCR = tmpsmcr;
 8001b44:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8001b46:	d01e      	beq.n	8001b86 <TIM_SlaveTimer_SetConfig+0x62>
 8001b48:	d803      	bhi.n	8001b52 <TIM_SlaveTimer_SetConfig+0x2e>
 8001b4a:	2a40      	cmp	r2, #64	; 0x40
 8001b4c:	d00b      	beq.n	8001b66 <TIM_SlaveTimer_SetConfig+0x42>
  return HAL_OK;
 8001b4e:	2000      	movs	r0, #0
}
 8001b50:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 8001b52:	2a60      	cmp	r2, #96	; 0x60
 8001b54:	d027      	beq.n	8001ba6 <TIM_SlaveTimer_SetConfig+0x82>
 8001b56:	2a70      	cmp	r2, #112	; 0x70
 8001b58:	d1f9      	bne.n	8001b4e <TIM_SlaveTimer_SetConfig+0x2a>
      TIM_ETR_SetConfig(htim->Instance,
 8001b5a:	690b      	ldr	r3, [r1, #16]
 8001b5c:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 8001b60:	f7ff ff42 	bl	80019e8 <TIM_ETR_SetConfig>
 8001b64:	e7f3      	b.n	8001b4e <TIM_SlaveTimer_SetConfig+0x2a>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001b66:	2c05      	cmp	r4, #5
 8001b68:	d030      	beq.n	8001bcc <TIM_SlaveTimer_SetConfig+0xa8>
      tmpccer = htim->Instance->CCER;
 8001b6a:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001b6c:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001b6e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001b76:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001b7c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001b80:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001b82:	6202      	str	r2, [r0, #32]
 8001b84:	e7e3      	b.n	8001b4e <TIM_SlaveTimer_SetConfig+0x2a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b86:	688a      	ldr	r2, [r1, #8]
 8001b88:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8001b8a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b8c:	6a04      	ldr	r4, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b8e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b92:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8001b96:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b98:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b9a:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ba0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8001ba4:	e7ec      	b.n	8001b80 <TIM_SlaveTimer_SetConfig+0x5c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ba6:	688c      	ldr	r4, [r1, #8]
 8001ba8:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001baa:	6a01      	ldr	r1, [r0, #32]
 8001bac:	f021 0110 	bic.w	r1, r1, #16
 8001bb0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bb2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001bb4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bb6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001bbe:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001bc2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001bc6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001bc8:	6203      	str	r3, [r0, #32]
 8001bca:	e7c0      	b.n	8001b4e <TIM_SlaveTimer_SetConfig+0x2a>
        return HAL_ERROR;
 8001bcc:	2001      	movs	r0, #1
 8001bce:	e7bf      	b.n	8001b50 <TIM_SlaveTimer_SetConfig+0x2c>

08001bd0 <HAL_TIM_SlaveConfigSynchro>:
{
 8001bd0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001bd2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001bd6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	f04f 0302 	mov.w	r3, #2
 8001bde:	d01c      	beq.n	8001c1a <HAL_TIM_SlaveConfigSynchro+0x4a>
 8001be0:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001be2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001be6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001bea:	f7ff ff9b 	bl	8001b24 <TIM_SlaveTimer_SetConfig>
 8001bee:	b130      	cbz	r0, 8001bfe <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 8001bf0:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001bf2:	4628      	mov	r0, r5
      htim->State = HAL_TIM_STATE_READY;
 8001bf4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8001bf8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001bfc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001bfe:	6823      	ldr	r3, [r4, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c06:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c0e:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001c10:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001c14:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8001c18:	e7f0      	b.n	8001bfc <HAL_TIM_SlaveConfigSynchro+0x2c>
  __HAL_LOCK(htim);
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	e7ee      	b.n	8001bfc <HAL_TIM_SlaveConfigSynchro+0x2c>
	...

08001c20 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c20:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	f04f 0302 	mov.w	r3, #2
{
 8001c2a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001c2c:	d01f      	beq.n	8001c6e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c2e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c30:	4d10      	ldr	r5, [pc, #64]	; (8001c74 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001c32:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c36:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8001c38:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001c3a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c3c:	d003      	beq.n	8001c46 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8001c3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c42:	42aa      	cmp	r2, r5
 8001c44:	d103      	bne.n	8001c4e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001c46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001c4a:	684d      	ldr	r5, [r1, #4]
 8001c4c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c4e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c54:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001c56:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c5a:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c5c:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c5e:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c60:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8001c62:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001c64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001c6e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001c70:	bd30      	pop	{r4, r5, pc}
 8001c72:	bf00      	nop
 8001c74:	40010000 	.word	0x40010000

08001c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c78:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c7a:	69c2      	ldr	r2, [r0, #28]
{
 8001c7c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c7e:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c80:	6881      	ldr	r1, [r0, #8]
 8001c82:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c84:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c86:	4301      	orrs	r1, r0
 8001c88:	6960      	ldr	r0, [r4, #20]
 8001c8a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c8c:	489a      	ldr	r0, [pc, #616]	; (8001ef8 <UART_SetConfig+0x280>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c8e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c90:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001c92:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c94:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c96:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c98:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001ca0:	4301      	orrs	r1, r0
 8001ca2:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ca4:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ca6:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001ca8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001caa:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8001cae:	4301      	orrs	r1, r0
 8001cb0:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cb2:	4992      	ldr	r1, [pc, #584]	; (8001efc <UART_SetConfig+0x284>)
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	d118      	bne.n	8001cea <UART_SetConfig+0x72>
 8001cb8:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <UART_SetConfig+0x288>)
 8001cba:	4992      	ldr	r1, [pc, #584]	; (8001f04 <UART_SetConfig+0x28c>)
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	5ccb      	ldrb	r3, [r1, r3]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cc6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cca:	f040 80bd 	bne.w	8001e48 <UART_SetConfig+0x1d0>
  {
    switch (clocksource)
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	f200 80af 	bhi.w	8001e32 <UART_SetConfig+0x1ba>
 8001cd4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001cd8:	00aa0095 	.word	0x00aa0095
 8001cdc:	00ad00f9 	.word	0x00ad00f9
 8001ce0:	00ad0105 	.word	0x00ad0105
 8001ce4:	00ad00ad 	.word	0x00ad00ad
 8001ce8:	010b      	.short	0x010b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cea:	4987      	ldr	r1, [pc, #540]	; (8001f08 <UART_SetConfig+0x290>)
 8001cec:	428b      	cmp	r3, r1
 8001cee:	d106      	bne.n	8001cfe <UART_SetConfig+0x86>
 8001cf0:	4b83      	ldr	r3, [pc, #524]	; (8001f00 <UART_SetConfig+0x288>)
 8001cf2:	4986      	ldr	r1, [pc, #536]	; (8001f0c <UART_SetConfig+0x294>)
 8001cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	e7e2      	b.n	8001cc4 <UART_SetConfig+0x4c>
 8001cfe:	4984      	ldr	r1, [pc, #528]	; (8001f10 <UART_SetConfig+0x298>)
 8001d00:	428b      	cmp	r3, r1
 8001d02:	d118      	bne.n	8001d36 <UART_SetConfig+0xbe>
 8001d04:	4b7e      	ldr	r3, [pc, #504]	; (8001f00 <UART_SetConfig+0x288>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	f000 80e4 	beq.w	8001edc <UART_SetConfig+0x264>
 8001d14:	d802      	bhi.n	8001d1c <UART_SetConfig+0xa4>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0d5      	beq.n	8001cc6 <UART_SetConfig+0x4e>
 8001d1a:	e005      	b.n	8001d28 <UART_SetConfig+0xb0>
 8001d1c:	2b20      	cmp	r3, #32
 8001d1e:	f000 80d1 	beq.w	8001ec4 <UART_SetConfig+0x24c>
 8001d22:	2b30      	cmp	r3, #48	; 0x30
 8001d24:	f000 80e0 	beq.w	8001ee8 <UART_SetConfig+0x270>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d2c:	f000 8081 	beq.w	8001e32 <UART_SetConfig+0x1ba>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001d30:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e0a9      	b.n	8001e8a <UART_SetConfig+0x212>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d36:	4977      	ldr	r1, [pc, #476]	; (8001f14 <UART_SetConfig+0x29c>)
 8001d38:	428b      	cmp	r3, r1
 8001d3a:	d10d      	bne.n	8001d58 <UART_SetConfig+0xe0>
 8001d3c:	4b70      	ldr	r3, [pc, #448]	; (8001f00 <UART_SetConfig+0x288>)
 8001d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d46:	2b40      	cmp	r3, #64	; 0x40
 8001d48:	f000 80c8 	beq.w	8001edc <UART_SetConfig+0x264>
 8001d4c:	d9e3      	bls.n	8001d16 <UART_SetConfig+0x9e>
 8001d4e:	2b80      	cmp	r3, #128	; 0x80
 8001d50:	f000 80b8 	beq.w	8001ec4 <UART_SetConfig+0x24c>
 8001d54:	2bc0      	cmp	r3, #192	; 0xc0
 8001d56:	e7e5      	b.n	8001d24 <UART_SetConfig+0xac>
 8001d58:	496f      	ldr	r1, [pc, #444]	; (8001f18 <UART_SetConfig+0x2a0>)
 8001d5a:	428b      	cmp	r3, r1
 8001d5c:	d110      	bne.n	8001d80 <UART_SetConfig+0x108>
 8001d5e:	4b68      	ldr	r3, [pc, #416]	; (8001f00 <UART_SetConfig+0x288>)
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d6c:	f000 80b6 	beq.w	8001edc <UART_SetConfig+0x264>
 8001d70:	d9d1      	bls.n	8001d16 <UART_SetConfig+0x9e>
 8001d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d76:	f000 80a5 	beq.w	8001ec4 <UART_SetConfig+0x24c>
 8001d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d7e:	e7d1      	b.n	8001d24 <UART_SetConfig+0xac>
 8001d80:	4966      	ldr	r1, [pc, #408]	; (8001f1c <UART_SetConfig+0x2a4>)
 8001d82:	428b      	cmp	r3, r1
 8001d84:	d114      	bne.n	8001db0 <UART_SetConfig+0x138>
 8001d86:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <UART_SetConfig+0x288>)
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d94:	f000 80a2 	beq.w	8001edc <UART_SetConfig+0x264>
 8001d98:	d803      	bhi.n	8001da2 <UART_SetConfig+0x12a>
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1c4      	bne.n	8001d28 <UART_SetConfig+0xb0>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e791      	b.n	8001cc6 <UART_SetConfig+0x4e>
 8001da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001da6:	f000 808d 	beq.w	8001ec4 <UART_SetConfig+0x24c>
 8001daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001dae:	e7b9      	b.n	8001d24 <UART_SetConfig+0xac>
 8001db0:	495b      	ldr	r1, [pc, #364]	; (8001f20 <UART_SetConfig+0x2a8>)
 8001db2:	428b      	cmp	r3, r1
 8001db4:	d113      	bne.n	8001dde <UART_SetConfig+0x166>
 8001db6:	4b52      	ldr	r3, [pc, #328]	; (8001f00 <UART_SetConfig+0x288>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc4:	f000 808a 	beq.w	8001edc <UART_SetConfig+0x264>
 8001dc8:	d803      	bhi.n	8001dd2 <UART_SetConfig+0x15a>
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ac      	bne.n	8001d28 <UART_SetConfig+0xb0>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e779      	b.n	8001cc6 <UART_SetConfig+0x4e>
 8001dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd6:	d075      	beq.n	8001ec4 <UART_SetConfig+0x24c>
 8001dd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001ddc:	e7a2      	b.n	8001d24 <UART_SetConfig+0xac>
 8001dde:	4951      	ldr	r1, [pc, #324]	; (8001f24 <UART_SetConfig+0x2ac>)
 8001de0:	428b      	cmp	r3, r1
 8001de2:	d1a1      	bne.n	8001d28 <UART_SetConfig+0xb0>
 8001de4:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <UART_SetConfig+0x288>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df2:	d073      	beq.n	8001edc <UART_SetConfig+0x264>
 8001df4:	d98f      	bls.n	8001d16 <UART_SetConfig+0x9e>
 8001df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dfa:	d063      	beq.n	8001ec4 <UART_SetConfig+0x24c>
 8001dfc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001e00:	e790      	b.n	8001d24 <UART_SetConfig+0xac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e02:	f7ff fb0b 	bl	800141c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e06:	6861      	ldr	r1, [r4, #4]
 8001e08:	084a      	lsrs	r2, r1, #1
 8001e0a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e12:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e14:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e16:	f1a3 0110 	sub.w	r1, r3, #16
 8001e1a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001e1e:	4291      	cmp	r1, r2
 8001e20:	d90a      	bls.n	8001e38 <UART_SetConfig+0x1c0>
      ret = HAL_ERROR;
 8001e22:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e24:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8001e26:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60

  return ret;
}
 8001e2a:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e2c:	f7ff fb06 	bl	800143c <HAL_RCC_GetPCLK2Freq>
 8001e30:	e7e9      	b.n	8001e06 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8001e32:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e7ee      	b.n	8001e16 <UART_SetConfig+0x19e>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e38:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e3c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8001e40:	6821      	ldr	r1, [r4, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60cb      	str	r3, [r1, #12]
 8001e46:	e7ed      	b.n	8001e24 <UART_SetConfig+0x1ac>
    switch (clocksource)
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	f63f af71 	bhi.w	8001d30 <UART_SetConfig+0xb8>
 8001e4e:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <UART_SetConfig+0x1dc>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001e79 	.word	0x08001e79
 8001e58:	08001e9d 	.word	0x08001e9d
 8001e5c:	08001ea3 	.word	0x08001ea3
 8001e60:	08001d31 	.word	0x08001d31
 8001e64:	08001eb5 	.word	0x08001eb5
 8001e68:	08001d31 	.word	0x08001d31
 8001e6c:	08001d31 	.word	0x08001d31
 8001e70:	08001d31 	.word	0x08001d31
 8001e74:	08001ebb 	.word	0x08001ebb
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e78:	f7ff fad0 	bl	800141c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e7c:	6862      	ldr	r2, [r4, #4]
 8001e7e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001e82:	fbb3 f3f2 	udiv	r3, r3, r2
 8001e86:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001e88:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e8a:	f1a3 0110 	sub.w	r1, r3, #16
 8001e8e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001e92:	4291      	cmp	r1, r2
 8001e94:	d8c5      	bhi.n	8001e22 <UART_SetConfig+0x1aa>
      huart->Instance->BRR = usartdiv;
 8001e96:	6822      	ldr	r2, [r4, #0]
 8001e98:	60d3      	str	r3, [r2, #12]
 8001e9a:	e7c3      	b.n	8001e24 <UART_SetConfig+0x1ac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e9c:	f7ff face 	bl	800143c <HAL_RCC_GetPCLK2Freq>
 8001ea0:	e7ec      	b.n	8001e7c <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ea2:	6860      	ldr	r0, [r4, #4]
 8001ea4:	0843      	lsrs	r3, r0, #1
 8001ea6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001eaa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001eae:	fbb3 f3f0 	udiv	r3, r3, r0
 8001eb2:	e7e8      	b.n	8001e86 <UART_SetConfig+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001eb4:	f7ff f9e8 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 8001eb8:	e7e0      	b.n	8001e7c <UART_SetConfig+0x204>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001eba:	6860      	ldr	r0, [r4, #4]
 8001ebc:	0843      	lsrs	r3, r0, #1
 8001ebe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001ec2:	e7f4      	b.n	8001eae <UART_SetConfig+0x236>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ec4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ec8:	d1eb      	bne.n	8001ea2 <UART_SetConfig+0x22a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001eca:	6860      	ldr	r0, [r4, #4]
 8001ecc:	0843      	lsrs	r3, r0, #1
 8001ece:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8001ed2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ed6:	fbb3 f3f0 	udiv	r3, r3, r0
 8001eda:	e79a      	b.n	8001e12 <UART_SetConfig+0x19a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001edc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ee0:	d1e8      	bne.n	8001eb4 <UART_SetConfig+0x23c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ee2:	f7ff f9d1 	bl	8001288 <HAL_RCC_GetSysClockFreq>
 8001ee6:	e78e      	b.n	8001e06 <UART_SetConfig+0x18e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ee8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001eec:	d1e5      	bne.n	8001eba <UART_SetConfig+0x242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001eee:	6860      	ldr	r0, [r4, #4]
 8001ef0:	0843      	lsrs	r3, r0, #1
 8001ef2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001ef6:	e7ee      	b.n	8001ed6 <UART_SetConfig+0x25e>
 8001ef8:	efff69f3 	.word	0xefff69f3
 8001efc:	40011000 	.word	0x40011000
 8001f00:	40023800 	.word	0x40023800
 8001f04:	08003eb8 	.word	0x08003eb8
 8001f08:	40004400 	.word	0x40004400
 8001f0c:	08003ebc 	.word	0x08003ebc
 8001f10:	40004800 	.word	0x40004800
 8001f14:	40004c00 	.word	0x40004c00
 8001f18:	40005000 	.word	0x40005000
 8001f1c:	40011400 	.word	0x40011400
 8001f20:	40007800 	.word	0x40007800
 8001f24:	40007c00 	.word	0x40007c00

08001f28 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f2a:	07da      	lsls	r2, r3, #31
{
 8001f2c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f2e:	d506      	bpl.n	8001f3e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f30:	6801      	ldr	r1, [r0, #0]
 8001f32:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001f34:	684a      	ldr	r2, [r1, #4]
 8001f36:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001f3a:	4322      	orrs	r2, r4
 8001f3c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f3e:	079c      	lsls	r4, r3, #30
 8001f40:	d506      	bpl.n	8001f50 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f42:	6801      	ldr	r1, [r0, #0]
 8001f44:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001f46:	684a      	ldr	r2, [r1, #4]
 8001f48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f4c:	4322      	orrs	r2, r4
 8001f4e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f50:	0759      	lsls	r1, r3, #29
 8001f52:	d506      	bpl.n	8001f62 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f54:	6801      	ldr	r1, [r0, #0]
 8001f56:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001f58:	684a      	ldr	r2, [r1, #4]
 8001f5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f5e:	4322      	orrs	r2, r4
 8001f60:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f62:	071a      	lsls	r2, r3, #28
 8001f64:	d506      	bpl.n	8001f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f66:	6801      	ldr	r1, [r0, #0]
 8001f68:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001f6a:	684a      	ldr	r2, [r1, #4]
 8001f6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f70:	4322      	orrs	r2, r4
 8001f72:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f74:	06dc      	lsls	r4, r3, #27
 8001f76:	d506      	bpl.n	8001f86 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f78:	6801      	ldr	r1, [r0, #0]
 8001f7a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001f7c:	688a      	ldr	r2, [r1, #8]
 8001f7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f82:	4322      	orrs	r2, r4
 8001f84:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f86:	0699      	lsls	r1, r3, #26
 8001f88:	d506      	bpl.n	8001f98 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f8a:	6801      	ldr	r1, [r0, #0]
 8001f8c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001f8e:	688a      	ldr	r2, [r1, #8]
 8001f90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f94:	4322      	orrs	r2, r4
 8001f96:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f98:	065a      	lsls	r2, r3, #25
 8001f9a:	d510      	bpl.n	8001fbe <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f9c:	6801      	ldr	r1, [r0, #0]
 8001f9e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001fa0:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fa2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fa6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001faa:	ea42 0204 	orr.w	r2, r2, r4
 8001fae:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fb0:	d105      	bne.n	8001fbe <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001fb2:	684a      	ldr	r2, [r1, #4]
 8001fb4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001fb6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001fba:	4322      	orrs	r2, r4
 8001fbc:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001fbe:	061b      	lsls	r3, r3, #24
 8001fc0:	d506      	bpl.n	8001fd0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001fc2:	6802      	ldr	r2, [r0, #0]
 8001fc4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001fc6:	6853      	ldr	r3, [r2, #4]
 8001fc8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6053      	str	r3, [r2, #4]
  }
}
 8001fd0:	bd10      	pop	{r4, pc}

08001fd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd6:	9d06      	ldr	r5, [sp, #24]
 8001fd8:	4604      	mov	r4, r0
 8001fda:	460f      	mov	r7, r1
 8001fdc:	4616      	mov	r6, r2
 8001fde:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fe0:	6821      	ldr	r1, [r4, #0]
 8001fe2:	69ca      	ldr	r2, [r1, #28]
 8001fe4:	ea37 0302 	bics.w	r3, r7, r2
 8001fe8:	bf0c      	ite	eq
 8001fea:	2201      	moveq	r2, #1
 8001fec:	2200      	movne	r2, #0
 8001fee:	42b2      	cmp	r2, r6
 8001ff0:	d001      	beq.n	8001ff6 <UART_WaitOnFlagUntilTimeout+0x24>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	e019      	b.n	800202a <UART_WaitOnFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 8001ff6:	1c6b      	adds	r3, r5, #1
 8001ff8:	d0f3      	beq.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ffa:	f7fe facd 	bl	8000598 <HAL_GetTick>
 8001ffe:	eba0 0008 	sub.w	r0, r0, r8
 8002002:	42a8      	cmp	r0, r5
 8002004:	d801      	bhi.n	800200a <UART_WaitOnFlagUntilTimeout+0x38>
 8002006:	2d00      	cmp	r5, #0
 8002008:	d1ea      	bne.n	8001fe0 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800200a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800200c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002014:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	f022 0201 	bic.w	r2, r2, #1
 800201c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800201e:	2320      	movs	r3, #32
 8002020:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002022:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002024:	2300      	movs	r3, #0
 8002026:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 800202a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800202e <UART_CheckIdleState>:
{
 800202e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002030:	2500      	movs	r5, #0
{
 8002032:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002034:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002036:	f7fe faaf 	bl	8000598 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800203a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800203c:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	0712      	lsls	r2, r2, #28
 8002042:	d407      	bmi.n	8002054 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 8002044:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002046:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002048:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800204a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800204e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8002050:	b003      	add	sp, #12
 8002052:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002054:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002058:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800205c:	4620      	mov	r0, r4
 800205e:	9200      	str	r2, [sp, #0]
 8002060:	462a      	mov	r2, r5
 8002062:	f7ff ffb6 	bl	8001fd2 <UART_WaitOnFlagUntilTimeout>
 8002066:	2800      	cmp	r0, #0
 8002068:	d0ec      	beq.n	8002044 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800206a:	2003      	movs	r0, #3
 800206c:	e7f0      	b.n	8002050 <UART_CheckIdleState+0x22>

0800206e <HAL_UART_Init>:
{
 800206e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002070:	4604      	mov	r4, r0
 8002072:	b340      	cbz	r0, 80020c6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002074:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002076:	b91b      	cbnz	r3, 8002080 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002078:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800207c:	f000 ff4e 	bl	8002f1c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002080:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002082:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002084:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002086:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002088:	6813      	ldr	r3, [r2, #0]
 800208a:	f023 0301 	bic.w	r3, r3, #1
 800208e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002090:	f7ff fdf2 	bl	8001c78 <UART_SetConfig>
 8002094:	2801      	cmp	r0, #1
 8002096:	d016      	beq.n	80020c6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800209a:	b113      	cbz	r3, 80020a2 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800209c:	4620      	mov	r0, r4
 800209e:	f7ff ff43 	bl	8001f28 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80020a4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020b4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	f042 0201 	orr.w	r2, r2, #1
}
 80020bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80020c0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80020c2:	f7ff bfb4 	b.w	800202e <UART_CheckIdleState>
}
 80020c6:	2001      	movs	r0, #1
 80020c8:	bd10      	pop	{r4, pc}

080020ca <HAL_HalfDuplex_Init>:
{
 80020ca:	b510      	push	{r4, lr}
  if (huart == NULL)
 80020cc:	4604      	mov	r4, r0
 80020ce:	b360      	cbz	r0, 800212a <HAL_HalfDuplex_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80020d0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80020d2:	b91b      	cbnz	r3, 80020dc <HAL_HalfDuplex_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80020d4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80020d8:	f000 ff20 	bl	8002f1c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80020dc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020de:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020e0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80020e2:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80020e4:	6813      	ldr	r3, [r2, #0]
 80020e6:	f023 0301 	bic.w	r3, r3, #1
 80020ea:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020ec:	f7ff fdc4 	bl	8001c78 <UART_SetConfig>
 80020f0:	2801      	cmp	r0, #1
 80020f2:	d01a      	beq.n	800212a <HAL_HalfDuplex_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020f6:	b113      	cbz	r3, 80020fe <HAL_HalfDuplex_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80020f8:	4620      	mov	r0, r4
 80020fa:	f7ff ff15 	bl	8001f28 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020fe:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002100:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002108:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002110:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	f042 0208 	orr.w	r2, r2, #8
 8002118:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	f042 0201 	orr.w	r2, r2, #1
}
 8002120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002124:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002126:	f7ff bf82 	b.w	800202e <UART_CheckIdleState>
}
 800212a:	2001      	movs	r0, #1
 800212c:	bd10      	pop	{r4, pc}
	...

08002130 <setLEDcounter>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setLEDcounter(long l) {
	ledCounter = l;
 8002130:	4b01      	ldr	r3, [pc, #4]	; (8002138 <setLEDcounter+0x8>)
 8002132:	6018      	str	r0, [r3, #0]
}
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000008 	.word	0x20000008

0800213c <sleepMS>:
	}
}

void sleepMS(unsigned long delayTimeMS) {
	unsigned long m, n;
	for (n = 0; n < delayTimeMS; n++) {
 800213c:	2300      	movs	r3, #0
 800213e:	4283      	cmp	r3, r0
 8002140:	d100      	bne.n	8002144 <sleepMS+0x8>
		for (m = DELAY_1MS; m; m--) {
			asm volatile ("nop");
		}
	}
}
 8002142:	4770      	bx	lr
 8002144:	4a02      	ldr	r2, [pc, #8]	; (8002150 <sleepMS+0x14>)
			asm volatile ("nop");
 8002146:	bf00      	nop
		for (m = DELAY_1MS; m; m--) {
 8002148:	3a01      	subs	r2, #1
 800214a:	d1fc      	bne.n	8002146 <sleepMS+0xa>
	for (n = 0; n < delayTimeMS; n++) {
 800214c:	3301      	adds	r3, #1
 800214e:	e7f6      	b.n	800213e <sleepMS+0x2>
 8002150:	00023dd3 	.word	0x00023dd3

08002154 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002154:	b570      	push	{r4, r5, r6, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002156:	2414      	movs	r4, #20
void SystemClock_Config(void) {
 8002158:	b0b4      	sub	sp, #208	; 0xd0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800215a:	2100      	movs	r1, #0
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800215c:	2610      	movs	r6, #16
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800215e:	4622      	mov	r2, r4
 8002160:	a809      	add	r0, sp, #36	; 0x24
 8002162:	f001 fe33 	bl	8003dcc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002166:	4622      	mov	r2, r4
 8002168:	2100      	movs	r1, #0
 800216a:	a803      	add	r0, sp, #12
 800216c:	f001 fe2e 	bl	8003dcc <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002170:	2100      	movs	r1, #0
 8002172:	2280      	movs	r2, #128	; 0x80
 8002174:	a814      	add	r0, sp, #80	; 0x50
 8002176:	f001 fe29 	bl	8003dcc <memset>
	__HAL_RCC_PWR_CLK_ENABLE();
 800217a:	4b23      	ldr	r3, [pc, #140]	; (8002208 <SystemClock_Config+0xb4>)
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLM = 8;
 800217c:	2500      	movs	r5, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800217e:	2402      	movs	r4, #2
	__HAL_RCC_PWR_CLK_ENABLE();
 8002180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002182:	a808      	add	r0, sp, #32
	__HAL_RCC_PWR_CLK_ENABLE();
 8002184:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <SystemClock_Config+0xb8>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021a0:	9408      	str	r4, [sp, #32]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a6:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80021a8:	9413      	str	r4, [sp, #76]	; 0x4c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021aa:	9302      	str	r3, [sp, #8]
 80021ac:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80021b4:	2308      	movs	r3, #8
 80021b6:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 80021ba:	23d8      	movs	r3, #216	; 0xd8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021bc:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021c0:	f7fe fece 	bl	8000f60 <HAL_RCC_OscConfig>
		Error_Handler();
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80021c4:	f7fe fe94 	bl	8000ef0 <HAL_PWREx_EnableOverDrive>
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021c8:	230f      	movs	r3, #15
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021ca:	f44f 52a0 	mov.w	r2, #5120	; 0x1400

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80021ce:	2107      	movs	r1, #7
 80021d0:	a803      	add	r0, sp, #12
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d2:	9505      	str	r5, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021d4:	e9cd 3403 	strd	r3, r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80021e0:	f7ff f880 	bl	80012e4 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2
 80021e4:	f44f 438f 	mov.w	r3, #18304	; 0x4780
			| RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4 | RCC_PERIPHCLK_UART5
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
	PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
	PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_SYSCLK;
 80021e8:	2040      	movs	r0, #64	; 0x40
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021ea:	952b      	str	r5, [sp, #172]	; 0xac
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2
 80021ec:	9314      	str	r3, [sp, #80]	; 0x50
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80021ee:	2304      	movs	r3, #4
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80021f0:	e9cd 3624 	strd	r3, r6, [sp, #144]	; 0x90
	PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_SYSCLK;
 80021f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f8:	e9cd 0326 	strd	r0, r3, [sp, #152]	; 0x98
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80021fc:	a814      	add	r0, sp, #80	; 0x50
 80021fe:	f7ff f92d 	bl	800145c <HAL_RCCEx_PeriphCLKConfig>
		Error_Handler();
	}
}
 8002202:	b034      	add	sp, #208	; 0xd0
 8002204:	bd70      	pop	{r4, r5, r6, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40007000 	.word	0x40007000

08002210 <enterBootLoader>:
}

/* USER CODE BEGIN 4 */

// ***********************************************************************************************************************
void enterBootLoader(void) {
 8002210:	b580      	push	{r7, lr}

	GPIO_InitTypeDef pinDefBL;

	__HAL_RCC_GPIOA_CLK_DISABLE();		// not needed
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <enterBootLoader+0x90>)
void enterBootLoader(void) {
 8002214:	b088      	sub	sp, #32
	__HAL_RCC_GPIOC_CLK_ENABLE();		// used for POWER-enable for RPIZW

	pinDefBL.Pin = (PORTC_ENABLE_RPIZW_POWER);
	pinDefBL.Mode = GPIO_MODE_OUTPUT_PP;
	pinDefBL.Pull = GPIO_PULLUP;
	pinDefBL.Speed = GPIO_SPEED_LOW;
 8002216:	2500      	movs	r5, #0
	pinDefBL.Mode = GPIO_MODE_OUTPUT_PP;
 8002218:	2401      	movs	r4, #1
	__HAL_RCC_GPIOA_CLK_DISABLE();		// not needed
 800221a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
void enterBootLoader(void) {
 800221c:	af00      	add	r7, sp, #0
	pinDefBL.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	f44f 7680 	mov.w	r6, #256	; 0x100
	__HAL_RCC_GPIOA_CLK_DISABLE();		// not needed
 8002222:	f022 0201 	bic.w	r2, r2, #1
	HAL_GPIO_Init(GPIOC, &pinDefBL);
 8002226:	481f      	ldr	r0, [pc, #124]	; (80022a4 <enterBootLoader+0x94>)
 8002228:	f107 010c 	add.w	r1, r7, #12
	__HAL_RCC_GPIOA_CLK_DISABLE();		// not needed
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
	__HAL_RCC_GPIOB_CLK_ENABLE();// used for PB10+11 (UART3) and POWER-enable for Servos
 800222e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002230:	f042 0202 	orr.w	r2, r2, #2
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
 8002236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002238:	f002 0202 	and.w	r2, r2, #2
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	687a      	ldr	r2, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// used for POWER-enable for RPIZW
 8002240:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002242:	f042 0204 	orr.w	r2, r2, #4
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	pinDefBL.Pull = GPIO_PULLUP;
 800224a:	617c      	str	r4, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// used for POWER-enable for RPIZW
 800224c:	f003 0304 	and.w	r3, r3, #4
	pinDefBL.Speed = GPIO_SPEED_LOW;
 8002250:	61bd      	str	r5, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// used for POWER-enable for RPIZW
 8002252:	60bb      	str	r3, [r7, #8]
 8002254:	68bb      	ldr	r3, [r7, #8]
	pinDefBL.Mode = GPIO_MODE_OUTPUT_PP;
 8002256:	e9c7 6403 	strd	r6, r4, [r7, #12]
	HAL_GPIO_Init(GPIOC, &pinDefBL);
 800225a:	f7fe fcc9 	bl	8000bf0 <HAL_GPIO_Init>
	PORTC->SET = PORTC_ENABLE_RPIZW_POWER;
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <enterBootLoader+0x98>)

	pinDefBL.Pin = (PORTB_ENABLE_SERVOS_POWER);	// enable the Vreg for Servos
	pinDefBL.Mode = GPIO_MODE_OUTPUT_PP;
	pinDefBL.Pull = GPIO_PULLUP;
	pinDefBL.Speed = GPIO_SPEED_LOW;
	HAL_GPIO_Init(GPIOB, &pinDefBL);
 8002260:	f107 010c 	add.w	r1, r7, #12
 8002264:	4811      	ldr	r0, [pc, #68]	; (80022ac <enterBootLoader+0x9c>)
	PORTC->SET = PORTC_ENABLE_RPIZW_POWER;
 8002266:	811e      	strh	r6, [r3, #8]
	pinDefBL.Pin = (PORTB_ENABLE_SERVOS_POWER);	// enable the Vreg for Servos
 8002268:	f44f 4600 	mov.w	r6, #32768	; 0x8000
	pinDefBL.Speed = GPIO_SPEED_LOW;
 800226c:	e9c7 4505 	strd	r4, r5, [r7, #20]
	pinDefBL.Mode = GPIO_MODE_OUTPUT_PP;
 8002270:	e9c7 6403 	strd	r6, r4, [r7, #12]
	HAL_GPIO_Init(GPIOB, &pinDefBL);
 8002274:	f7fe fcbc 	bl	8000bf0 <HAL_GPIO_Init>
	PORTB->SET = PORTB_ENABLE_SERVOS_POWER;
 8002278:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <enterBootLoader+0xa0>)
 800227a:	811e      	strh	r6, [r3, #8]

	SysTick->CTRL = 0;// at least one of these is required before bootloader call
 800227c:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <enterBootLoader+0xa4>)
 800227e:	601d      	str	r5, [r3, #0]
	SysTick->LOAD = 0;
 8002280:	605d      	str	r5, [r3, #4]
	SysTick->VAL = 0;
 8002282:	609d      	str	r5, [r3, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002284:	f384 8810 	msr	PRIMASK, r4

	__set_PRIMASK(1);				// Disable interrupts

	// fetch the desired stack pointer from address 0x1FF00000 and store as SP
	__ASM volatile ("movw r3, #0x0000\nmovt r3, #0x1FF0\nldr r3, [r3, #0]\nMSR msp, r3\n" : : : "r3", "sp");
 8002288:	f240 0300 	movw	r3, #0
 800228c:	f6c1 73f0 	movt	r3, #8176	; 0x1ff0
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f383 8808 	msr	MSP, r3
	((void (*)(void)) *((uint32_t*) 0x1FF00004))();
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <enterBootLoader+0xa8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4798      	blx	r3
 800229c:	e7fe      	b.n	800229c <enterBootLoader+0x8c>
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020800 	.word	0x40020800
 80022a8:	40020810 	.word	0x40020810
 80022ac:	40020400 	.word	0x40020400
 80022b0:	40020410 	.word	0x40020410
 80022b4:	e000e010 	.word	0xe000e010
 80022b8:	1ff00004 	.word	0x1ff00004

080022bc <main>:
	if ((RCC->CSR) & BIT(29)) {		// are we waking up from a WDT reset?
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <main+0x1c>)
int main(void) {
 80022be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ((RCC->CSR) & BIT(29)) {		// are we waking up from a WDT reset?
 80022c2:	6f5c      	ldr	r4, [r3, #116]	; 0x74
int main(void) {
 80022c4:	b097      	sub	sp, #92	; 0x5c
	if ((RCC->CSR) & BIT(29)) {		// are we waking up from a WDT reset?
 80022c6:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
 80022ca:	d007      	beq.n	80022dc <main+0x20>
		RCC->CSR |= BIT(24);// clear reset flags (memory of reset source) (so next time we're not ending here)
 80022cc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80022ce:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80022d2:	675a      	str	r2, [r3, #116]	; 0x74
		enterBootLoader();// start boot loader, so we can update software if needed!
 80022d4:	f7ff ff9c 	bl	8002210 <enterBootLoader>
 80022d8:	40023800 	.word	0x40023800
	HAL_Init();
 80022dc:	f7fe f944 	bl	8000568 <HAL_Init>
	SystemClock_Config();
 80022e0:	f7ff ff38 	bl	8002154 <SystemClock_Config>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022e8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;
 80022ec:	4bcd      	ldr	r3, [pc, #820]	; (8002624 <main+0x368>)
 80022ee:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80022f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022f6:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 80022fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022fe:	f3bf 8f6f 	isb	sy
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002308:	615a      	str	r2, [r3, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800230a:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800230e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002312:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002316:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800231a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800231e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002322:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002326:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800232a:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800232e:	07a5      	lsls	r5, r4, #30
 8002330:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002332:	ea02 0c06 	and.w	ip, r2, r6
 8002336:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002338:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800233a:	ea4c 0700 	orr.w	r7, ip, r0
      } while (ways-- != 0U);
 800233e:	3901      	subs	r1, #1
 8002340:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002344:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8002348:	1c4f      	adds	r7, r1, #1
 800234a:	d1f6      	bne.n	800233a <main+0x7e>
 800234c:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 800234e:	f112 0f20 	cmn.w	r2, #32
 8002352:	d1ee      	bne.n	8002332 <main+0x76>
 8002354:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002358:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800235c:	2200      	movs	r2, #0
 800235e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002362:	f3bf 8f4f 	dsb	sy
    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800236c:	615a      	str	r2, [r3, #20]
 800236e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002376:	f643 74e0 	movw	r4, #16352	; 0x3fe0
 800237a:	4daa      	ldr	r5, [pc, #680]	; (8002624 <main+0x368>)
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800237c:	f3c3 01c9 	ubfx	r1, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002380:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002384:	0788      	lsls	r0, r1, #30
 8002386:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002388:	ea03 0704 	and.w	r7, r3, r4
 800238c:	4602      	mov	r2, r0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800238e:	9101      	str	r1, [sp, #4]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002390:	ea47 0602 	orr.w	r6, r7, r2
 8002394:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
 8002398:	f8c5 6274 	str.w	r6, [r5, #628]	; 0x274
      } while (ways-- != 0U);
 800239c:	9e01      	ldr	r6, [sp, #4]
 800239e:	3e01      	subs	r6, #1
 80023a0:	9601      	str	r6, [sp, #4]
 80023a2:	3601      	adds	r6, #1
 80023a4:	d1f4      	bne.n	8002390 <main+0xd4>
 80023a6:	3b20      	subs	r3, #32
    } while(sets-- != 0U);
 80023a8:	f113 0f20 	cmn.w	r3, #32
 80023ac:	d1ec      	bne.n	8002388 <main+0xcc>
 80023ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023b2:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80023b6:	4d9c      	ldr	r5, [pc, #624]	; (8002628 <main+0x36c>)
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80023b8:	2214      	movs	r2, #20
 80023ba:	2100      	movs	r1, #0
 80023bc:	a811      	add	r0, sp, #68	; 0x44
 80023be:	f001 fd05 	bl	8003dcc <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80023c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_GPIO_WritePin(GPIOC, GPIO_ADC_Supply_GND_Pin | GPIO_ADC_2_GND_Pin,
 80023c4:	2200      	movs	r2, #0
 80023c6:	210c      	movs	r1, #12
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80023c8:	f043 0304 	orr.w	r3, r3, #4
	HAL_GPIO_WritePin(GPIOC, GPIO_ADC_Supply_GND_Pin | GPIO_ADC_2_GND_Pin,
 80023cc:	4897      	ldr	r0, [pc, #604]	; (800262c <main+0x370>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2400      	movs	r4, #0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023d0:	f04f 080c 	mov.w	r8, #12
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80023d4:	632b      	str	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	2601      	movs	r6, #1
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80023d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	GPIO_InitStruct.Pin = GPIO_enable_Vreg_RPIZW_Pin;
 80023da:	f44f 7780 	mov.w	r7, #256	; 0x100
	huart3.Init.BaudRate = 1000000;
 80023de:	f8df 928c 	ldr.w	r9, [pc, #652]	; 800266c <main+0x3b0>
	hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80023e2:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80023e6:	f003 0304 	and.w	r3, r3, #4
	hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80023ea:	f44f 3b00 	mov.w	fp, #131072	; 0x20000
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80023ee:	9306      	str	r3, [sp, #24]
 80023f0:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	632b      	str	r3, [r5, #48]	; 0x30
 80023fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	9307      	str	r3, [sp, #28]
 8002402:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002404:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002406:	f043 0302 	orr.w	r3, r3, #2
 800240a:	632b      	str	r3, [r5, #48]	; 0x30
 800240c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	9308      	str	r3, [sp, #32]
 8002414:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002416:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	632b      	str	r3, [r5, #48]	; 0x30
 800241e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	9309      	str	r3, [sp, #36]	; 0x24
 8002426:	9b09      	ldr	r3, [sp, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOC, GPIO_ADC_Supply_GND_Pin | GPIO_ADC_2_GND_Pin,
 8002428:	f7fe fcc0 	bl	8000dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_out_LED_GPIO_Port, GPIO_out_LED_Pin, GPIO_PIN_RESET);
 800242c:	2200      	movs	r2, #0
 800242e:	2102      	movs	r1, #2
 8002430:	487f      	ldr	r0, [pc, #508]	; (8002630 <main+0x374>)
 8002432:	f7fe fcbb 	bl	8000dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO____U3_RTS_Pin | GPIO_enable_Vreg_Servo_Pin,
 8002436:	2201      	movs	r2, #1
 8002438:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800243c:	487d      	ldr	r0, [pc, #500]	; (8002634 <main+0x378>)
 800243e:	f7fe fcb5 	bl	8000dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO_enable_Vreg_RPIZW_GPIO_Port,
 8002442:	2201      	movs	r2, #1
 8002444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002448:	4878      	ldr	r0, [pc, #480]	; (800262c <main+0x370>)
 800244a:	f7fe fcaf 	bl	8000dac <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800244e:	2311      	movs	r3, #17
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002450:	a911      	add	r1, sp, #68	; 0x44
 8002452:	4876      	ldr	r0, [pc, #472]	; (800262c <main+0x370>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002454:	e9cd 8311 	strd	r8, r3, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002458:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245c:	f7fe fbc8 	bl	8000bf0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIO_out_LED_GPIO_Port, &GPIO_InitStruct);
 8002462:	a911      	add	r1, sp, #68	; 0x44
 8002464:	4872      	ldr	r0, [pc, #456]	; (8002630 <main+0x374>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002466:	e9cd 3611 	strd	r3, r6, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	HAL_GPIO_Init(GPIO_out_LED_GPIO_Port, &GPIO_InitStruct);
 800246e:	f7fe fbbf 	bl	8000bf0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_15;
 8002472:	f248 0308 	movw	r3, #32776	; 0x8008
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	a911      	add	r1, sp, #68	; 0x44
 8002478:	486d      	ldr	r0, [pc, #436]	; (8002630 <main+0x374>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	9413      	str	r4, [sp, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247c:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f7fe fbb6 	bl	8000bf0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_Nose_Bumper_Pin | GPIO_Head_Padding_Pin;
 8002484:	23a0      	movs	r3, #160	; 0xa0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	a911      	add	r1, sp, #68	; 0x44
 8002488:	4869      	ldr	r0, [pc, #420]	; (8002630 <main+0x374>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800248a:	9613      	str	r6, [sp, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800248c:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002490:	f7fe fbae 	bl	8000bf0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PCB_routing_dummy_Pin
 8002494:	f241 0309 	movw	r3, #4105	; 0x1009
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	a911      	add	r1, sp, #68	; 0x44
 800249a:	4866      	ldr	r0, [pc, #408]	; (8002634 <main+0x378>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	9413      	str	r4, [sp, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249e:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a2:	f7fe fba5 	bl	8000bf0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO____U3_RTS_Pin | GPIO_enable_Vreg_Servo_Pin;
 80024a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024aa:	a911      	add	r1, sp, #68	; 0x44
 80024ac:	4861      	ldr	r0, [pc, #388]	; (8002634 <main+0x378>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ae:	e9cd 3611 	strd	r3, r6, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	f7fe fb9b 	bl	8000bf0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIO_enable_Vreg_RPIZW_GPIO_Port, &GPIO_InitStruct);
 80024ba:	a911      	add	r1, sp, #68	; 0x44
 80024bc:	485b      	ldr	r0, [pc, #364]	; (800262c <main+0x370>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	e9cd 7611 	strd	r7, r6, [sp, #68]	; 0x44
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	HAL_GPIO_Init(GPIO_enable_Vreg_RPIZW_GPIO_Port, &GPIO_InitStruct);
 80024c6:	f7fe fb93 	bl	8000bf0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ce:	a911      	add	r1, sp, #68	; 0x44
 80024d0:	4856      	ldr	r0, [pc, #344]	; (800262c <main+0x370>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	9413      	str	r4, [sp, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d4:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d8:	f7fe fb8a 	bl	8000bf0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024dc:	2304      	movs	r3, #4
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024de:	a911      	add	r1, sp, #68	; 0x44
 80024e0:	4855      	ldr	r0, [pc, #340]	; (8002638 <main+0x37c>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	9413      	str	r4, [sp, #76]	; 0x4c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e4:	e9cd 3411 	strd	r3, r4, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024e8:	f7fe fb82 	bl	8000bf0 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80024ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80024ee:	4622      	mov	r2, r4
 80024f0:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 80024f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80024f6:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 80024f8:	632b      	str	r3, [r5, #48]	; 0x30
 80024fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	pinDefU3.Pin = (PORTB_USART3_RTS);
 80024fc:	f44f 4580 	mov.w	r5, #16384	; 0x4000
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002504:	9305      	str	r3, [sp, #20]
 8002506:	9b05      	ldr	r3, [sp, #20]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002508:	f7fe f9a0 	bl	800084c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800250c:	200b      	movs	r0, #11
 800250e:	f7fe f9cf 	bl	80008b0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002512:	4622      	mov	r2, r4
 8002514:	4621      	mov	r1, r4
 8002516:	4640      	mov	r0, r8
 8002518:	f7fe f998 	bl	800084c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800251c:	4640      	mov	r0, r8
 800251e:	f7fe f9c7 	bl	80008b0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002522:	4622      	mov	r2, r4
 8002524:	4621      	mov	r1, r4
 8002526:	200d      	movs	r0, #13
 8002528:	f7fe f990 	bl	800084c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800252c:	200d      	movs	r0, #13
 800252e:	f7fe f9bf 	bl	80008b0 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002532:	4622      	mov	r2, r4
 8002534:	4621      	mov	r1, r4
 8002536:	2010      	movs	r0, #16
 8002538:	f7fe f988 	bl	800084c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800253c:	2010      	movs	r0, #16
 800253e:	f7fe f9b7 	bl	80008b0 <HAL_NVIC_EnableIRQ>
	huart3.Instance = USART3;
 8002542:	483e      	ldr	r0, [pc, #248]	; (800263c <main+0x380>)
	huart3.Init.BaudRate = 1000000;
 8002544:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <main+0x384>)
 8002546:	e9c0 9300 	strd	r9, r3, [r0]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_CTS;
 800254a:	f44f 7300 	mov.w	r3, #512	; 0x200
	huart3.Init.Mode = UART_MODE_TX_RX;
 800254e:	e9c0 4804 	strd	r4, r8, [r0, #16]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002552:	e9c0 3406 	strd	r3, r4, [r0, #24]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002556:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800255a:	e9c0 4408 	strd	r4, r4, [r0, #32]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800255e:	f7ff fd86 	bl	800206e <HAL_UART_Init>
	HAL_GPIO_Init(GPIOB, &pinDefU3);
 8002562:	a911      	add	r1, sp, #68	; 0x44
 8002564:	4833      	ldr	r0, [pc, #204]	; (8002634 <main+0x378>)
	pinDefU3.Mode = GPIO_MODE_OUTPUT_PP;
 8002566:	e9cd 5611 	strd	r5, r6, [sp, #68]	; 0x44
	pinDefU3.Speed = GPIO_SPEED_LOW;
 800256a:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	HAL_GPIO_Init(GPIOB, &pinDefU3);
 800256e:	f7fe fb3f 	bl	8000bf0 <HAL_GPIO_Init>
	PORTB->CLR = PORTB_USART3_RTS;	// set RTS low (i.e. allow incoming data)
 8002572:	4a34      	ldr	r2, [pc, #208]	; (8002644 <main+0x388>)
	hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002574:	4934      	ldr	r1, [pc, #208]	; (8002648 <main+0x38c>)
	PORTB->CLR = PORTB_USART3_RTS;	// set RTS low (i.e. allow incoming data)
 8002576:	8155      	strh	r5, [r2, #10]
	hdma_usart3_rx.Instance = DMA1_Stream1;
 8002578:	4d34      	ldr	r5, [pc, #208]	; (800264c <main+0x390>)
	hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800257a:	e9c5 1a00 	strd	r1, sl, [r5]
	hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800257e:	f44f 6180 	mov.w	r1, #1024	; 0x400
	HAL_DMA_Init(&hdma_usart3_rx);							// initialize DMA
 8002582:	4628      	mov	r0, r5
	hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002584:	e9c5 1404 	strd	r1, r4, [r5, #16]
	hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002588:	e9c5 4706 	strd	r4, r7, [r5, #24]
	hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800258c:	e9c5 b408 	strd	fp, r4, [r5, #32]
	hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002590:	e9c5 4402 	strd	r4, r4, [r5, #8]
	hdma_usart3_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002594:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
	HAL_DMA_Init(&hdma_usart3_rx);							// initialize DMA
 8002598:	f7fe f9c4 	bl	8000924 <HAL_DMA_Init>
	USART3->CR3 |= USART_CR3_DMAR;					// enable UART3 receive DMA
 800259c:	f8d9 3008 	ldr.w	r3, [r9, #8]
	HAL_DMA_Start(&hdma_usart3_rx, (uint32_t) (&(USART3->RDR)),
 80025a0:	4a2b      	ldr	r2, [pc, #172]	; (8002650 <main+0x394>)
 80025a2:	4628      	mov	r0, r5
	USART3->CR3 |= USART_CR3_DMAR;					// enable UART3 receive DMA
 80025a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	HAL_DMA_Start(&hdma_usart3_rx, (uint32_t) (&(USART3->RDR)),
 80025a8:	492a      	ldr	r1, [pc, #168]	; (8002654 <main+0x398>)
	hadc1.Instance = ADC1;
 80025aa:	4d2b      	ldr	r5, [pc, #172]	; (8002658 <main+0x39c>)
	USART3->CR3 |= USART_CR3_DMAR;					// enable UART3 receive DMA
 80025ac:	f8c9 3008 	str.w	r3, [r9, #8]
	HAL_DMA_Start(&hdma_usart3_rx, (uint32_t) (&(USART3->RDR)),
 80025b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025b4:	f7fe fa34 	bl	8000a20 <HAL_DMA_Start>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80025b8:	2210      	movs	r2, #16
 80025ba:	4621      	mov	r1, r4
 80025bc:	a811      	add	r0, sp, #68	; 0x44
 80025be:	f001 fc05 	bl	8003dcc <memset>
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80025c2:	4926      	ldr	r1, [pc, #152]	; (800265c <main+0x3a0>)
 80025c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80025c8:	4628      	mov	r0, r5
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80025ca:	60ac      	str	r4, [r5, #8]
	huart4.Instance = UART4;
 80025cc:	f509 6980 	add.w	r9, r9, #1024	; 0x400
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80025d0:	612c      	str	r4, [r5, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80025d2:	61ac      	str	r4, [r5, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80025d4:	f885 4020 	strb.w	r4, [r5, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025d8:	62ec      	str	r4, [r5, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025da:	60ec      	str	r4, [r5, #12]
	hadc1.Init.NbrOfConversion = 1;
 80025dc:	61ee      	str	r6, [r5, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80025de:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025e2:	616e      	str	r6, [r5, #20]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80025e4:	e9c5 1300 	strd	r1, r3, [r5]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025e8:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <main+0x3a4>)
 80025ea:	62ab      	str	r3, [r5, #40]	; 0x28
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80025ec:	f7fd ffda 	bl	80005a4 <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_10;
 80025f0:	210a      	movs	r1, #10
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80025f2:	4628      	mov	r0, r5
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025f4:	9413      	str	r4, [sp, #76]	; 0x4c
	hdma_uart4_rx.Instance = DMA1_Stream2;
 80025f6:	4d1b      	ldr	r5, [pc, #108]	; (8002664 <main+0x3a8>)
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80025f8:	e9cd 1611 	strd	r1, r6, [sp, #68]	; 0x44
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80025fc:	a911      	add	r1, sp, #68	; 0x44
 80025fe:	f7fe f877 	bl	80006f0 <HAL_ADC_ConfigChannel>
	huart4.Instance = UART4;
 8002602:	4819      	ldr	r0, [pc, #100]	; (8002668 <main+0x3ac>)
	huart4.Init.BaudRate = 1000000;
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <main+0x384>)
	huart4.Instance = UART4;
 8002606:	f8c0 9000 	str.w	r9, [r0]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800260a:	6244      	str	r4, [r0, #36]	; 0x24
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800260c:	e9c0 3401 	strd	r3, r4, [r0, #4]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002610:	e9c0 8405 	strd	r8, r4, [r0, #20]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002614:	e9c0 4403 	strd	r4, r4, [r0, #12]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002618:	e9c0 4407 	strd	r4, r4, [r0, #28]
	if (HAL_HalfDuplex_Init(&huart4) != HAL_OK) {
 800261c:	f7ff fd55 	bl	80020ca <HAL_HalfDuplex_Init>
 8002620:	e026      	b.n	8002670 <main+0x3b4>
 8002622:	bf00      	nop
 8002624:	e000ed00 	.word	0xe000ed00
 8002628:	40023800 	.word	0x40023800
 800262c:	40020800 	.word	0x40020800
 8002630:	40020000 	.word	0x40020000
 8002634:	40020400 	.word	0x40020400
 8002638:	40020c00 	.word	0x40020c00
 800263c:	2000036c 	.word	0x2000036c
 8002640:	000f4240 	.word	0x000f4240
 8002644:	40020410 	.word	0x40020410
 8002648:	40026028 	.word	0x40026028
 800264c:	2000030c 	.word	0x2000030c
 8002650:	20017000 	.word	0x20017000
 8002654:	40004824 	.word	0x40004824
 8002658:	200004f8 	.word	0x200004f8
 800265c:	40012000 	.word	0x40012000
 8002660:	0f000001 	.word	0x0f000001
 8002664:	2000024c 	.word	0x2000024c
 8002668:	20000540 	.word	0x20000540
 800266c:	40004800 	.word	0x40004800
	hdma_uart4_rx.Instance = DMA1_Stream2;
 8002670:	49b1      	ldr	r1, [pc, #708]	; (8002938 <main+0x67c>)
	HAL_DMA_Init(&hdma_uart4_rx);							// initialize DMA
 8002672:	4628      	mov	r0, r5
	hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002674:	e9c5 1a00 	strd	r1, sl, [r5]
	hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002678:	f44f 6180 	mov.w	r1, #1024	; 0x400
	hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800267c:	e9c5 4706 	strd	r4, r7, [r5, #24]
	hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002680:	e9c5 1404 	strd	r1, r4, [r5, #16]
	hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002684:	e9c5 b408 	strd	fp, r4, [r5, #32]
	hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002688:	e9c5 4402 	strd	r4, r4, [r5, #8]
	hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800268c:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
	HAL_DMA_Init(&hdma_uart4_rx);							// initialize DMA
 8002690:	f7fe f948 	bl	8000924 <HAL_DMA_Init>
	UART4->CR3 |= USART_CR3_DMAR;					// enable UART4 receive DMA
 8002694:	f8d9 3008 	ldr.w	r3, [r9, #8]
	HAL_DMA_Start(&hdma_uart4_rx, (uint32_t) (&(UART4->RDR)),
 8002698:	4aa8      	ldr	r2, [pc, #672]	; (800293c <main+0x680>)
 800269a:	4628      	mov	r0, r5
	UART4->CR3 |= USART_CR3_DMAR;					// enable UART4 receive DMA
 800269c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	HAL_DMA_Start(&hdma_uart4_rx, (uint32_t) (&(UART4->RDR)),
 80026a0:	49a7      	ldr	r1, [pc, #668]	; (8002940 <main+0x684>)
	hdma_uart5_rx.Instance = DMA1_Stream0;
 80026a2:	4da8      	ldr	r5, [pc, #672]	; (8002944 <main+0x688>)
	UART4->CR3 |= USART_CR3_DMAR;					// enable UART4 receive DMA
 80026a4:	f8c9 3008 	str.w	r3, [r9, #8]
	HAL_DMA_Start(&hdma_uart4_rx, (uint32_t) (&(UART4->RDR)),
 80026a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ac:	f7fe f9b8 	bl	8000a20 <HAL_DMA_Start>
	huart5.Instance = UART5;
 80026b0:	48a5      	ldr	r0, [pc, #660]	; (8002948 <main+0x68c>)
 80026b2:	4ba6      	ldr	r3, [pc, #664]	; (800294c <main+0x690>)
	hdma_uart5_rx.Instance = DMA1_Stream0;
 80026b4:	f509 3905 	add.w	r9, r9, #136192	; 0x21400
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026b8:	6244      	str	r4, [r0, #36]	; 0x24
	huart5.Instance = UART5;
 80026ba:	6003      	str	r3, [r0, #0]
	hdma_uart5_rx.Instance = DMA1_Stream0;
 80026bc:	f109 0910 	add.w	r9, r9, #16
	huart5.Instance = UART5;
 80026c0:	9302      	str	r3, [sp, #8]
	huart5.Init.BaudRate = 1000000;
 80026c2:	4ba3      	ldr	r3, [pc, #652]	; (8002950 <main+0x694>)
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c4:	e9c0 8405 	strd	r8, r4, [r0, #20]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80026c8:	e9c0 3401 	strd	r3, r4, [r0, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 80026cc:	e9c0 4403 	strd	r4, r4, [r0, #12]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d0:	e9c0 4407 	strd	r4, r4, [r0, #28]
	if (HAL_HalfDuplex_Init(&huart5) != HAL_OK) {
 80026d4:	f7ff fcf9 	bl	80020ca <HAL_HalfDuplex_Init>
	hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
	HAL_DMA_Init(&hdma_uart5_rx);							// initialize DMA
 80026dc:	4628      	mov	r0, r5
	hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026de:	e9c5 1404 	strd	r1, r4, [r5, #16]
	hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80026e2:	e9c5 4706 	strd	r4, r7, [r5, #24]
	hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026e6:	e9c5 b408 	strd	fp, r4, [r5, #32]
	hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80026ea:	e9c5 9a00 	strd	r9, sl, [r5]
	hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ee:	e9c5 4402 	strd	r4, r4, [r5, #8]
	hdma_uart5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80026f2:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
	HAL_DMA_Init(&hdma_uart5_rx);							// initialize DMA
 80026f6:	f7fe f915 	bl	8000924 <HAL_DMA_Init>
	UART5->CR3 |= USART_CR3_DMAR;					// enable UART5 receive DMA
 80026fa:	9b02      	ldr	r3, [sp, #8]
	HAL_DMA_Start(&hdma_uart5_rx, (uint32_t) (&(UART5->RDR)),
 80026fc:	4995      	ldr	r1, [pc, #596]	; (8002954 <main+0x698>)
 80026fe:	4628      	mov	r0, r5
	UART5->CR3 |= USART_CR3_DMAR;					// enable UART5 receive DMA
 8002700:	689a      	ldr	r2, [r3, #8]
	hdma_usart2_rx.Instance = DMA1_Stream5;
 8002702:	4d95      	ldr	r5, [pc, #596]	; (8002958 <main+0x69c>)
	UART5->CR3 |= USART_CR3_DMAR;					// enable UART5 receive DMA
 8002704:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002708:	609a      	str	r2, [r3, #8]
	HAL_DMA_Start(&hdma_uart5_rx, (uint32_t) (&(UART5->RDR)),
 800270a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800270e:	4a93      	ldr	r2, [pc, #588]	; (800295c <main+0x6a0>)
 8002710:	f7fe f986 	bl	8000a20 <HAL_DMA_Start>
	huart2.Instance = USART2;
 8002714:	4892      	ldr	r0, [pc, #584]	; (8002960 <main+0x6a4>)
 8002716:	4b93      	ldr	r3, [pc, #588]	; (8002964 <main+0x6a8>)
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002718:	6244      	str	r4, [r0, #36]	; 0x24
	huart2.Instance = USART2;
 800271a:	6003      	str	r3, [r0, #0]
 800271c:	9302      	str	r3, [sp, #8]
	huart2.Init.BaudRate = 1000000;
 800271e:	4b8c      	ldr	r3, [pc, #560]	; (8002950 <main+0x694>)
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002720:	e9c0 8405 	strd	r8, r4, [r0, #20]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002724:	e9c0 3401 	strd	r3, r4, [r0, #4]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002728:	e9c0 4403 	strd	r4, r4, [r0, #12]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800272c:	e9c0 4407 	strd	r4, r4, [r0, #28]
	hdma_usart2_rx.Instance = DMA1_Stream5;
 8002730:	f8df 8258 	ldr.w	r8, [pc, #600]	; 800298c <main+0x6d0>
	if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) {
 8002734:	f7ff fcc9 	bl	80020ca <HAL_HalfDuplex_Init>
	hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002738:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_DMA_Init(&hdma_usart2_rx);							// initialize DMA
 800273c:	4628      	mov	r0, r5
	hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273e:	e9c5 3404 	strd	r3, r4, [r5, #16]
	hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002742:	e9c5 4706 	strd	r4, r7, [r5, #24]
	hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002746:	e9c5 b408 	strd	fp, r4, [r5, #32]
	hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800274a:	e9c5 8a00 	strd	r8, sl, [r5]
	hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800274e:	e9c5 4402 	strd	r4, r4, [r5, #8]
	hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002752:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
	HAL_DMA_Init(&hdma_usart2_rx);							// initialize DMA
 8002756:	f7fe f8e5 	bl	8000924 <HAL_DMA_Init>
	USART2->CR3 |= USART_CR3_DMAR;					// enable UART2 receive DMA
 800275a:	9b02      	ldr	r3, [sp, #8]
	hi2c1.Instance = I2C1;
 800275c:	f8df a230 	ldr.w	sl, [pc, #560]	; 8002990 <main+0x6d4>
	HAL_DMA_Start(&hdma_usart2_rx, (uint32_t) (&(USART2->RDR)),
 8002760:	4628      	mov	r0, r5
	USART2->CR3 |= USART_CR3_DMAR;					// enable UART2 receive DMA
 8002762:	689a      	ldr	r2, [r3, #8]
	HAL_DMA_Start(&hdma_usart2_rx, (uint32_t) (&(USART2->RDR)),
 8002764:	4980      	ldr	r1, [pc, #512]	; (8002968 <main+0x6ac>)
	USART2->CR3 |= USART_CR3_DMAR;					// enable UART2 receive DMA
 8002766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
	hi2c1.Init.Timing = 0x20404768;
 800276a:	4d80      	ldr	r5, [pc, #512]	; (800296c <main+0x6b0>)
	htim5.Init.Prescaler = 54000;
 800276c:	f8df b224 	ldr.w	fp, [pc, #548]	; 8002994 <main+0x6d8>
	USART2->CR3 |= USART_CR3_DMAR;					// enable UART2 receive DMA
 8002770:	609a      	str	r2, [r3, #8]
	HAL_DMA_Start(&hdma_usart2_rx, (uint32_t) (&(USART2->RDR)),
 8002772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002776:	4a7e      	ldr	r2, [pc, #504]	; (8002970 <main+0x6b4>)
 8002778:	f7fe f952 	bl	8000a20 <HAL_DMA_Start>
	hi2c1.Init.Timing = 0x20404768;
 800277c:	4b7d      	ldr	r3, [pc, #500]	; (8002974 <main+0x6b8>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800277e:	4650      	mov	r0, sl
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002780:	f8ca 4020 	str.w	r4, [sl, #32]
	hi2c1.Init.Timing = 0x20404768;
 8002784:	e9ca 5300 	strd	r5, r3, [sl]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002788:	e9ca 4602 	strd	r4, r6, [sl, #8]
	hi2c1.Init.OwnAddress2 = 0;
 800278c:	e9ca 4404 	strd	r4, r4, [sl, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002790:	e9ca 4406 	strd	r4, r4, [sl, #24]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002794:	f7fe fb0f 	bl	8000db6 <HAL_I2C_Init>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002798:	4621      	mov	r1, r4
 800279a:	4650      	mov	r0, sl
 800279c:	f7fe fb5c 	bl	8000e58 <HAL_I2CEx_ConfigAnalogFilter>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80027a0:	4621      	mov	r1, r4
 80027a2:	4650      	mov	r0, sl
	htim5.Instance = TIM5;
 80027a4:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 8002998 <main+0x6dc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80027a8:	f7fe fb7c 	bl	8000ea4 <HAL_I2CEx_ConfigDigitalFilter>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80027ac:	4621      	mov	r1, r4
 80027ae:	2210      	movs	r2, #16
 80027b0:	a80d      	add	r0, sp, #52	; 0x34
 80027b2:	f001 fb0b 	bl	8003dcc <memset>
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80027b6:	2214      	movs	r2, #20
 80027b8:	4621      	mov	r1, r4
 80027ba:	a811      	add	r0, sp, #68	; 0x44
 80027bc:	f001 fb06 	bl	8003dcc <memset>
	htim5.Init.Prescaler = 54000;
 80027c0:	f24d 23f0 	movw	r3, #54000	; 0xd2f0
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80027c4:	4650      	mov	r0, sl
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80027c6:	940c      	str	r4, [sp, #48]	; 0x30
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c8:	f8ca 4008 	str.w	r4, [sl, #8]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027cc:	f8ca 4018 	str.w	r4, [sl, #24]
	htim5.Init.Prescaler = 54000;
 80027d0:	e9ca b300 	strd	fp, r3, [sl]
	htim5.Init.Period = 0xffffffff;
 80027d4:	9b01      	ldr	r3, [sp, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80027d6:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027da:	e9ca 3403 	strd	r3, r4, [sl, #12]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80027de:	f7ff f8e9 	bl	80019b4 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80027e6:	a90d      	add	r1, sp, #52	; 0x34
 80027e8:	4650      	mov	r0, sl
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ea:	930d      	str	r3, [sp, #52]	; 0x34
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80027ec:	f7ff f906 	bl	80019fc <HAL_TIM_ConfigClockSource>
	if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK) {
 80027f0:	a911      	add	r1, sp, #68	; 0x44
 80027f2:	4650      	mov	r0, sl
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80027f4:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
	if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK) {
 80027f8:	f7ff f9ea 	bl	8001bd0 <HAL_TIM_SlaveConfigSynchro>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80027fc:	a90a      	add	r1, sp, #40	; 0x28
 80027fe:	4650      	mov	r0, sl
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002800:	940a      	str	r4, [sp, #40]	; 0x28
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002802:	940c      	str	r4, [sp, #48]	; 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002804:	f7ff fa0c 	bl	8001c20 <HAL_TIMEx_MasterConfigSynchronization>
	HAL_GPIO_Init(GPIOC, &pinDefML);
 8002808:	a911      	add	r1, sp, #68	; 0x44
 800280a:	485b      	ldr	r0, [pc, #364]	; (8002978 <main+0x6bc>)
	pinDefML.Mode = GPIO_MODE_OUTPUT_PP;
 800280c:	e9cd 7611 	strd	r7, r6, [sp, #68]	; 0x44
	pinDefML.Speed = GPIO_SPEED_LOW;
 8002810:	e9cd 6413 	strd	r6, r4, [sp, #76]	; 0x4c
	HAL_GPIO_Init(GPIOC, &pinDefML);
 8002814:	f7fe f9ec 	bl	8000bf0 <HAL_GPIO_Init>
	PORTC->SET = PORTC_ENABLE_RPIZW_POWER;
 8002818:	4b58      	ldr	r3, [pc, #352]	; (800297c <main+0x6c0>)
	HAL_GPIO_Init(GPIOB, &pinDefML);
 800281a:	a911      	add	r1, sp, #68	; 0x44
 800281c:	4858      	ldr	r0, [pc, #352]	; (8002980 <main+0x6c4>)
	PORTC->SET = PORTC_ENABLE_RPIZW_POWER;
 800281e:	811f      	strh	r7, [r3, #8]
	pinDefML.Pin = (PORTB_ENABLE_SERVOS_POWER);	// enable the Vreg for Servos
 8002820:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	pinDefML.Speed = GPIO_SPEED_LOW;
 8002824:	e9cd 6413 	strd	r6, r4, [sp, #76]	; 0x4c
	pinDefML.Mode = GPIO_MODE_OUTPUT_PP;
 8002828:	e9cd 7611 	strd	r7, r6, [sp, #68]	; 0x44
	HAL_GPIO_Init(GPIOB, &pinDefML);
 800282c:	f7fe f9e0 	bl	8000bf0 <HAL_GPIO_Init>
	PORTB->SET = PORTB_ENABLE_SERVOS_POWER;
 8002830:	4a54      	ldr	r2, [pc, #336]	; (8002984 <main+0x6c8>)
 8002832:	8117      	strh	r7, [r2, #8]
	uartShowVersion();
 8002834:	f000 ffce 	bl	80037d4 <uartShowVersion>
	systemTimeHalfMS = 0;		// set System Time (Timer 5: TIM5->CNT) to zero
 8002838:	f8cb 4024 	str.w	r4, [fp, #36]	; 0x24
	HAL_TIM_Base_Start(&htim5);
 800283c:	4650      	mov	r0, sl
 800283e:	4f3e      	ldr	r7, [pc, #248]	; (8002938 <main+0x67c>)
 8002840:	f7ff f83a 	bl	80018b8 <HAL_TIM_Base_Start>
	I2C1->CR1 |= I2C_CR1_PE;				// enable I2C
 8002844:	682b      	ldr	r3, [r5, #0]
	sleepMS(10);
 8002846:	200a      	movs	r0, #10
	I2C1->CR1 |= I2C_CR1_PE;				// enable I2C
 8002848:	4333      	orrs	r3, r6
 800284a:	4e4f      	ldr	r6, [pc, #316]	; (8002988 <main+0x6cc>)
 800284c:	602b      	str	r3, [r5, #0]
	I2C1->CR2 &= ~(BIT(11));				// set 7 bit addressing mode
 800284e:	686b      	ldr	r3, [r5, #4]
 8002850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002854:	606b      	str	r3, [r5, #4]
	sleepMS(10);
 8002856:	f7ff fc71 	bl	800213c <sleepMS>
	I2C1->CR2 &= ~(0x000000FE);
 800285a:	686b      	ldr	r3, [r5, #4]
 800285c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8002860:	606b      	str	r3, [r5, #4]
	I2C1->CR2 |= ((0x68 & 0x7F) << 1);		// read from this address 0x68
 8002862:	686b      	ldr	r3, [r5, #4]
 8002864:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8002868:	606b      	str	r3, [r5, #4]
	I2C1->CR2 &= ~(BIT(10));				// write data
 800286a:	686b      	ldr	r3, [r5, #4]
 800286c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002870:	606b      	str	r3, [r5, #4]
	I2C1->CR2 &= ~(0x00FF0000);
 8002872:	686b      	ldr	r3, [r5, #4]
 8002874:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002878:	606b      	str	r3, [r5, #4]
	I2C1->CR2 |= ((1 & 0xFF) << 16);	// set how many bytes to be transmitted
 800287a:	686b      	ldr	r3, [r5, #4]
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	606b      	str	r3, [r5, #4]
	I2C1->CR2 |= BIT(25);// automatic end mode; (i.e. automatically send "end" after number of bytes are transmitted)
 8002882:	686b      	ldr	r3, [r5, #4]
 8002884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002888:	606b      	str	r3, [r5, #4]
	I2C1->TXDR = 0;							// this is the first byte to be sent
 800288a:	62ac      	str	r4, [r5, #40]	; 0x28
	long timeOut = 0x00000FFF;
 800288c:	f640 74ff 	movw	r4, #4095	; 0xfff
	I2C1->CR2 |= I2C_CR2_START;				// generate I2C start condition
 8002890:	686b      	ldr	r3, [r5, #4]
 8002892:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002896:	606b      	str	r3, [r5, #4]
	uartSendStringDirect(I2C1->ISR);
 8002898:	69a8      	ldr	r0, [r5, #24]
 800289a:	f001 f853 	bl	8003944 <uartSendStringDirect>
	uartSendCharDirect('\n');
 800289e:	200a      	movs	r0, #10
 80028a0:	f001 f846 	bl	8003930 <uartSendCharDirect>
	while ((I2C1->CR2 & I2C_CR2_START) && (--timeOut)) {
 80028a4:	6869      	ldr	r1, [r5, #4]
 80028a6:	f411 5100 	ands.w	r1, r1, #8192	; 0x2000
 80028aa:	d002      	beq.n	80028b2 <main+0x5f6>
 80028ac:	3c01      	subs	r4, #1
 80028ae:	d103      	bne.n	80028b8 <main+0x5fc>
		errorFlag |= 8;
 80028b0:	2108      	movs	r1, #8
	long errorFlag = 0;
 80028b2:	2500      	movs	r5, #0
		I2C_ISR = (I2C1->ISR);
 80028b4:	4b2d      	ldr	r3, [pc, #180]	; (800296c <main+0x6b0>)
 80028b6:	e002      	b.n	80028be <main+0x602>
		asm volatile ("nop");
 80028b8:	bf00      	nop
 80028ba:	e7f3      	b.n	80028a4 <main+0x5e8>
		I2C_ISR = (I2C1->ISR);
 80028bc:	699d      	ldr	r5, [r3, #24]
	while ((((I2C_ISR)
 80028be:	f415 7fb8 	tst.w	r5, #368	; 0x170
 80028c2:	d105      	bne.n	80028d0 <main+0x614>
			&& (--timeOut)) {
 80028c4:	3c01      	subs	r4, #1
 80028c6:	d1f9      	bne.n	80028bc <main+0x600>
		errorFlag |= 16;
 80028c8:	f041 0110 	orr.w	r1, r1, #16
 80028cc:	2400      	movs	r4, #0
 80028ce:	e001      	b.n	80028d4 <main+0x618>
	if (timeOut == 0) {
 80028d0:	2c00      	cmp	r4, #0
 80028d2:	d0f9      	beq.n	80028c8 <main+0x60c>
	if ((I2C_ISR) & (I2C_ISR_STOPF)) {
 80028d4:	f015 0f20 	tst.w	r5, #32
 80028d8:	4b24      	ldr	r3, [pc, #144]	; (800296c <main+0x6b0>)
 80028da:	d02a      	beq.n	8002932 <main+0x676>
		I2C1->ICR |= I2C_ICR_STOPCF;
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	f042 0220 	orr.w	r2, r2, #32
 80028e2:	61da      	str	r2, [r3, #28]
	if ((I2C_ISR) & (I2C_ISR_BERR)) {
 80028e4:	05ea      	lsls	r2, r5, #23
 80028e6:	d505      	bpl.n	80028f4 <main+0x638>
		I2C1->ICR |= I2C_ICR_BERRCF;
 80028e8:	69da      	ldr	r2, [r3, #28]
		errorFlag |= 2;
 80028ea:	f041 0102 	orr.w	r1, r1, #2
		I2C1->ICR |= I2C_ICR_BERRCF;
 80028ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f2:	61da      	str	r2, [r3, #28]
	if ((I2C_ISR) & (I2C_ISR_NACKF)) {
 80028f4:	f015 0f10 	tst.w	r5, #16
 80028f8:	f8df a070 	ldr.w	sl, [pc, #112]	; 800296c <main+0x6b0>
 80028fc:	d04e      	beq.n	800299c <main+0x6e0>
		I2C1->ICR |= I2C_ICR_NACKCF;
 80028fe:	f8da 301c 	ldr.w	r3, [sl, #28]
		errorFlag |= 4;
 8002902:	f041 0104 	orr.w	r1, r1, #4
		I2C1->ICR |= I2C_ICR_NACKCF;
 8002906:	f043 0310 	orr.w	r3, r3, #16
 800290a:	f8ca 301c 	str.w	r3, [sl, #28]
		I2C1->CR2 |= I2C_CR2_STOP;// if an error occurred, just to be sure, generate a STOP
 800290e:	f8da 3004 	ldr.w	r3, [sl, #4]
		sleepMS(1);
 8002912:	2001      	movs	r0, #1
		I2C1->CR2 |= I2C_CR2_STOP;// if an error occurred, just to be sure, generate a STOP
 8002914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002918:	f8ca 3004 	str.w	r3, [sl, #4]
		sleepMS(1);
 800291c:	f7ff fc0e 	bl	800213c <sleepMS>
		I2C1->ICR |=
 8002920:	f8da 301c 	ldr.w	r3, [sl, #28]
 8002924:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 8002928:	f043 0318 	orr.w	r3, r3, #24
 800292c:	f8ca 301c 	str.w	r3, [sl, #28]
 8002930:	e036      	b.n	80029a0 <main+0x6e4>
		errorFlag |= 1;
 8002932:	f041 0101 	orr.w	r1, r1, #1
 8002936:	e7d5      	b.n	80028e4 <main+0x628>
 8002938:	40026040 	.word	0x40026040
 800293c:	20013000 	.word	0x20013000
 8002940:	40004c24 	.word	0x40004c24
 8002944:	20000640 	.word	0x20000640
 8002948:	20000478 	.word	0x20000478
 800294c:	40005000 	.word	0x40005000
 8002950:	000f4240 	.word	0x000f4240
 8002954:	40005024 	.word	0x40005024
 8002958:	200002ac 	.word	0x200002ac
 800295c:	20015000 	.word	0x20015000
 8002960:	200005c0 	.word	0x200005c0
 8002964:	40004400 	.word	0x40004400
 8002968:	40004424 	.word	0x40004424
 800296c:	40005400 	.word	0x40005400
 8002970:	20011000 	.word	0x20011000
 8002974:	20404768 	.word	0x20404768
 8002978:	40020800 	.word	0x40020800
 800297c:	40020810 	.word	0x40020810
 8002980:	40020400 	.word	0x40020400
 8002984:	40020410 	.word	0x40020410
 8002988:	40026028 	.word	0x40026028
 800298c:	40026088 	.word	0x40026088
 8002990:	200003ec 	.word	0x200003ec
 8002994:	40000c00 	.word	0x40000c00
 8002998:	20000438 	.word	0x20000438
	if (errorFlag) {
 800299c:	2900      	cmp	r1, #0
 800299e:	d1b6      	bne.n	800290e <main+0x652>
	I2C1->CR2 &= ~(0x000000FE);
 80029a0:	4ba4      	ldr	r3, [pc, #656]	; (8002c34 <main+0x978>)
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	f022 02fe 	bic.w	r2, r2, #254	; 0xfe
 80029a8:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= ((0x68 & 0x7F) << 1);		// read from this address 0x68
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 80029b0:	605a      	str	r2, [r3, #4]
	I2C1->CR2 &= ~(BIT(10));				// write data
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b8:	605a      	str	r2, [r3, #4]
	I2C1->CR2 &= ~(0x00FF0000);
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 80029c0:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= ((1 & 0xFF) << 16);	// set how many bytes to be transmitted
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029c8:	605a      	str	r2, [r3, #4]
	I2C1->CR2 |= BIT(25);// automatic end mode; (i.e. automatically send "end" after number of bytes are transmitted)
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80029d0:	605a      	str	r2, [r3, #4]
	I2C1->TXDR = 0;							// this is the first byte to be sent
 80029d2:	2200      	movs	r2, #0
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28
	I2C1->CR2 |= I2C_CR2_START;				// generate I2C start condition
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029dc:	605a      	str	r2, [r3, #4]
	while ((I2C1->CR2 & I2C_CR2_START) && (--timeOut)) {
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	0490      	lsls	r0, r2, #18
 80029e2:	d507      	bpl.n	80029f4 <main+0x738>
 80029e4:	3c01      	subs	r4, #1
 80029e6:	d103      	bne.n	80029f0 <main+0x734>
		errorFlag |= 8;
 80029e8:	f041 0108 	orr.w	r1, r1, #8
 80029ec:	2400      	movs	r4, #0
 80029ee:	e003      	b.n	80029f8 <main+0x73c>
		asm volatile ("nop");
 80029f0:	bf00      	nop
 80029f2:	e7f4      	b.n	80029de <main+0x722>
	if (timeOut == 0) {
 80029f4:	2c00      	cmp	r4, #0
 80029f6:	d0f7      	beq.n	80029e8 <main+0x72c>
		I2C_ISR = (I2C1->ISR);
 80029f8:	4b8e      	ldr	r3, [pc, #568]	; (8002c34 <main+0x978>)
 80029fa:	e000      	b.n	80029fe <main+0x742>
 80029fc:	699d      	ldr	r5, [r3, #24]
	while ((((I2C_ISR)
 80029fe:	f415 7fb8 	tst.w	r5, #368	; 0x170
 8002a02:	d104      	bne.n	8002a0e <main+0x752>
			&& (--timeOut)) {
 8002a04:	3c01      	subs	r4, #1
 8002a06:	d1f9      	bne.n	80029fc <main+0x740>
		errorFlag |= 16;
 8002a08:	f041 0110 	orr.w	r1, r1, #16
 8002a0c:	e001      	b.n	8002a12 <main+0x756>
	if (timeOut == 0) {
 8002a0e:	2c00      	cmp	r4, #0
 8002a10:	d0fa      	beq.n	8002a08 <main+0x74c>
	if ((I2C_ISR) & (I2C_ISR_STOPF)) {
 8002a12:	06aa      	lsls	r2, r5, #26
 8002a14:	d523      	bpl.n	8002a5e <main+0x7a2>
		I2C1->ICR |= I2C_ICR_STOPCF;
 8002a16:	4a87      	ldr	r2, [pc, #540]	; (8002c34 <main+0x978>)
 8002a18:	69d3      	ldr	r3, [r2, #28]
 8002a1a:	f043 0320 	orr.w	r3, r3, #32
 8002a1e:	61d3      	str	r3, [r2, #28]
	if ((I2C_ISR) & (I2C_ISR_BERR)) {
 8002a20:	05eb      	lsls	r3, r5, #23
 8002a22:	d506      	bpl.n	8002a32 <main+0x776>
		I2C1->ICR |= I2C_ICR_BERRCF;
 8002a24:	4a83      	ldr	r2, [pc, #524]	; (8002c34 <main+0x978>)
		errorFlag |= 2;
 8002a26:	f041 0102 	orr.w	r1, r1, #2
		I2C1->ICR |= I2C_ICR_BERRCF;
 8002a2a:	69d3      	ldr	r3, [r2, #28]
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a30:	61d3      	str	r3, [r2, #28]
	if ((I2C_ISR) & (I2C_ISR_NACKF)) {
 8002a32:	06ed      	lsls	r5, r5, #27
 8002a34:	d516      	bpl.n	8002a64 <main+0x7a8>
		I2C1->ICR |= I2C_ICR_NACKCF;
 8002a36:	4a7f      	ldr	r2, [pc, #508]	; (8002c34 <main+0x978>)
 8002a38:	69d3      	ldr	r3, [r2, #28]
 8002a3a:	f043 0310 	orr.w	r3, r3, #16
 8002a3e:	61d3      	str	r3, [r2, #28]
		I2C1->CR2 |= I2C_CR2_STOP;// if an error occurred, just to be sure, generate a STOP
 8002a40:	497c      	ldr	r1, [pc, #496]	; (8002c34 <main+0x978>)
		sleepMS(1);
 8002a42:	2001      	movs	r0, #1
		I2C1->CR2 |= I2C_CR2_STOP;// if an error occurred, just to be sure, generate a STOP
 8002a44:	684b      	ldr	r3, [r1, #4]
 8002a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4a:	604b      	str	r3, [r1, #4]
		sleepMS(1);
 8002a4c:	f7ff fb76 	bl	800213c <sleepMS>
		I2C1->ICR |=
 8002a50:	69cb      	ldr	r3, [r1, #28]
 8002a52:	f443 53f9 	orr.w	r3, r3, #7968	; 0x1f20
 8002a56:	f043 0318 	orr.w	r3, r3, #24
 8002a5a:	61cb      	str	r3, [r1, #28]
 8002a5c:	e004      	b.n	8002a68 <main+0x7ac>
		errorFlag |= 1;
 8002a5e:	f041 0101 	orr.w	r1, r1, #1
 8002a62:	e7dd      	b.n	8002a20 <main+0x764>
	if (errorFlag) {
 8002a64:	2900      	cmp	r1, #0
 8002a66:	d1eb      	bne.n	8002a40 <main+0x784>
 8002a68:	4d73      	ldr	r5, [pc, #460]	; (8002c38 <main+0x97c>)
		if (ledCounter) {										// LED blinking
 8002a6a:	4a74      	ldr	r2, [pc, #464]	; (8002c3c <main+0x980>)
 8002a6c:	6813      	ldr	r3, [r2, #0]
 8002a6e:	b11b      	cbz	r3, 8002a78 <main+0x7bc>
			if ((--ledCounter) == 0) {
 8002a70:	3b01      	subs	r3, #1
 8002a72:	f000 808d 	beq.w	8002b90 <main+0x8d4>
 8002a76:	6013      	str	r3, [r2, #0]
		UART_BytesAvailable = (-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA))
 8002a78:	4b71      	ldr	r3, [pc, #452]	; (8002c40 <main+0x984>)
 8002a7a:	6874      	ldr	r4, [r6, #4]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	469a      	mov	sl, r3
			newChar = uart3RXBufferDMA[uart3RXReadPointerDMA++];
 8002a80:	f8df b230 	ldr.w	fp, [pc, #560]	; 8002cb4 <main+0x9f8>
		UART_BytesAvailable = (-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA))
 8002a84:	4414      	add	r4, r2
 8002a86:	4264      	negs	r4, r4
 8002a88:	f3c4 040b 	ubfx	r4, r4, #0, #12
		while (UART_BytesAvailable) {
 8002a8c:	2c00      	cmp	r4, #0
 8002a8e:	f040 808c 	bne.w	8002baa <main+0x8ee>
		if (uart3TXWritePointer != uart3TXReadPointer) {// RPIZW UART transmit
 8002a92:	4a6c      	ldr	r2, [pc, #432]	; (8002c44 <main+0x988>)
 8002a94:	496c      	ldr	r1, [pc, #432]	; (8002c48 <main+0x98c>)
 8002a96:	6813      	ldr	r3, [r2, #0]
 8002a98:	6809      	ldr	r1, [r1, #0]
 8002a9a:	4299      	cmp	r1, r3
 8002a9c:	d00a      	beq.n	8002ab4 <main+0x7f8>
			if ((USART3->ISR) & BIT(7)) {
 8002a9e:	496b      	ldr	r1, [pc, #428]	; (8002c4c <main+0x990>)
 8002aa0:	69c8      	ldr	r0, [r1, #28]
 8002aa2:	0604      	lsls	r4, r0, #24
 8002aa4:	d506      	bpl.n	8002ab4 <main+0x7f8>
				USART3->TDR = uart3TXBuffer[uart3TXReadPointer++];
 8002aa6:	486a      	ldr	r0, [pc, #424]	; (8002c50 <main+0x994>)
 8002aa8:	5cc0      	ldrb	r0, [r0, r3]
 8002aaa:	3301      	adds	r3, #1
				uart3TXReadPointer &= UART_BUFFER_MASK;
 8002aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
				USART3->TDR = uart3TXBuffer[uart3TXReadPointer++];
 8002ab0:	6288      	str	r0, [r1, #40]	; 0x28
				uart3TXReadPointer &= UART_BUFFER_MASK;
 8002ab2:	6013      	str	r3, [r2, #0]
		UART_BytesAvailable = (-((DMA1_Stream5->NDTR) + uartSRXReadPointerDMA))
 8002ab4:	4b67      	ldr	r3, [pc, #412]	; (8002c54 <main+0x998>)
 8002ab6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	469a      	mov	sl, r3
				if (uartSRXWritePointer < (UART_BUFFER_SIZE - 2))
 8002abe:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8002cb8 <main+0x9fc>
		UART_BytesAvailable = (-((DMA1_Stream5->NDTR) + uartSRXReadPointerDMA))
 8002ac2:	4414      	add	r4, r2
			newChar = uartSRXBufferDMA[uartSRXReadPointerDMA++];
 8002ac4:	4a64      	ldr	r2, [pc, #400]	; (8002c58 <main+0x99c>)
		UART_BytesAvailable = (-((DMA1_Stream5->NDTR) + uartSRXReadPointerDMA))
 8002ac6:	4264      	negs	r4, r4
 8002ac8:	f3c4 040b 	ubfx	r4, r4, #0, #12
		while (UART_BytesAvailable) {
 8002acc:	2c00      	cmp	r4, #0
 8002ace:	f040 80a0 	bne.w	8002c12 <main+0x956>
		if (uartSTXWritePointer != uartSTXReadPointer) {// ***************************************************************
 8002ad2:	4a62      	ldr	r2, [pc, #392]	; (8002c5c <main+0x9a0>)
 8002ad4:	4962      	ldr	r1, [pc, #392]	; (8002c60 <main+0x9a4>)
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	6809      	ldr	r1, [r1, #0]
 8002ada:	4299      	cmp	r1, r3
 8002adc:	d00e      	beq.n	8002afc <main+0x840>
			if ((USART2->ISR) & BIT(7)) {
 8002ade:	4961      	ldr	r1, [pc, #388]	; (8002c64 <main+0x9a8>)
 8002ae0:	69c8      	ldr	r0, [r1, #28]
 8002ae2:	0600      	lsls	r0, r0, #24
 8002ae4:	d50a      	bpl.n	8002afc <main+0x840>
				USART2->TDR = uartSTXBuffer[uartSTXReadPointer++];
 8002ae6:	4860      	ldr	r0, [pc, #384]	; (8002c68 <main+0x9ac>)
 8002ae8:	5cc0      	ldrb	r0, [r0, r3]
 8002aea:	3301      	adds	r3, #1
				uartSTXReadPointer &= UART_BUFFER_MASK;
 8002aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
				USART2->TDR = uartSTXBuffer[uartSTXReadPointer++];
 8002af0:	6288      	str	r0, [r1, #40]	; 0x28
				uartSTXReadPointer &= UART_BUFFER_MASK;
 8002af2:	6013      	str	r3, [r2, #0]
				uartSRXDiscardCounter++;
 8002af4:	4a5d      	ldr	r2, [pc, #372]	; (8002c6c <main+0x9b0>)
 8002af6:	6813      	ldr	r3, [r2, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	6013      	str	r3, [r2, #0]
		UART_BytesAvailable = (-((DMA1_Stream2->NDTR) + uartRRXReadPointerDMA))
 8002afc:	4b5c      	ldr	r3, [pc, #368]	; (8002c70 <main+0x9b4>)
 8002afe:	687c      	ldr	r4, [r7, #4]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	469a      	mov	sl, r3
				if (uartRRXWritePointer < (UART_BUFFER_SIZE - 2))
 8002b04:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8002cbc <main+0xa00>
		UART_BytesAvailable = (-((DMA1_Stream2->NDTR) + uartRRXReadPointerDMA))
 8002b08:	4414      	add	r4, r2
			newChar = uartRRXBufferDMA[uartRRXReadPointerDMA++];
 8002b0a:	4a5a      	ldr	r2, [pc, #360]	; (8002c74 <main+0x9b8>)
		UART_BytesAvailable = (-((DMA1_Stream2->NDTR) + uartRRXReadPointerDMA))
 8002b0c:	4264      	negs	r4, r4
 8002b0e:	f3c4 040b 	ubfx	r4, r4, #0, #12
		while (UART_BytesAvailable) {
 8002b12:	2c00      	cmp	r4, #0
 8002b14:	f040 80fa 	bne.w	8002d0c <main+0xa50>
		if (uartRTXWritePointer != uartRTXReadPointer) {// ***************************************************************
 8002b18:	4a57      	ldr	r2, [pc, #348]	; (8002c78 <main+0x9bc>)
 8002b1a:	4958      	ldr	r1, [pc, #352]	; (8002c7c <main+0x9c0>)
 8002b1c:	6813      	ldr	r3, [r2, #0]
 8002b1e:	6809      	ldr	r1, [r1, #0]
 8002b20:	4299      	cmp	r1, r3
 8002b22:	d00e      	beq.n	8002b42 <main+0x886>
			if ((UART4->ISR) & BIT(7)) {
 8002b24:	4956      	ldr	r1, [pc, #344]	; (8002c80 <main+0x9c4>)
 8002b26:	69c8      	ldr	r0, [r1, #28]
 8002b28:	0604      	lsls	r4, r0, #24
 8002b2a:	d50a      	bpl.n	8002b42 <main+0x886>
				UART4->TDR = uartRTXBuffer[uartRTXReadPointer++];
 8002b2c:	4855      	ldr	r0, [pc, #340]	; (8002c84 <main+0x9c8>)
 8002b2e:	5cc0      	ldrb	r0, [r0, r3]
 8002b30:	3301      	adds	r3, #1
				uartRTXReadPointer &= UART_BUFFER_MASK;
 8002b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
				UART4->TDR = uartRTXBuffer[uartRTXReadPointer++];
 8002b36:	6288      	str	r0, [r1, #40]	; 0x28
				uartRTXReadPointer &= UART_BUFFER_MASK;
 8002b38:	6013      	str	r3, [r2, #0]
				uartRRXDiscardCounter++;
 8002b3a:	4a53      	ldr	r2, [pc, #332]	; (8002c88 <main+0x9cc>)
 8002b3c:	6813      	ldr	r3, [r2, #0]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	6013      	str	r3, [r2, #0]
		UART_BytesAvailable = (-((DMA1_Stream0->NDTR) + uartLRXReadPointerDMA))
 8002b42:	4b52      	ldr	r3, [pc, #328]	; (8002c8c <main+0x9d0>)
 8002b44:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	469a      	mov	sl, r3
				if (uartLRXWritePointer < (UART_BUFFER_SIZE - 2))
 8002b4c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8002cc0 <main+0xa04>
		UART_BytesAvailable = (-((DMA1_Stream0->NDTR) + uartLRXReadPointerDMA))
 8002b50:	4414      	add	r4, r2
			newChar = uartLRXBufferDMA[uartLRXReadPointerDMA++];
 8002b52:	4a4f      	ldr	r2, [pc, #316]	; (8002c90 <main+0x9d4>)
		UART_BytesAvailable = (-((DMA1_Stream0->NDTR) + uartLRXReadPointerDMA))
 8002b54:	4264      	negs	r4, r4
 8002b56:	f3c4 040b 	ubfx	r4, r4, #0, #12
		while (UART_BytesAvailable) {
 8002b5a:	2c00      	cmp	r4, #0
 8002b5c:	f040 8109 	bne.w	8002d72 <main+0xab6>
		if (uartLTXWritePointer != uartLTXReadPointer) {// ***************************************************************
 8002b60:	4a4c      	ldr	r2, [pc, #304]	; (8002c94 <main+0x9d8>)
 8002b62:	494d      	ldr	r1, [pc, #308]	; (8002c98 <main+0x9dc>)
 8002b64:	6813      	ldr	r3, [r2, #0]
 8002b66:	6809      	ldr	r1, [r1, #0]
 8002b68:	4299      	cmp	r1, r3
 8002b6a:	f43f af7e 	beq.w	8002a6a <main+0x7ae>
			if ((UART5->ISR) & BIT(7)) {
 8002b6e:	494b      	ldr	r1, [pc, #300]	; (8002c9c <main+0x9e0>)
 8002b70:	69c8      	ldr	r0, [r1, #28]
 8002b72:	0600      	lsls	r0, r0, #24
 8002b74:	f57f af79 	bpl.w	8002a6a <main+0x7ae>
				UART5->TDR = uartLTXBuffer[uartLTXReadPointer++];
 8002b78:	4849      	ldr	r0, [pc, #292]	; (8002ca0 <main+0x9e4>)
 8002b7a:	5cc0      	ldrb	r0, [r0, r3]
 8002b7c:	3301      	adds	r3, #1
				uartLTXReadPointer &= UART_BUFFER_MASK;
 8002b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
				UART5->TDR = uartLTXBuffer[uartLTXReadPointer++];
 8002b82:	6288      	str	r0, [r1, #40]	; 0x28
				uartLTXReadPointer &= UART_BUFFER_MASK;
 8002b84:	6013      	str	r3, [r2, #0]
				uartLRXDiscardCounter++;
 8002b86:	4a47      	ldr	r2, [pc, #284]	; (8002ca4 <main+0x9e8>)
 8002b88:	6813      	ldr	r3, [r2, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e76c      	b.n	8002a6a <main+0x7ae>
				ledCounter = 200000;
 8002b90:	4b45      	ldr	r3, [pc, #276]	; (8002ca8 <main+0x9ec>)
 8002b92:	6013      	str	r3, [r2, #0]
				if ((PORTA->INP) & PORTA_LED_A) {
 8002b94:	4b45      	ldr	r3, [pc, #276]	; (8002cac <main+0x9f0>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	f012 0f02 	tst.w	r2, #2
 8002b9c:	f04f 0202 	mov.w	r2, #2
 8002ba0:	d001      	beq.n	8002ba6 <main+0x8ea>
					PORTA->CLR = PORTA_LED_A;
 8002ba2:	815a      	strh	r2, [r3, #10]
 8002ba4:	e768      	b.n	8002a78 <main+0x7bc>
					PORTA->SET = PORTA_LED_A;
 8002ba6:	811a      	strh	r2, [r3, #8]
 8002ba8:	e766      	b.n	8002a78 <main+0x7bc>
			newChar = uart3RXBufferDMA[uart3RXReadPointerDMA++];
 8002baa:	f8da 3000 	ldr.w	r3, [sl]
			UART_BytesAvailable--;
 8002bae:	3c01      	subs	r4, #1
			newChar = uart3RXBufferDMA[uart3RXReadPointerDMA++];
 8002bb0:	f81b 0003 	ldrb.w	r0, [fp, r3]
 8002bb4:	3301      	adds	r3, #1
			if ((newChar == '\n') || (newChar == '\r')) {
 8002bb6:	280a      	cmp	r0, #10
			uart3RXReadPointerDMA &= UART_BUFFER_MASK;
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	f8ca 3000 	str.w	r3, [sl]
 8002bc0:	682b      	ldr	r3, [r5, #0]
			if ((newChar == '\n') || (newChar == '\r')) {
 8002bc2:	d001      	beq.n	8002bc8 <main+0x90c>
 8002bc4:	280d      	cmp	r0, #13
 8002bc6:	d111      	bne.n	8002bec <main+0x930>
				uart3RXBuffer[uart3RXWritePointer++] = '\n';
 8002bc8:	4a39      	ldr	r2, [pc, #228]	; (8002cb0 <main+0x9f4>)
 8002bca:	200a      	movs	r0, #10
 8002bcc:	1c59      	adds	r1, r3, #1
 8002bce:	54d0      	strb	r0, [r2, r3]
				uart3RXBuffer[uart3RXWritePointer] = 0;
 8002bd0:	2300      	movs	r3, #0
				uart3RXBuffer[uart3RXWritePointer++] = '\n';
 8002bd2:	6029      	str	r1, [r5, #0]
				uart3RXBuffer[uart3RXWritePointer] = 0;
 8002bd4:	5453      	strb	r3, [r2, r1]
 8002bd6:	e9cd 2301 	strd	r2, r3, [sp, #4]
				uartSendChar('\n');
 8002bda:	f000 fe49 	bl	8003870 <uartSendChar>
				uartParseCommand(uart3RXBuffer);
 8002bde:	9a01      	ldr	r2, [sp, #4]
 8002be0:	4610      	mov	r0, r2
 8002be2:	f000 ff25 	bl	8003a30 <uartParseCommand>
				uart3RXWritePointer = 0;
 8002be6:	9b02      	ldr	r3, [sp, #8]
 8002be8:	602b      	str	r3, [r5, #0]
 8002bea:	e74f      	b.n	8002a8c <main+0x7d0>
				if (newChar == 8) {								// BACKSPACE
 8002bec:	2808      	cmp	r0, #8
 8002bee:	d107      	bne.n	8002c00 <main+0x944>
					if (uart3RXWritePointer) {
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f43f af4b 	beq.w	8002a8c <main+0x7d0>
						uart3RXWritePointer--;
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	602b      	str	r3, [r5, #0]
					uartSendChar(newChar);
 8002bfa:	f000 fe39 	bl	8003870 <uartSendChar>
 8002bfe:	e745      	b.n	8002a8c <main+0x7d0>
					if (uart3RXWritePointer < (UART_BUFFER_SIZE - 2)) {
 8002c00:	f640 72fd 	movw	r2, #4093	; 0xffd
 8002c04:	4293      	cmp	r3, r2
						uart3RXBuffer[uart3RXWritePointer++] = newChar;
 8002c06:	bfdf      	itttt	le
 8002c08:	1c5a      	addle	r2, r3, #1
 8002c0a:	602a      	strle	r2, [r5, #0]
 8002c0c:	4a28      	ldrle	r2, [pc, #160]	; (8002cb0 <main+0x9f4>)
 8002c0e:	54d0      	strble	r0, [r2, r3]
 8002c10:	e7f3      	b.n	8002bfa <main+0x93e>
			newChar = uartSRXBufferDMA[uartSRXReadPointerDMA++];
 8002c12:	f8da 3000 	ldr.w	r3, [sl]
			UART_BytesAvailable--;
 8002c16:	3c01      	subs	r4, #1
			if (uartSRXDiscardCounter) {// is this one of the chars we sent out (ignore the echo because of one-wire transmission)
 8002c18:	4814      	ldr	r0, [pc, #80]	; (8002c6c <main+0x9b0>)
			newChar = uartSRXBufferDMA[uartSRXReadPointerDMA++];
 8002c1a:	5cd1      	ldrb	r1, [r2, r3]
 8002c1c:	3301      	adds	r3, #1
			uartSRXReadPointerDMA &= UART_BUFFER_MASK;
 8002c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c22:	f8ca 3000 	str.w	r3, [sl]
			if (uartSRXDiscardCounter) {// is this one of the chars we sent out (ignore the echo because of one-wire transmission)
 8002c26:	6803      	ldr	r3, [r0, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d04b      	beq.n	8002cc4 <main+0xa08>
				uartSRXDiscardCounter--;
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	6003      	str	r3, [r0, #0]
 8002c30:	e74c      	b.n	8002acc <main+0x810>
 8002c32:	bf00      	nop
 8002c34:	40005400 	.word	0x40005400
 8002c38:	20000200 	.word	0x20000200
 8002c3c:	20000008 	.word	0x20000008
 8002c40:	200001fc 	.word	0x200001fc
 8002c44:	20000204 	.word	0x20000204
 8002c48:	20000208 	.word	0x20000208
 8002c4c:	40004800 	.word	0x40004800
 8002c50:	200016a0 	.word	0x200016a0
 8002c54:	20000238 	.word	0x20000238
 8002c58:	20011000 	.word	0x20011000
 8002c5c:	20000240 	.word	0x20000240
 8002c60:	20000244 	.word	0x20000244
 8002c64:	40004400 	.word	0x40004400
 8002c68:	200036a0 	.word	0x200036a0
 8002c6c:	20000234 	.word	0x20000234
 8002c70:	20000224 	.word	0x20000224
 8002c74:	20013000 	.word	0x20013000
 8002c78:	2000022c 	.word	0x2000022c
 8002c7c:	20000230 	.word	0x20000230
 8002c80:	40004c00 	.word	0x40004c00
 8002c84:	200026a0 	.word	0x200026a0
 8002c88:	20000220 	.word	0x20000220
 8002c8c:	20000210 	.word	0x20000210
 8002c90:	20015000 	.word	0x20015000
 8002c94:	20000218 	.word	0x20000218
 8002c98:	2000021c 	.word	0x2000021c
 8002c9c:	40005000 	.word	0x40005000
 8002ca0:	200006a0 	.word	0x200006a0
 8002ca4:	2000020c 	.word	0x2000020c
 8002ca8:	00030d40 	.word	0x00030d40
 8002cac:	40020010 	.word	0x40020010
 8002cb0:	20016000 	.word	0x20016000
 8002cb4:	20017000 	.word	0x20017000
 8002cb8:	2000023c 	.word	0x2000023c
 8002cbc:	20000228 	.word	0x20000228
 8002cc0:	20000214 	.word	0x20000214
				if (uartSRXWritePointer < (UART_BUFFER_SIZE - 2))
 8002cc4:	f640 70fd 	movw	r0, #4093	; 0xffd
 8002cc8:	f8db 3000 	ldr.w	r3, [fp]
 8002ccc:	4283      	cmp	r3, r0
					uartSRXBuffer[uartSRXWritePointer++] = newChar;
 8002cce:	bfdf      	itttt	le
 8002cd0:	1c58      	addle	r0, r3, #1
 8002cd2:	f8cb 0000 	strle.w	r0, [fp]
 8002cd6:	4840      	ldrle	r0, [pc, #256]	; (8002dd8 <main+0xb1c>)
 8002cd8:	54c1      	strble	r1, [r0, r3]
				if ((newChar == '\n') || (newChar == '\r')) {
 8002cda:	290a      	cmp	r1, #10
 8002cdc:	d002      	beq.n	8002ce4 <main+0xa28>
 8002cde:	290d      	cmp	r1, #13
 8002ce0:	f47f aef4 	bne.w	8002acc <main+0x810>
					uartSRXBuffer[uartSRXWritePointer] = 0;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	493c      	ldr	r1, [pc, #240]	; (8002dd8 <main+0xb1c>)
 8002ce8:	f8db 0000 	ldr.w	r0, [fp]
 8002cec:	9203      	str	r2, [sp, #12]
 8002cee:	540b      	strb	r3, [r1, r0]
					uartSendString("S:");
 8002cf0:	483a      	ldr	r0, [pc, #232]	; (8002ddc <main+0xb20>)
					uartSRXBuffer[uartSRXWritePointer] = 0;
 8002cf2:	e9cd 1301 	strd	r1, r3, [sp, #4]
					uartSendString("S:");
 8002cf6:	f000 fdc9 	bl	800388c <uartSendString>
					uartSendString(uartSRXBuffer);
 8002cfa:	9901      	ldr	r1, [sp, #4]
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	f000 fdc5 	bl	800388c <uartSendString>
					uartSRXWritePointer = 0;
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	9a03      	ldr	r2, [sp, #12]
 8002d06:	f8cb 3000 	str.w	r3, [fp]
 8002d0a:	e6df      	b.n	8002acc <main+0x810>
			newChar = uartRRXBufferDMA[uartRRXReadPointerDMA++];
 8002d0c:	f8da 3000 	ldr.w	r3, [sl]
			UART_BytesAvailable--;
 8002d10:	3c01      	subs	r4, #1
			if (uartRRXDiscardCounter) {// is this one of the chars we sent out (ignore the echo because of one-wire transmission)
 8002d12:	4833      	ldr	r0, [pc, #204]	; (8002de0 <main+0xb24>)
			newChar = uartRRXBufferDMA[uartRRXReadPointerDMA++];
 8002d14:	5cd1      	ldrb	r1, [r2, r3]
 8002d16:	3301      	adds	r3, #1
			uartRRXReadPointerDMA &= UART_BUFFER_MASK;
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	f8ca 3000 	str.w	r3, [sl]
			if (uartRRXDiscardCounter) {// is this one of the chars we sent out (ignore the echo because of one-wire transmission)
 8002d20:	6803      	ldr	r3, [r0, #0]
 8002d22:	b113      	cbz	r3, 8002d2a <main+0xa6e>
				uartRRXDiscardCounter--;
 8002d24:	3b01      	subs	r3, #1
 8002d26:	6003      	str	r3, [r0, #0]
 8002d28:	e6f3      	b.n	8002b12 <main+0x856>
				if (uartRRXWritePointer < (UART_BUFFER_SIZE - 2))
 8002d2a:	f640 70fd 	movw	r0, #4093	; 0xffd
 8002d2e:	f8db 3000 	ldr.w	r3, [fp]
 8002d32:	4283      	cmp	r3, r0
					uartRRXBuffer[uartRRXWritePointer++] = newChar;
 8002d34:	bfdf      	itttt	le
 8002d36:	1c58      	addle	r0, r3, #1
 8002d38:	f8cb 0000 	strle.w	r0, [fp]
 8002d3c:	4829      	ldrle	r0, [pc, #164]	; (8002de4 <main+0xb28>)
 8002d3e:	54c1      	strble	r1, [r0, r3]
				if ((newChar == '\n') || (newChar == '\r')) {
 8002d40:	290a      	cmp	r1, #10
 8002d42:	d002      	beq.n	8002d4a <main+0xa8e>
 8002d44:	290d      	cmp	r1, #13
 8002d46:	f47f aee4 	bne.w	8002b12 <main+0x856>
					uartRRXBuffer[uartRRXWritePointer] = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	4925      	ldr	r1, [pc, #148]	; (8002de4 <main+0xb28>)
 8002d4e:	f8db 0000 	ldr.w	r0, [fp]
 8002d52:	9203      	str	r2, [sp, #12]
 8002d54:	540b      	strb	r3, [r1, r0]
					uartSendString("R:");
 8002d56:	4824      	ldr	r0, [pc, #144]	; (8002de8 <main+0xb2c>)
					uartRRXBuffer[uartRRXWritePointer] = 0;
 8002d58:	e9cd 1301 	strd	r1, r3, [sp, #4]
					uartSendString("R:");
 8002d5c:	f000 fd96 	bl	800388c <uartSendString>
					uartSendString(uartRRXBuffer);
 8002d60:	9901      	ldr	r1, [sp, #4]
 8002d62:	4608      	mov	r0, r1
 8002d64:	f000 fd92 	bl	800388c <uartSendString>
					uartRRXWritePointer = 0;
 8002d68:	9b02      	ldr	r3, [sp, #8]
 8002d6a:	9a03      	ldr	r2, [sp, #12]
 8002d6c:	f8cb 3000 	str.w	r3, [fp]
 8002d70:	e6cf      	b.n	8002b12 <main+0x856>
			newChar = uartLRXBufferDMA[uartLRXReadPointerDMA++];
 8002d72:	f8da 3000 	ldr.w	r3, [sl]
			UART_BytesAvailable--;
 8002d76:	3c01      	subs	r4, #1
			if (uartLRXDiscardCounter) {// is this one of the chars we sent out (ignore the echo because of one-wire transmission)
 8002d78:	481c      	ldr	r0, [pc, #112]	; (8002dec <main+0xb30>)
			newChar = uartLRXBufferDMA[uartLRXReadPointerDMA++];
 8002d7a:	5cd1      	ldrb	r1, [r2, r3]
 8002d7c:	3301      	adds	r3, #1
			uartLRXReadPointerDMA &= UART_BUFFER_MASK;
 8002d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d82:	f8ca 3000 	str.w	r3, [sl]
			if (uartLRXDiscardCounter) {// is this one of the chars we sent out (ignore the echo because of one-wire transmission)
 8002d86:	6803      	ldr	r3, [r0, #0]
 8002d88:	b113      	cbz	r3, 8002d90 <main+0xad4>
				uartLRXDiscardCounter--;
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6003      	str	r3, [r0, #0]
 8002d8e:	e6e4      	b.n	8002b5a <main+0x89e>
				if (uartLRXWritePointer < (UART_BUFFER_SIZE - 2))
 8002d90:	f640 70fd 	movw	r0, #4093	; 0xffd
 8002d94:	f8db 3000 	ldr.w	r3, [fp]
 8002d98:	4283      	cmp	r3, r0
					uartLRXBuffer[uartLRXWritePointer++] = newChar;
 8002d9a:	bfdf      	itttt	le
 8002d9c:	1c58      	addle	r0, r3, #1
 8002d9e:	f8cb 0000 	strle.w	r0, [fp]
 8002da2:	4813      	ldrle	r0, [pc, #76]	; (8002df0 <main+0xb34>)
 8002da4:	54c1      	strble	r1, [r0, r3]
				if ((newChar == '\n') || (newChar == '\r')) {
 8002da6:	290a      	cmp	r1, #10
 8002da8:	d002      	beq.n	8002db0 <main+0xaf4>
 8002daa:	290d      	cmp	r1, #13
 8002dac:	f47f aed5 	bne.w	8002b5a <main+0x89e>
					uartLRXBuffer[uartLRXWritePointer] = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	490f      	ldr	r1, [pc, #60]	; (8002df0 <main+0xb34>)
 8002db4:	f8db 0000 	ldr.w	r0, [fp]
 8002db8:	9203      	str	r2, [sp, #12]
 8002dba:	540b      	strb	r3, [r1, r0]
					uartSendString("L:");
 8002dbc:	480d      	ldr	r0, [pc, #52]	; (8002df4 <main+0xb38>)
					uartLRXBuffer[uartLRXWritePointer] = 0;
 8002dbe:	e9cd 1301 	strd	r1, r3, [sp, #4]
					uartSendString("L:");
 8002dc2:	f000 fd63 	bl	800388c <uartSendString>
					uartSendString(uartLRXBuffer);
 8002dc6:	9901      	ldr	r1, [sp, #4]
 8002dc8:	4608      	mov	r0, r1
 8002dca:	f000 fd5f 	bl	800388c <uartSendString>
					uartLRXWritePointer = 0;
 8002dce:	9b02      	ldr	r3, [sp, #8]
 8002dd0:	9a03      	ldr	r2, [sp, #12]
 8002dd2:	f8cb 3000 	str.w	r3, [fp]
 8002dd6:	e6c0      	b.n	8002b5a <main+0x89e>
 8002dd8:	20010000 	.word	0x20010000
 8002ddc:	08003ec9 	.word	0x08003ec9
 8002de0:	20000220 	.word	0x20000220
 8002de4:	20012000 	.word	0x20012000
 8002de8:	08003ecc 	.word	0x08003ecc
 8002dec:	2000020c 	.word	0x2000020c
 8002df0:	20014000 	.word	0x20014000
 8002df4:	08003ecf 	.word	0x08003ecf

08002df8 <Error_Handler>:
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
//uartSendString("HAL error\n");
	/* USER CODE END Error_Handler_Debug */
}
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_MspInit+0x2c>)
{
 8002dfe:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e06:	641a      	str	r2, [r3, #64]	; 0x40
 8002e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e0a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002e0e:	9200      	str	r2, [sp, #0]
 8002e10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e24:	b002      	add	sp, #8
 8002e26:	4770      	bx	lr
 8002e28:	40023800 	.word	0x40023800

08002e2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e32:	2214      	movs	r2, #20
 8002e34:	2100      	movs	r1, #0
 8002e36:	a803      	add	r0, sp, #12
 8002e38:	f000 ffc8 	bl	8003dcc <memset>
  if(hadc->Instance==ADC1)
 8002e3c:	6822      	ldr	r2, [r4, #0]
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_ADC_MspInit+0x54>)
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d11a      	bne.n	8002e7a <HAL_ADC_MspInit+0x4e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e44:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = ADC1_IN10_VBatt_Pin|ADC1_IN11_VBatt_2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e48:	a903      	add	r1, sp, #12
 8002e4a:	480e      	ldr	r0, [pc, #56]	; (8002e84 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
 8002e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e56:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002e5a:	9201      	str	r2, [sp, #4]
 8002e5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e60:	f042 0204 	orr.w	r2, r2, #4
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	9302      	str	r3, [sp, #8]
 8002e6e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ADC1_IN10_VBatt_Pin|ADC1_IN11_VBatt_2_Pin;
 8002e70:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e72:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e76:	f7fd febb 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e7a:	b008      	add	sp, #32
 8002e7c:	bd10      	pop	{r4, pc}
 8002e7e:	bf00      	nop
 8002e80:	40012000 	.word	0x40012000
 8002e84:	40020800 	.word	0x40020800

08002e88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e88:	b510      	push	{r4, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8e:	2214      	movs	r2, #20
 8002e90:	2100      	movs	r1, #0
 8002e92:	a803      	add	r0, sp, #12
 8002e94:	f000 ff9a 	bl	8003dcc <memset>
  if(hi2c->Instance==I2C1)
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_I2C_MspInit+0x60>)
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d120      	bne.n	8002ee2 <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea0:	4c12      	ldr	r4, [pc, #72]	; (8002eec <HAL_I2C_MspInit+0x64>)
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ea2:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea4:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea6:	4812      	ldr	r0, [pc, #72]	; (8002ef0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002eaa:	f043 0302 	orr.w	r3, r3, #2
 8002eae:	6323      	str	r3, [r4, #48]	; 0x30
 8002eb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eba:	2312      	movs	r3, #18
 8002ebc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ec6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002eca:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ecc:	f7fd fe90 	bl	8000bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ed0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ed2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ed6:	6423      	str	r3, [r4, #64]	; 0x40
 8002ed8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ede:	9302      	str	r3, [sp, #8]
 8002ee0:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ee2:	b008      	add	sp, #32
 8002ee4:	bd10      	pop	{r4, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40005400 	.word	0x40005400
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40020400 	.word	0x40020400

08002ef4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM5)
 8002ef4:	6802      	ldr	r2, [r0, #0]
{
 8002ef6:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM5)
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <HAL_TIM_Base_MspInit+0x24>)
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d10a      	bne.n	8002f14 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002efe:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 8002f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f04:	f042 0208 	orr.w	r2, r2, #8
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002f14:	b002      	add	sp, #8
 8002f16:	4770      	bx	lr
 8002f18:	40000c00 	.word	0x40000c00

08002f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1e:	b08f      	sub	sp, #60	; 0x3c
 8002f20:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f22:	2214      	movs	r2, #20
 8002f24:	2100      	movs	r1, #0
 8002f26:	a809      	add	r0, sp, #36	; 0x24
 8002f28:	f000 ff50 	bl	8003dcc <memset>
  if(huart->Instance==UART4)
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	4a6e      	ldr	r2, [pc, #440]	; (80030e8 <HAL_UART_MspInit+0x1cc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d13e      	bne.n	8002fb2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f34:	4b6d      	ldr	r3, [pc, #436]	; (80030ec <HAL_UART_MspInit+0x1d0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f36:	f44f 6680 	mov.w	r6, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3a:	f04f 0c01 	mov.w	ip, #1
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f3e:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f42:	486b      	ldr	r0, [pc, #428]	; (80030f0 <HAL_UART_MspInit+0x1d4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f44:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002f48:	4c6a      	ldr	r4, [pc, #424]	; (80030f4 <HAL_UART_MspInit+0x1d8>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002f52:	9201      	str	r2, [sp, #4]
 8002f54:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f58:	f042 0204 	orr.w	r2, r2, #4
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	9302      	str	r3, [sp, #8]
 8002f66:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f68:	2312      	movs	r3, #18
 8002f6a:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e9cd c30b 	strd	ip, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002f74:	2308      	movs	r3, #8
 8002f76:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f78:	f7fd fe3a 	bl	8000bf0 <HAL_GPIO_Init>
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002f7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f80:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8003124 <HAL_UART_MspInit+0x208>
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f84:	6126      	str	r6, [r4, #16]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002f86:	e9c4 e300 	strd	lr, r3, [r4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f8a:	2300      	movs	r3, #0
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f8c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f94:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f96:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f9a:	e9c4 2308 	strd	r2, r3, [r4, #32]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f7fd fcc0 	bl	8000924 <HAL_DMA_Init>
 8002fa4:	b108      	cbz	r0, 8002faa <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8002fa6:	f7ff ff27 	bl	8002df8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002faa:	66ec      	str	r4, [r5, #108]	; 0x6c
 8002fac:	63a5      	str	r5, [r4, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002fae:	b00f      	add	sp, #60	; 0x3c
 8002fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==UART5)
 8002fb2:	4a51      	ldr	r2, [pc, #324]	; (80030f8 <HAL_UART_MspInit+0x1dc>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d12c      	bne.n	8003012 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002fb8:	4b4c      	ldr	r3, [pc, #304]	; (80030ec <HAL_UART_MspInit+0x1d0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fba:	f44f 5680 	mov.w	r6, #4096	; 0x1000
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002fbe:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc0:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_UART5_CLK_ENABLE();
 8002fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc4:	484a      	ldr	r0, [pc, #296]	; (80030f0 <HAL_UART_MspInit+0x1d4>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8002fc6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002fca:	4c4c      	ldr	r4, [pc, #304]	; (80030fc <HAL_UART_MspInit+0x1e0>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
 8002fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002fd4:	9203      	str	r2, [sp, #12]
 8002fd6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fda:	f042 0204 	orr.w	r2, r2, #4
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	9304      	str	r3, [sp, #16]
 8002fe8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fea:	2312      	movs	r3, #18
 8002fec:	e9cd 6309 	strd	r6, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff6:	f7fd fdfb 	bl	8000bf0 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002ffa:	4b41      	ldr	r3, [pc, #260]	; (8003100 <HAL_UART_MspInit+0x1e4>)
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002ffc:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ffe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003002:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003004:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003008:	e9c4 1301 	strd	r1, r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800300c:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800300e:	6122      	str	r2, [r4, #16]
 8003010:	e7be      	b.n	8002f90 <HAL_UART_MspInit+0x74>
  else if(huart->Instance==USART2)
 8003012:	4a3c      	ldr	r2, [pc, #240]	; (8003104 <HAL_UART_MspInit+0x1e8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d123      	bne.n	8003060 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003018:	4b34      	ldr	r3, [pc, #208]	; (80030ec <HAL_UART_MspInit+0x1d0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800301a:	2004      	movs	r0, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301c:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301e:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 8003020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003022:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
 8003028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800302e:	9205      	str	r2, [sp, #20]
 8003030:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
 800303a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	9306      	str	r3, [sp, #24]
 8003042:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003044:	2312      	movs	r3, #18
 8003046:	e9cd 0309 	strd	r0, r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800304c:	482e      	ldr	r0, [pc, #184]	; (8003108 <HAL_UART_MspInit+0x1ec>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304e:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003052:	2307      	movs	r3, #7
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003054:	4c2d      	ldr	r4, [pc, #180]	; (800310c <HAL_UART_MspInit+0x1f0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003056:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003058:	f7fd fdca 	bl	8000bf0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800305c:	4b2c      	ldr	r3, [pc, #176]	; (8003110 <HAL_UART_MspInit+0x1f4>)
 800305e:	e7cd      	b.n	8002ffc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8003060:	4a2c      	ldr	r2, [pc, #176]	; (8003114 <HAL_UART_MspInit+0x1f8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d1a3      	bne.n	8002fae <HAL_UART_MspInit+0x92>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003066:	4b21      	ldr	r3, [pc, #132]	; (80030ec <HAL_UART_MspInit+0x1d0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003068:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800306a:	2407      	movs	r4, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306c:	2703      	movs	r7, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 800306e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003070:	a909      	add	r1, sp, #36	; 0x24
 8003072:	4829      	ldr	r0, [pc, #164]	; (8003118 <HAL_UART_MspInit+0x1fc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8003074:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
 800307a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800307c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8003080:	9207      	str	r2, [sp, #28]
 8003082:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003086:	f042 0202 	orr.w	r2, r2, #2
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800308e:	940d      	str	r4, [sp, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	9308      	str	r3, [sp, #32]
 8003096:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800309c:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e9cd 370b 	strd	r3, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a6:	f7fd fda3 	bl	8000bf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80030aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030ae:	a909      	add	r1, sp, #36	; 0x24
 80030b0:	4819      	ldr	r0, [pc, #100]	; (8003118 <HAL_UART_MspInit+0x1fc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030b2:	940d      	str	r4, [sp, #52]	; 0x34
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80030b4:	4c19      	ldr	r4, [pc, #100]	; (800311c <HAL_UART_MspInit+0x200>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b6:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030bc:	e9cd 670b 	strd	r6, r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c0:	f7fd fd96 	bl	8000bf0 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80030c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030c8:	4a15      	ldr	r2, [pc, #84]	; (8003120 <HAL_UART_MspInit+0x204>)
 80030ca:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030d2:	e9c4 3604 	strd	r3, r6, [r4, #16]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80030d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030da:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80030de:	e9c4 6606 	strd	r6, r6, [r4, #24]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030e2:	e9c4 3608 	strd	r3, r6, [r4, #32]
 80030e6:	e75a      	b.n	8002f9e <HAL_UART_MspInit+0x82>
 80030e8:	40004c00 	.word	0x40004c00
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40020800 	.word	0x40020800
 80030f4:	2000024c 	.word	0x2000024c
 80030f8:	40005000 	.word	0x40005000
 80030fc:	20000640 	.word	0x20000640
 8003100:	40026010 	.word	0x40026010
 8003104:	40004400 	.word	0x40004400
 8003108:	40020000 	.word	0x40020000
 800310c:	200002ac 	.word	0x200002ac
 8003110:	40026088 	.word	0x40026088
 8003114:	40004800 	.word	0x40004800
 8003118:	40020400 	.word	0x40020400
 800311c:	2000030c 	.word	0x2000030c
 8003120:	40026028 	.word	0x40026028
 8003124:	40026040 	.word	0x40026040

08003128 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003128:	4770      	bx	lr

0800312a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800312a:	e7fe      	b.n	800312a <HardFault_Handler>

0800312c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800312c:	e7fe      	b.n	800312c <MemManage_Handler>

0800312e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800312e:	e7fe      	b.n	800312e <BusFault_Handler>

08003130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003130:	e7fe      	b.n	8003130 <UsageFault_Handler>

08003132 <SVC_Handler>:
 8003132:	4770      	bx	lr

08003134 <DebugMon_Handler>:
 8003134:	4770      	bx	lr

08003136 <PendSV_Handler>:
 8003136:	4770      	bx	lr

08003138 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003138:	f7fd ba22 	b.w	8000580 <HAL_IncTick>

0800313c <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800313c:	4801      	ldr	r0, [pc, #4]	; (8003144 <DMA1_Stream0_IRQHandler+0x8>)
 800313e:	f7fd bc99 	b.w	8000a74 <HAL_DMA_IRQHandler>
 8003142:	bf00      	nop
 8003144:	20000640 	.word	0x20000640

08003148 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003148:	4801      	ldr	r0, [pc, #4]	; (8003150 <DMA1_Stream1_IRQHandler+0x8>)
 800314a:	f7fd bc93 	b.w	8000a74 <HAL_DMA_IRQHandler>
 800314e:	bf00      	nop
 8003150:	2000030c 	.word	0x2000030c

08003154 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003154:	4801      	ldr	r0, [pc, #4]	; (800315c <DMA1_Stream2_IRQHandler+0x8>)
 8003156:	f7fd bc8d 	b.w	8000a74 <HAL_DMA_IRQHandler>
 800315a:	bf00      	nop
 800315c:	2000024c 	.word	0x2000024c

08003160 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003160:	4801      	ldr	r0, [pc, #4]	; (8003168 <DMA1_Stream5_IRQHandler+0x8>)
 8003162:	f7fd bc87 	b.w	8000a74 <HAL_DMA_IRQHandler>
 8003166:	bf00      	nop
 8003168:	200002ac 	.word	0x200002ac

0800316c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800316c:	490f      	ldr	r1, [pc, #60]	; (80031ac <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800316e:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003170:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <SystemInit+0x44>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003186:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800318e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003192:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003194:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <SystemInit+0x48>)
 8003196:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800319e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80031a0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031a6:	608b      	str	r3, [r1, #8]
#endif
}
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	e000ed00 	.word	0xe000ed00
 80031b0:	40023800 	.word	0x40023800
 80031b4:	24003010 	.word	0x24003010

080031b8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80031b8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80031bc:	4905      	ldr	r1, [pc, #20]	; (80031d4 <__NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80031be:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80031c0:	68ca      	ldr	r2, [r1, #12]
 80031c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60cb      	str	r3, [r1, #12]
 80031ca:	f3bf 8f4f 	dsb	sy
    __NOP();
 80031ce:	bf00      	nop
 80031d0:	e7fd      	b.n	80031ce <__NVIC_SystemReset+0x16>
 80031d2:	bf00      	nop
 80031d4:	e000ed00 	.word	0xe000ed00
 80031d8:	05fa0004 	.word	0x05fa0004

080031dc <U3SetToReprogConfiguration>:
						// REMEBER that for reprogramming, we need to swap pins for the UART port on Spine (TxD-RxD pinswap), so that TxD(Spine) is connected to RxD-Servo)



// ****************************************************************************	// change UART port parameters to reprogramming mode	UART 3 RPIZW
void U3SetToReprogConfiguration() {
 80031dc:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef pinDefU3;

	PORTB->SET = GPIO_PIN_10;													// set TxD pin to high
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <U3SetToReprogConfiguration+0x54>)
 80031e0:	f44f 6580 	mov.w	r5, #1024	; 0x400
void U3SetToReprogConfiguration() {
 80031e4:	b086      	sub	sp, #24
	pinDefU3.Pin = GPIO_PIN_10;													// switch TxD to PP output pin
	pinDefU3.Mode = GPIO_MODE_OUTPUT_PP;
	pinDefU3.Pull = GPIO_PULLUP;
	pinDefU3.Speed = GPIO_SPEED_HIGH;
	pinDefU3.Alternate = 0;
	HAL_GPIO_Init(GPIOB, &pinDefU3);
 80031e6:	4e13      	ldr	r6, [pc, #76]	; (8003234 <U3SetToReprogConfiguration+0x58>)
	PORTB->SET = GPIO_PIN_10;													// set TxD pin to high
 80031e8:	811d      	strh	r5, [r3, #8]
	pinDefU3.Mode = GPIO_MODE_OUTPUT_PP;
 80031ea:	2301      	movs	r3, #1
	pinDefU3.Alternate = 0;
 80031ec:	2400      	movs	r4, #0
	HAL_GPIO_Init(GPIOB, &pinDefU3);
 80031ee:	a901      	add	r1, sp, #4
 80031f0:	4630      	mov	r0, r6
	pinDefU3.Pin = GPIO_PIN_10;													// switch TxD to PP output pin
 80031f2:	9501      	str	r5, [sp, #4]
	pinDefU3.Pull = GPIO_PULLUP;
 80031f4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	pinDefU3.Alternate = 0;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
	HAL_GPIO_Init(GPIOB, &pinDefU3);
 80031fe:	f7fd fcf7 	bl	8000bf0 <HAL_GPIO_Init>
	huart3.Init.BaudRate = FORWARD_PROGRAMMING_BAUD_RATE;
 8003202:	480d      	ldr	r0, [pc, #52]	; (8003238 <U3SetToReprogConfiguration+0x5c>)
	huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8003204:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	huart3.Init.Parity = UART_PARITY_EVEN;
 800320c:	6105      	str	r5, [r0, #16]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800320e:	6184      	str	r4, [r0, #24]
	huart3.Init.WordLength = UART_WORDLENGTH_9B;
 8003210:	e9c0 2301 	strd	r2, r3, [r0, #4]
	HAL_UART_Init(&huart3);
 8003214:	f7fe ff2b 	bl	800206e <HAL_UART_Init>
	pinDefU3.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
	pinDefU3.Pull = GPIO_NOPULL;
	pinDefU3.Alternate = GPIO_AF7_USART3;											// use AF7: USART3 TxD, RxD
	HAL_GPIO_Init(GPIOB, &pinDefU3);
 800321a:	a901      	add	r1, sp, #4
 800321c:	4630      	mov	r0, r6
	pinDefU3.Pull = GPIO_NOPULL;
 800321e:	e9cd 3402 	strd	r3, r4, [sp, #8]
	pinDefU3.Alternate = GPIO_AF7_USART3;											// use AF7: USART3 TxD, RxD
 8003222:	2307      	movs	r3, #7
 8003224:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &pinDefU3);
 8003226:	f7fd fce3 	bl	8000bf0 <HAL_GPIO_Init>
}
 800322a:	b006      	add	sp, #24
 800322c:	bd70      	pop	{r4, r5, r6, pc}
 800322e:	bf00      	nop
 8003230:	40020410 	.word	0x40020410
 8003234:	40020400 	.word	0x40020400
 8003238:	2000036c 	.word	0x2000036c

0800323c <uartForwardReprogramServoChainLeft>:



// ***********************************************************************************************************************
// ***********************************************************************************************************************
void uartForwardReprogramServoChainLeft(char servoID) {							// UART5, Left
 800323c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003240:	4604      	mov	r4, r0
 8003242:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef pinDef;

	// ************************************************************************ // "flush" RPIZW UART
	uartBusyWaitForTXDone();
 8003244:	f000 faf0 	bl	8003828 <uartBusyWaitForTXDone>

	// ************************************************************************ // get servo(s) in reprogramming mode and clear UART buffer
	uartLSendChar('\n');													// clear possibly left-over data
 8003248:	200a      	movs	r0, #10
 800324a:	f000 fb29 	bl	80038a0 <uartLSendChar>
	uartLSendChar(servoID);												// send servo ID
 800324e:	4620      	mov	r0, r4
 8003250:	f000 fb26 	bl	80038a0 <uartLSendChar>
	uartLSendString("BOOTL\n");												// send reprogramming command
 8003254:	4864      	ldr	r0, [pc, #400]	; (80033e8 <uartForwardReprogramServoChainLeft+0x1ac>)
 8003256:	f000 fb31 	bl	80038bc <uartLSendString>
	while (uartLTXWritePointer != uartLTXReadPointer) {						// transmit all data to servo chain
 800325a:	4b64      	ldr	r3, [pc, #400]	; (80033ec <uartForwardReprogramServoChainLeft+0x1b0>)
 800325c:	4a64      	ldr	r2, [pc, #400]	; (80033f0 <uartForwardReprogramServoChainLeft+0x1b4>)
 800325e:	2400      	movs	r4, #0
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	4964      	ldr	r1, [pc, #400]	; (80033f4 <uartForwardReprogramServoChainLeft+0x1b8>)
 8003264:	6813      	ldr	r3, [r2, #0]
		if ((UART5->ISR) & BIT(7)) {
			UART5->TDR = uartLTXBuffer[uartLTXReadPointer++];
 8003266:	4d64      	ldr	r5, [pc, #400]	; (80033f8 <uartForwardReprogramServoChainLeft+0x1bc>)
	while (uartLTXWritePointer != uartLTXReadPointer) {						// transmit all data to servo chain
 8003268:	4298      	cmp	r0, r3
 800326a:	d157      	bne.n	800331c <uartForwardReprogramServoChainLeft+0xe0>
 800326c:	b104      	cbz	r4, 8003270 <uartForwardReprogramServoChainLeft+0x34>
 800326e:	6010      	str	r0, [r2, #0]
			uartLTXReadPointer &= UART_BUFFER_MASK;
		}
	}
	while (((UART5->ISR) & BIT(6))==0) { asm volatile ("nop"); };				// wait for last character to finish transmission
 8003270:	69cb      	ldr	r3, [r1, #28]
 8003272:	065b      	lsls	r3, r3, #25
 8003274:	d55c      	bpl.n	8003330 <uartForwardReprogramServoChainLeft+0xf4>

	// ************************************************************************ // switch RxD and TxD for Servo Chain to input with pullup
	pinDef.Pin = GPIO_PIN_12;													// switch TxD (PC12) to input pin with pullup
	pinDef.Mode = GPIO_MODE_INPUT;
 8003276:	2400      	movs	r4, #0
 8003278:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	pinDef.Pull = GPIO_PULLUP;
	pinDef.Speed = GPIO_SPEED_HIGH;
 800327c:	2501      	movs	r5, #1
 800327e:	2603      	movs	r6, #3
	pinDef.Alternate = 0;
	HAL_GPIO_Init(GPIOC, &pinDef);
	pinDef.Pin = GPIO_PIN_2;													// switch RxD (PD2) to input pin with pullup
 8003280:	f04f 0804 	mov.w	r8, #4
	HAL_GPIO_Init(GPIOC, &pinDef);
 8003284:	a903      	add	r1, sp, #12
 8003286:	485d      	ldr	r0, [pc, #372]	; (80033fc <uartForwardReprogramServoChainLeft+0x1c0>)
	pinDef.Alternate = 0;
 8003288:	9407      	str	r4, [sp, #28]
			if (++progDataCounter == 512) allowedTimeoutMS = 1000;				// only one second allowed as of now
		}

		// ****************************************************************** // UART 5 (Legs Left Front)  -->  UART 3 (RPIZW)
		if ((-((DMA1_Stream0->NDTR) + uartLRXReadPointerDMA)) & (UART_BUFFER_MASK)) {
			newChar = uartLRXBufferDMA[uartLRXReadPointerDMA++];				// get from U5
 800328a:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8003420 <uartForwardReprogramServoChainLeft+0x1e4>
	pinDef.Mode = GPIO_MODE_INPUT;
 800328e:	e9cd 7403 	strd	r7, r4, [sp, #12]
	pinDef.Speed = GPIO_SPEED_HIGH;
 8003292:	e9cd 5605 	strd	r5, r6, [sp, #20]
	HAL_GPIO_Init(GPIOC, &pinDef);
 8003296:	f7fd fcab 	bl	8000bf0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &pinDef);
 800329a:	a903      	add	r1, sp, #12
 800329c:	4858      	ldr	r0, [pc, #352]	; (8003400 <uartForwardReprogramServoChainLeft+0x1c4>)
	pinDef.Alternate = 0;
 800329e:	9407      	str	r4, [sp, #28]
	pinDef.Mode = GPIO_MODE_INPUT;
 80032a0:	e9cd 8403 	strd	r8, r4, [sp, #12]
	pinDef.Speed = GPIO_SPEED_HIGH;
 80032a4:	e9cd 5605 	strd	r5, r6, [sp, #20]
	HAL_GPIO_Init(GPIOD, &pinDef);
 80032a8:	f7fd fca2 	bl	8000bf0 <HAL_GPIO_Init>
	sleepMS(200);																// wait
 80032ac:	20c8      	movs	r0, #200	; 0xc8
 80032ae:	f7fe ff45 	bl	800213c <sleepMS>
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;				// swap TxD and RxD pins
 80032b2:	2608      	movs	r6, #8
	uartDiscardAllIncomingData();												// discard all UART data
 80032b4:	f000 fb50 	bl	8003958 <uartDiscardAllIncomingData>
	huart5.Init.BaudRate = FORWARD_PROGRAMMING_BAUD_RATE;						// set baud rate for reprogramming
 80032b8:	4852      	ldr	r0, [pc, #328]	; (8003404 <uartForwardReprogramServoChainLeft+0x1c8>)
 80032ba:	f44f 4361 	mov.w	r3, #57600	; 0xe100
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;				// swap TxD and RxD pins
 80032be:	6246      	str	r6, [r0, #36]	; 0x24
	huart5.Init.WordLength = UART_WORDLENGTH_9B;								// enable 8 bits + parity -> 9 bits
 80032c0:	e9c0 3701 	strd	r3, r7, [r0, #4]
	huart5.Init.Parity = UART_PARITY_EVEN;										// set even parity
 80032c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c8:	6103      	str	r3, [r0, #16]
	huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80032ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ce:	6343      	str	r3, [r0, #52]	; 0x34
	HAL_UART_Init(&huart5);														// configure UART
 80032d0:	f7fe fecd 	bl	800206e <HAL_UART_Init>
	pinDef.Pin = GPIO_PIN_12;													// switch TxD (PC12) to UART function
 80032d4:	9703      	str	r7, [sp, #12]
	pinDef.Mode = GPIO_MODE_AF_PP;
 80032d6:	2702      	movs	r7, #2
	HAL_GPIO_Init(GPIOC, &pinDef);
 80032d8:	a903      	add	r1, sp, #12
 80032da:	4848      	ldr	r0, [pc, #288]	; (80033fc <uartForwardReprogramServoChainLeft+0x1c0>)
	pinDef.Alternate = GPIO_AF8_UART5;											// use AF8: UART5 TxD pin (now with RxD function because of pin swap)
 80032dc:	9607      	str	r6, [sp, #28]
	pinDef.Pull = GPIO_NOPULL;
 80032de:	e9cd 7404 	strd	r7, r4, [sp, #16]
	HAL_GPIO_Init(GPIOC, &pinDef);
 80032e2:	f7fd fc85 	bl	8000bf0 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &pinDef);
 80032e6:	a903      	add	r1, sp, #12
 80032e8:	4845      	ldr	r0, [pc, #276]	; (8003400 <uartForwardReprogramServoChainLeft+0x1c4>)
	pinDef.Pull = GPIO_NOPULL;
 80032ea:	9405      	str	r4, [sp, #20]
	pinDef.Alternate = GPIO_AF8_UART5;											// use AF8: UART5 RxD pin (now with TxD function because of pin swap)
 80032ec:	9607      	str	r6, [sp, #28]
		if ((-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 80032ee:	4e46      	ldr	r6, [pc, #280]	; (8003408 <uartForwardReprogramServoChainLeft+0x1cc>)
	pinDef.Mode = GPIO_MODE_AF_PP;
 80032f0:	e9cd 8703 	strd	r8, r7, [sp, #12]
	HAL_GPIO_Init(GPIOD, &pinDef);
 80032f4:	f7fd fc7c 	bl	8000bf0 <HAL_GPIO_Init>
			while (((UART5->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U5
 80032f8:	4f3e      	ldr	r7, [pc, #248]	; (80033f4 <uartForwardReprogramServoChainLeft+0x1b8>)
	U3SetToReprogConfiguration();
 80032fa:	f7ff ff6f 	bl	80031dc <U3SetToReprogConfiguration>
		if ((-((DMA1_Stream0->NDTR) + uartLRXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 80032fe:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8003424 <uartForwardReprogramServoChainLeft+0x1e8>
	long timeMemory = systemTimeHalfMS;
 8003302:	4842      	ldr	r0, [pc, #264]	; (800340c <uartForwardReprogramServoChainLeft+0x1d0>)
	long progDataCounter = 0;										// count how many chars are transmitted PC -> Spine -> Servo
 8003304:	4623      	mov	r3, r4
	long ledCounter=1;
 8003306:	462a      	mov	r2, r5
	long allowedTimeoutMS = 30000;									// allow 30000 sek until 512 chars are transmitted; afterwards "shorter"
 8003308:	f247 5430 	movw	r4, #30000	; 0x7530
				if ((PORTA->INP) & PORTA_LED_A) {
 800330c:	4d40      	ldr	r5, [pc, #256]	; (8003410 <uartForwardReprogramServoChainLeft+0x1d4>)
		if ((-((DMA1_Stream0->NDTR) + uartLRXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 800330e:	f8df c118 	ldr.w	ip, [pc, #280]	; 8003428 <uartForwardReprogramServoChainLeft+0x1ec>
	long timeMemory = systemTimeHalfMS;
 8003312:	6a41      	ldr	r1, [r0, #36]	; 0x24
		if (timeMemory + (allowedTimeoutMS*2) < systemTimeHalfMS) {
 8003314:	9001      	str	r0, [sp, #4]
	while (timeMemory) {
 8003316:	b969      	cbnz	r1, 8003334 <uartForwardReprogramServoChainLeft+0xf8>
		}

	}	// end of while "programming active"

	// ************************************************************************ // done with reprogramming, reset Spine to reset configuration
	NVIC_SystemReset();
 8003318:	f7ff ff4e 	bl	80031b8 <__NVIC_SystemReset>
		if ((UART5->ISR) & BIT(7)) {
 800331c:	69ce      	ldr	r6, [r1, #28]
 800331e:	0636      	lsls	r6, r6, #24
 8003320:	d5a2      	bpl.n	8003268 <uartForwardReprogramServoChainLeft+0x2c>
			UART5->TDR = uartLTXBuffer[uartLTXReadPointer++];
 8003322:	5cec      	ldrb	r4, [r5, r3]
 8003324:	3301      	adds	r3, #1
 8003326:	628c      	str	r4, [r1, #40]	; 0x28
			uartLTXReadPointer &= UART_BUFFER_MASK;
 8003328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332c:	2401      	movs	r4, #1
 800332e:	e79b      	b.n	8003268 <uartForwardReprogramServoChainLeft+0x2c>
	while (((UART5->ISR) & BIT(6))==0) { asm volatile ("nop"); };				// wait for last character to finish transmission
 8003330:	bf00      	nop
 8003332:	e79d      	b.n	8003270 <uartForwardReprogramServoChainLeft+0x34>
			if ((--ledCounter) == 0) {
 8003334:	3a01      	subs	r2, #1
 8003336:	d107      	bne.n	8003348 <uartForwardReprogramServoChainLeft+0x10c>
				if ((PORTA->INP) & PORTA_LED_A) {
 8003338:	682a      	ldr	r2, [r5, #0]
 800333a:	f012 0f02 	tst.w	r2, #2
 800333e:	f04f 0202 	mov.w	r2, #2
 8003342:	d04b      	beq.n	80033dc <uartForwardReprogramServoChainLeft+0x1a0>
					PORTA->CLR = PORTA_LED_A;
 8003344:	816a      	strh	r2, [r5, #10]
				ledCounter = 100000;
 8003346:	4a33      	ldr	r2, [pc, #204]	; (8003414 <uartForwardReprogramServoChainLeft+0x1d8>)
		if (timeMemory + (allowedTimeoutMS*2) < systemTimeHalfMS) {
 8003348:	9801      	ldr	r0, [sp, #4]
 800334a:	eb01 0a44 	add.w	sl, r1, r4, lsl #1
 800334e:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
		if ((-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 8003352:	4831      	ldr	r0, [pc, #196]	; (8003418 <uartForwardReprogramServoChainLeft+0x1dc>)
			timeMemory = 0;
 8003354:	45f2      	cmp	sl, lr
 8003356:	bf38      	it	cc
 8003358:	2100      	movcc	r1, #0
		if ((-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 800335a:	f8d6 e000 	ldr.w	lr, [r6]
 800335e:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8003362:	44f2      	add	sl, lr
 8003364:	f1ca 0a00 	rsb	sl, sl, #0
 8003368:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 800336c:	f1ba 0f00 	cmp.w	sl, #0
 8003370:	d016      	beq.n	80033a0 <uartForwardReprogramServoChainLeft+0x164>
			newChar = uart3RXBufferDMA[uart3RXReadPointerDMA++];				// get from U3
 8003372:	492a      	ldr	r1, [pc, #168]	; (800341c <uartForwardReprogramServoChainLeft+0x1e0>)
 8003374:	f811 100e 	ldrb.w	r1, [r1, lr]
 8003378:	f10e 0e01 	add.w	lr, lr, #1
			uart3RXReadPointerDMA &= UART_BUFFER_MASK;
 800337c:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
 8003380:	f8c6 e000 	str.w	lr, [r6]
			while (((UART5->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U5
 8003384:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 8003388:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800338c:	d028      	beq.n	80033e0 <uartForwardReprogramServoChainLeft+0x1a4>
			if (++progDataCounter == 512) allowedTimeoutMS = 1000;				// only one second allowed as of now
 800338e:	3301      	adds	r3, #1
			UART5->TDR = newChar;
 8003390:	62b9      	str	r1, [r7, #40]	; 0x28
			timeMemory = systemTimeHalfMS;									 	// we have received data; reset time memory
 8003392:	9901      	ldr	r1, [sp, #4]
			if (++progDataCounter == 512) allowedTimeoutMS = 1000;				// only one second allowed as of now
 8003394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
			timeMemory = systemTimeHalfMS;									 	// we have received data; reset time memory
 8003398:	6a49      	ldr	r1, [r1, #36]	; 0x24
			if (++progDataCounter == 512) allowedTimeoutMS = 1000;				// only one second allowed as of now
 800339a:	bf08      	it	eq
 800339c:	f44f 747a 	moveq.w	r4, #1000	; 0x3e8
		if ((-((DMA1_Stream0->NDTR) + uartLRXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 80033a0:	f8d8 a004 	ldr.w	sl, [r8, #4]
 80033a4:	f8dc e000 	ldr.w	lr, [ip]
 80033a8:	44f2      	add	sl, lr
 80033aa:	f1ca 0a00 	rsb	sl, sl, #0
 80033ae:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 80033b2:	f1ba 0f00 	cmp.w	sl, #0
 80033b6:	d0ae      	beq.n	8003316 <uartForwardReprogramServoChainLeft+0xda>
			newChar = uartLRXBufferDMA[uartLRXReadPointerDMA++];				// get from U5
 80033b8:	f819 a00e 	ldrb.w	sl, [r9, lr]
 80033bc:	f10e 0e01 	add.w	lr, lr, #1
			uartLRXReadPointerDMA &= UART_BUFFER_MASK;
 80033c0:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
 80033c4:	f8cc e000 	str.w	lr, [ip]
			while (((USART3->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U3
 80033c8:	f8df e060 	ldr.w	lr, [pc, #96]	; 800342c <uartForwardReprogramServoChainLeft+0x1f0>
 80033cc:	f8de b01c 	ldr.w	fp, [lr, #28]
 80033d0:	f01b 0f80 	tst.w	fp, #128	; 0x80
 80033d4:	d006      	beq.n	80033e4 <uartForwardReprogramServoChainLeft+0x1a8>
			USART3->TDR = newChar;
 80033d6:	f8ce a028 	str.w	sl, [lr, #40]	; 0x28
 80033da:	e79c      	b.n	8003316 <uartForwardReprogramServoChainLeft+0xda>
					PORTA->SET = PORTA_LED_A;
 80033dc:	812a      	strh	r2, [r5, #8]
 80033de:	e7b2      	b.n	8003346 <uartForwardReprogramServoChainLeft+0x10a>
			while (((UART5->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U5
 80033e0:	bf00      	nop
 80033e2:	e7cf      	b.n	8003384 <uartForwardReprogramServoChainLeft+0x148>
			while (((USART3->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U3
 80033e4:	bf00      	nop
 80033e6:	e7f1      	b.n	80033cc <uartForwardReprogramServoChainLeft+0x190>
 80033e8:	08003eea 	.word	0x08003eea
 80033ec:	2000021c 	.word	0x2000021c
 80033f0:	20000218 	.word	0x20000218
 80033f4:	40005000 	.word	0x40005000
 80033f8:	200006a0 	.word	0x200006a0
 80033fc:	40020800 	.word	0x40020800
 8003400:	40020c00 	.word	0x40020c00
 8003404:	20000478 	.word	0x20000478
 8003408:	200001fc 	.word	0x200001fc
 800340c:	40000c00 	.word	0x40000c00
 8003410:	40020010 	.word	0x40020010
 8003414:	000186a0 	.word	0x000186a0
 8003418:	40026028 	.word	0x40026028
 800341c:	20017000 	.word	0x20017000
 8003420:	20015000 	.word	0x20015000
 8003424:	40026010 	.word	0x40026010
 8003428:	20000210 	.word	0x20000210
 800342c:	40004800 	.word	0x40004800

08003430 <uartForwardReprogramServoChainRight>:
}


// ***********************************************************************************************************************
// ***********************************************************************************************************************
void uartForwardReprogramServoChainRight(char servoID) {						// UART4, Right
 8003430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003434:	4604      	mov	r4, r0
 8003436:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef pinDef;

	// ************************************************************************ // "flush" RPIZW UART
	uartBusyWaitForTXDone();
 8003438:	f000 f9f6 	bl	8003828 <uartBusyWaitForTXDone>

	// ************************************************************************ // get servo(s) in reprogramming mode and clear UART buffer
	uartRSendChar('\n');														// clear possibly left-over data
 800343c:	200a      	movs	r0, #10
 800343e:	f000 fa47 	bl	80038d0 <uartRSendChar>
	uartRSendChar(servoID);												// send servo ID
 8003442:	4620      	mov	r0, r4
 8003444:	f000 fa44 	bl	80038d0 <uartRSendChar>
	uartRSendString("BOOTL\n");												// send reprogramming command
 8003448:	485c      	ldr	r0, [pc, #368]	; (80035bc <uartForwardReprogramServoChainRight+0x18c>)
 800344a:	f000 fa4f 	bl	80038ec <uartRSendString>
	while (uartRTXWritePointer != uartRTXReadPointer) {						// transmit all data to servo chain
 800344e:	4b5c      	ldr	r3, [pc, #368]	; (80035c0 <uartForwardReprogramServoChainRight+0x190>)
 8003450:	4a5c      	ldr	r2, [pc, #368]	; (80035c4 <uartForwardReprogramServoChainRight+0x194>)
 8003452:	2400      	movs	r4, #0
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	495c      	ldr	r1, [pc, #368]	; (80035c8 <uartForwardReprogramServoChainRight+0x198>)
 8003458:	6813      	ldr	r3, [r2, #0]
		if ((UART4->ISR) & BIT(7)) {
			UART4->TDR = uartRTXBuffer[uartRTXReadPointer++];
 800345a:	4d5c      	ldr	r5, [pc, #368]	; (80035cc <uartForwardReprogramServoChainRight+0x19c>)
	while (uartRTXWritePointer != uartRTXReadPointer) {						// transmit all data to servo chain
 800345c:	4298      	cmp	r0, r3
 800345e:	d147      	bne.n	80034f0 <uartForwardReprogramServoChainRight+0xc0>
 8003460:	b104      	cbz	r4, 8003464 <uartForwardReprogramServoChainRight+0x34>
 8003462:	6010      	str	r0, [r2, #0]
			uartRTXReadPointer &= UART_BUFFER_MASK;
		}
	}
	while (((UART4->ISR) & BIT(6))==0) { asm volatile ("nop"); };				// wait for last character to finish transmission
 8003464:	69cb      	ldr	r3, [r1, #28]
 8003466:	0658      	lsls	r0, r3, #25
 8003468:	d54c      	bpl.n	8003504 <uartForwardReprogramServoChainRight+0xd4>

	// ************************************************************************ // switch RxD and TxD for Servo Chain to input with pullup
	pinDef.Pin = (GPIO_PIN_10 | GPIO_PIN_11);									// switch TxD (PC10) and RxD (PC11) to input pin with pullup
	pinDef.Mode = GPIO_MODE_INPUT;
 800346a:	2400      	movs	r4, #0
	pinDef.Pull = GPIO_PULLUP;
	pinDef.Speed = GPIO_SPEED_HIGH;
 800346c:	2303      	movs	r3, #3
	pinDef.Mode = GPIO_MODE_INPUT;
 800346e:	f44f 6740 	mov.w	r7, #3072	; 0xc00
	pinDef.Speed = GPIO_SPEED_HIGH;
 8003472:	2501      	movs	r5, #1
	pinDef.Alternate = 0;
	HAL_GPIO_Init(GPIOC, &pinDef);
 8003474:	a903      	add	r1, sp, #12
 8003476:	4856      	ldr	r0, [pc, #344]	; (80035d0 <uartForwardReprogramServoChainRight+0x1a0>)
	pinDef.Alternate = 0;
 8003478:	9407      	str	r4, [sp, #28]

	// ************************************************************************ // change UART port parameters to reprogramming mode	UART 4 Legs Left Back
	huart4.Init.BaudRate = FORWARD_PROGRAMMING_BAUD_RATE;						// set baud rate for reprogramming
	huart4.Init.WordLength = UART_WORDLENGTH_9B;								// enable 8 bits + parity -> 9 bits
	huart4.Init.Parity = UART_PARITY_EVEN;										// set even parity
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;				// swap TxD and RxD pins
 800347a:	2608      	movs	r6, #8
			timeMemory = systemTimeHalfMS;									  	// we have received data; reset time memory
			if (++progDataCounter == 512) allowedTimeoutMS = 1000;				// only one second allowed as of now
		}

		// ****************************************************************** // UART 4 (Legs Left Back)  -->  UART 3 (RPIZW)
		if ((-((DMA1_Stream2->NDTR) + uartRRXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 800347c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80035f0 <uartForwardReprogramServoChainRight+0x1c0>
			newChar = uartRRXBufferDMA[uartRRXReadPointerDMA++];				// get from U4
 8003480:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80035f4 <uartForwardReprogramServoChainRight+0x1c4>
	pinDef.Speed = GPIO_SPEED_HIGH;
 8003484:	e9cd 5305 	strd	r5, r3, [sp, #20]
	pinDef.Mode = GPIO_MODE_INPUT;
 8003488:	e9cd 7403 	strd	r7, r4, [sp, #12]
	HAL_GPIO_Init(GPIOC, &pinDef);
 800348c:	f7fd fbb0 	bl	8000bf0 <HAL_GPIO_Init>
	sleepMS(200);																// wait
 8003490:	20c8      	movs	r0, #200	; 0xc8
 8003492:	f7fe fe53 	bl	800213c <sleepMS>
	uartDiscardAllIncomingData();												// discard all UART data
 8003496:	f000 fa5f 	bl	8003958 <uartDiscardAllIncomingData>
	huart4.Init.BaudRate = FORWARD_PROGRAMMING_BAUD_RATE;						// set baud rate for reprogramming
 800349a:	484e      	ldr	r0, [pc, #312]	; (80035d4 <uartForwardReprogramServoChainRight+0x1a4>)
	huart4.Init.WordLength = UART_WORDLENGTH_9B;								// enable 8 bits + parity -> 9 bits
 800349c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80034a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;				// swap TxD and RxD pins
 80034a4:	6246      	str	r6, [r0, #36]	; 0x24
	huart4.Init.WordLength = UART_WORDLENGTH_9B;								// enable 8 bits + parity -> 9 bits
 80034a6:	e9c0 2301 	strd	r2, r3, [r0, #4]
	huart4.Init.Parity = UART_PARITY_EVEN;										// set even parity
 80034aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ae:	6103      	str	r3, [r0, #16]
	huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80034b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b4:	6343      	str	r3, [r0, #52]	; 0x34
	HAL_UART_Init(&huart4);														// configure UART
 80034b6:	f7fe fdda 	bl	800206e <HAL_UART_Init>
	pinDef.Mode = GPIO_MODE_AF_PP;
 80034ba:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOC, &pinDef);
 80034bc:	a903      	add	r1, sp, #12
 80034be:	4844      	ldr	r0, [pc, #272]	; (80035d0 <uartForwardReprogramServoChainRight+0x1a0>)
	pinDef.Pin = (GPIO_PIN_10 | GPIO_PIN_11);									// switch TxD (PC10) and RxD (PC11) to UART function
 80034c0:	9703      	str	r7, [sp, #12]
			while (((UART4->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U4
 80034c2:	f107 2740 	add.w	r7, r7, #1073758208	; 0x40004000
	pinDef.Alternate = GPIO_AF8_UART4;											// use AF8: UART4 RxD and TxD pins (pin swap)
 80034c6:	9607      	str	r6, [sp, #28]
		if ((-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 80034c8:	4e43      	ldr	r6, [pc, #268]	; (80035d8 <uartForwardReprogramServoChainRight+0x1a8>)
	pinDef.Pull = GPIO_NOPULL;
 80034ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
	HAL_GPIO_Init(GPIOC, &pinDef);
 80034ce:	f7fd fb8f 	bl	8000bf0 <HAL_GPIO_Init>
	U3SetToReprogConfiguration();
 80034d2:	f7ff fe83 	bl	80031dc <U3SetToReprogConfiguration>
	long timeMemory = systemTimeHalfMS;
 80034d6:	4841      	ldr	r0, [pc, #260]	; (80035dc <uartForwardReprogramServoChainRight+0x1ac>)
	long progDataCounter = 0;										// count how many chars are transmitted PC -> Spine -> Servo
 80034d8:	4622      	mov	r2, r4
	long ledCounter=1;
 80034da:	462b      	mov	r3, r5
	long allowedTimeoutMS = 30000;									// allow 30000 sek until 512 chars are transmitted; afterwards "shorter"
 80034dc:	f247 5430 	movw	r4, #30000	; 0x7530
				if ((PORTA->INP) & PORTA_LED_A) {
 80034e0:	4d3f      	ldr	r5, [pc, #252]	; (80035e0 <uartForwardReprogramServoChainRight+0x1b0>)
		if ((-((DMA1_Stream2->NDTR) + uartRRXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 80034e2:	f8df c114 	ldr.w	ip, [pc, #276]	; 80035f8 <uartForwardReprogramServoChainRight+0x1c8>
	long timeMemory = systemTimeHalfMS;
 80034e6:	6a41      	ldr	r1, [r0, #36]	; 0x24
		if (timeMemory + (allowedTimeoutMS*2) < systemTimeHalfMS) {
 80034e8:	9001      	str	r0, [sp, #4]
	while (timeMemory) {
 80034ea:	b969      	cbnz	r1, 8003508 <uartForwardReprogramServoChainRight+0xd8>
		}

	}	// end of while "programming active"

	// ************************************************************************ // done with reprogramming, reset Spine to reset configuration
	NVIC_SystemReset();
 80034ec:	f7ff fe64 	bl	80031b8 <__NVIC_SystemReset>
		if ((UART4->ISR) & BIT(7)) {
 80034f0:	69ce      	ldr	r6, [r1, #28]
 80034f2:	0636      	lsls	r6, r6, #24
 80034f4:	d5b2      	bpl.n	800345c <uartForwardReprogramServoChainRight+0x2c>
			UART4->TDR = uartRTXBuffer[uartRTXReadPointer++];
 80034f6:	5cec      	ldrb	r4, [r5, r3]
 80034f8:	3301      	adds	r3, #1
 80034fa:	628c      	str	r4, [r1, #40]	; 0x28
			uartRTXReadPointer &= UART_BUFFER_MASK;
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	2401      	movs	r4, #1
 8003502:	e7ab      	b.n	800345c <uartForwardReprogramServoChainRight+0x2c>
	while (((UART4->ISR) & BIT(6))==0) { asm volatile ("nop"); };				// wait for last character to finish transmission
 8003504:	bf00      	nop
 8003506:	e7ad      	b.n	8003464 <uartForwardReprogramServoChainRight+0x34>
			if ((--ledCounter) == 0) {
 8003508:	3b01      	subs	r3, #1
 800350a:	d107      	bne.n	800351c <uartForwardReprogramServoChainRight+0xec>
				if ((PORTA->INP) & PORTA_LED_A) {
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	f013 0f02 	tst.w	r3, #2
 8003512:	f04f 0302 	mov.w	r3, #2
 8003516:	d04b      	beq.n	80035b0 <uartForwardReprogramServoChainRight+0x180>
					PORTA->CLR = PORTA_LED_A;
 8003518:	816b      	strh	r3, [r5, #10]
				ledCounter = 100000;
 800351a:	4b32      	ldr	r3, [pc, #200]	; (80035e4 <uartForwardReprogramServoChainRight+0x1b4>)
		if (timeMemory + (allowedTimeoutMS*2) < systemTimeHalfMS) {
 800351c:	9801      	ldr	r0, [sp, #4]
 800351e:	eb01 0a44 	add.w	sl, r1, r4, lsl #1
 8003522:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
		if ((-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 8003526:	4830      	ldr	r0, [pc, #192]	; (80035e8 <uartForwardReprogramServoChainRight+0x1b8>)
			timeMemory = 0;
 8003528:	45f2      	cmp	sl, lr
 800352a:	bf38      	it	cc
 800352c:	2100      	movcc	r1, #0
		if ((-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 800352e:	f8d6 e000 	ldr.w	lr, [r6]
 8003532:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8003536:	44f2      	add	sl, lr
 8003538:	f1ca 0a00 	rsb	sl, sl, #0
 800353c:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 8003540:	f1ba 0f00 	cmp.w	sl, #0
 8003544:	d016      	beq.n	8003574 <uartForwardReprogramServoChainRight+0x144>
			newChar = uart3RXBufferDMA[uart3RXReadPointerDMA++];				// get from U3
 8003546:	4929      	ldr	r1, [pc, #164]	; (80035ec <uartForwardReprogramServoChainRight+0x1bc>)
 8003548:	f811 100e 	ldrb.w	r1, [r1, lr]
 800354c:	f10e 0e01 	add.w	lr, lr, #1
			uart3RXReadPointerDMA &= UART_BUFFER_MASK;
 8003550:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
 8003554:	f8c6 e000 	str.w	lr, [r6]
			while (((UART4->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U4
 8003558:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 800355c:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8003560:	d028      	beq.n	80035b4 <uartForwardReprogramServoChainRight+0x184>
			if (++progDataCounter == 512) allowedTimeoutMS = 1000;				// only one second allowed as of now
 8003562:	3201      	adds	r2, #1
			UART4->TDR = newChar;
 8003564:	62b9      	str	r1, [r7, #40]	; 0x28
			timeMemory = systemTimeHalfMS;									  	// we have received data; reset time memory
 8003566:	9901      	ldr	r1, [sp, #4]
			if (++progDataCounter == 512) allowedTimeoutMS = 1000;				// only one second allowed as of now
 8003568:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
			timeMemory = systemTimeHalfMS;									  	// we have received data; reset time memory
 800356c:	6a49      	ldr	r1, [r1, #36]	; 0x24
			if (++progDataCounter == 512) allowedTimeoutMS = 1000;				// only one second allowed as of now
 800356e:	bf08      	it	eq
 8003570:	f44f 747a 	moveq.w	r4, #1000	; 0x3e8
		if ((-((DMA1_Stream2->NDTR) + uartRRXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 8003574:	f8d8 a004 	ldr.w	sl, [r8, #4]
 8003578:	f8dc e000 	ldr.w	lr, [ip]
 800357c:	44f2      	add	sl, lr
 800357e:	f1ca 0a00 	rsb	sl, sl, #0
 8003582:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 8003586:	f1ba 0f00 	cmp.w	sl, #0
 800358a:	d0ae      	beq.n	80034ea <uartForwardReprogramServoChainRight+0xba>
			newChar = uartRRXBufferDMA[uartRRXReadPointerDMA++];				// get from U4
 800358c:	f819 a00e 	ldrb.w	sl, [r9, lr]
 8003590:	f10e 0e01 	add.w	lr, lr, #1
			uartRRXReadPointerDMA &= UART_BUFFER_MASK;
 8003594:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
 8003598:	f8cc e000 	str.w	lr, [ip]
			while (((USART3->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U3
 800359c:	f8df e05c 	ldr.w	lr, [pc, #92]	; 80035fc <uartForwardReprogramServoChainRight+0x1cc>
 80035a0:	f8de b01c 	ldr.w	fp, [lr, #28]
 80035a4:	f01b 0f80 	tst.w	fp, #128	; 0x80
 80035a8:	d006      	beq.n	80035b8 <uartForwardReprogramServoChainRight+0x188>
			USART3->TDR = newChar;
 80035aa:	f8ce a028 	str.w	sl, [lr, #40]	; 0x28
 80035ae:	e79c      	b.n	80034ea <uartForwardReprogramServoChainRight+0xba>
					PORTA->SET = PORTA_LED_A;
 80035b0:	812b      	strh	r3, [r5, #8]
 80035b2:	e7b2      	b.n	800351a <uartForwardReprogramServoChainRight+0xea>
			while (((UART4->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U4
 80035b4:	bf00      	nop
 80035b6:	e7cf      	b.n	8003558 <uartForwardReprogramServoChainRight+0x128>
			while (((USART3->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U3
 80035b8:	bf00      	nop
 80035ba:	e7f1      	b.n	80035a0 <uartForwardReprogramServoChainRight+0x170>
 80035bc:	08003eea 	.word	0x08003eea
 80035c0:	20000230 	.word	0x20000230
 80035c4:	2000022c 	.word	0x2000022c
 80035c8:	40004c00 	.word	0x40004c00
 80035cc:	200026a0 	.word	0x200026a0
 80035d0:	40020800 	.word	0x40020800
 80035d4:	20000540 	.word	0x20000540
 80035d8:	200001fc 	.word	0x200001fc
 80035dc:	40000c00 	.word	0x40000c00
 80035e0:	40020010 	.word	0x40020010
 80035e4:	000186a0 	.word	0x000186a0
 80035e8:	40026028 	.word	0x40026028
 80035ec:	20017000 	.word	0x20017000
 80035f0:	40026040 	.word	0x40026040
 80035f4:	20013000 	.word	0x20013000
 80035f8:	20000224 	.word	0x20000224
 80035fc:	40004800 	.word	0x40004800

08003600 <uartForwardReprogramServoChainSpine>:
}


// ***********************************************************************************************************************
// ***********************************************************************************************************************
void uartForwardReprogramServoChainSpine(char servoID) {						// USART2, Spine
 8003600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003604:	4604      	mov	r4, r0
 8003606:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef pinDef;

	// ************************************************************************ // "flush" RPIZW UART
	uartBusyWaitForTXDone();
 8003608:	f000 f90e 	bl	8003828 <uartBusyWaitForTXDone>

	// ************************************************************************ // get servo(s) in reprogramming mode and clear UART buffer
	uartSSendChar('\n');														// clear possibly left-over data
 800360c:	200a      	movs	r0, #10
 800360e:	f000 f977 	bl	8003900 <uartSSendChar>
	uartSSendChar(servoID);												// send servo ID
 8003612:	4620      	mov	r0, r4
 8003614:	f000 f974 	bl	8003900 <uartSSendChar>
	uartSSendString("BOOTL\n");												// send reprogramming command
 8003618:	485d      	ldr	r0, [pc, #372]	; (8003790 <uartForwardReprogramServoChainSpine+0x190>)
 800361a:	f000 f97f 	bl	800391c <uartSSendString>
	while (uartSTXWritePointer != uartSTXReadPointer) {						// transmit all data to servo chain
 800361e:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <uartForwardReprogramServoChainSpine+0x194>)
 8003620:	4a5d      	ldr	r2, [pc, #372]	; (8003798 <uartForwardReprogramServoChainSpine+0x198>)
 8003622:	2400      	movs	r4, #0
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	495d      	ldr	r1, [pc, #372]	; (800379c <uartForwardReprogramServoChainSpine+0x19c>)
 8003628:	6813      	ldr	r3, [r2, #0]
		if ((USART2->ISR) & BIT(7)) {
			USART2->TDR = uartSTXBuffer[uartSTXReadPointer++];
 800362a:	4d5d      	ldr	r5, [pc, #372]	; (80037a0 <uartForwardReprogramServoChainSpine+0x1a0>)
	while (uartSTXWritePointer != uartSTXReadPointer) {						// transmit all data to servo chain
 800362c:	4298      	cmp	r0, r3
 800362e:	d148      	bne.n	80036c2 <uartForwardReprogramServoChainSpine+0xc2>
 8003630:	b104      	cbz	r4, 8003634 <uartForwardReprogramServoChainSpine+0x34>
 8003632:	6010      	str	r0, [r2, #0]
			uartSTXReadPointer &= UART_BUFFER_MASK;
		}
	}
	while (((USART2->ISR) & BIT(6))==0) { asm volatile ("nop"); };				// wait for last character to finish transmission
 8003634:	69cb      	ldr	r3, [r1, #28]
 8003636:	065b      	lsls	r3, r3, #25
 8003638:	d54d      	bpl.n	80036d6 <uartForwardReprogramServoChainSpine+0xd6>

	// ************************************************************************ // switch RxD and TxD for Servo Chain to input with pullup
	pinDef.Pin = (GPIO_PIN_2 | GPIO_PIN_3);										// switch TxD (PA2) and RxD (PA3) to input pin with pullup
	pinDef.Mode = GPIO_MODE_INPUT;
 800363a:	260c      	movs	r6, #12
 800363c:	2400      	movs	r4, #0
	pinDef.Pull = GPIO_PULLUP;
	pinDef.Speed = GPIO_SPEED_HIGH;
 800363e:	2303      	movs	r3, #3
 8003640:	2501      	movs	r5, #1
	pinDef.Alternate = 0;
	HAL_GPIO_Init(GPIOA, &pinDef);
 8003642:	eb0d 0106 	add.w	r1, sp, r6
 8003646:	4857      	ldr	r0, [pc, #348]	; (80037a4 <uartForwardReprogramServoChainSpine+0x1a4>)
	pinDef.Alternate = 0;
 8003648:	9407      	str	r4, [sp, #28]
		// ****************************************************************** // UART 3 (RPIZW)  -->  USART 2 (Head Spine)
		if ((-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA)) & (UART_BUFFER_MASK)) {
			newChar = uart3RXBufferDMA[uart3RXReadPointerDMA++];				// get from U3
			uart3RXReadPointerDMA &= UART_BUFFER_MASK;

			while (((USART2->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U2
 800364a:	4f54      	ldr	r7, [pc, #336]	; (800379c <uartForwardReprogramServoChainSpine+0x19c>)
			timeMemory = systemTimeHalfMS;									    // we have received data; reset time memory
			if (++progDataCounter == 512) allowedTimeoutMS = 1000;				// only one second allowed as of now
		}

		// ****************************************************************** // UART 2 (Head Spine)  -->  UART 3 (RPIZW)
		if ((-((DMA1_Stream5->NDTR) + uartSRXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 800364c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80037c4 <uartForwardReprogramServoChainSpine+0x1c4>
			newChar = uartSRXBufferDMA[uartSRXReadPointerDMA++];				// get from U2
 8003650:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80037c8 <uartForwardReprogramServoChainSpine+0x1c8>
	pinDef.Speed = GPIO_SPEED_HIGH;
 8003654:	e9cd 5305 	strd	r5, r3, [sp, #20]
	pinDef.Mode = GPIO_MODE_INPUT;
 8003658:	e9cd 6403 	strd	r6, r4, [sp, #12]
	HAL_GPIO_Init(GPIOA, &pinDef);
 800365c:	f7fd fac8 	bl	8000bf0 <HAL_GPIO_Init>
	sleepMS(200);																// wait
 8003660:	20c8      	movs	r0, #200	; 0xc8
 8003662:	f7fe fd6b 	bl	800213c <sleepMS>
	uartDiscardAllIncomingData();												// discard all UART data
 8003666:	f000 f977 	bl	8003958 <uartDiscardAllIncomingData>
	huart2.Init.BaudRate = FORWARD_PROGRAMMING_BAUD_RATE;						// set baud rate for reprogramming
 800366a:	484f      	ldr	r0, [pc, #316]	; (80037a8 <uartForwardReprogramServoChainSpine+0x1a8>)
	huart2.Init.WordLength = UART_WORDLENGTH_9B;								// enable 8 bits + parity -> 9 bits
 800366c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003674:	e9c0 2301 	strd	r2, r3, [r0, #4]
	huart2.Init.Parity = UART_PARITY_EVEN;										// set even parity
 8003678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800367c:	6103      	str	r3, [r0, #16]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;				// swap TxD and RxD pins
 800367e:	2308      	movs	r3, #8
 8003680:	6243      	str	r3, [r0, #36]	; 0x24
	huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003686:	6343      	str	r3, [r0, #52]	; 0x34
	HAL_UART_Init(&huart2);														// configure UART
 8003688:	f7fe fcf1 	bl	800206e <HAL_UART_Init>
	pinDef.Mode = GPIO_MODE_AF_PP;
 800368c:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOA, &pinDef);
 800368e:	eb0d 0106 	add.w	r1, sp, r6
 8003692:	4844      	ldr	r0, [pc, #272]	; (80037a4 <uartForwardReprogramServoChainSpine+0x1a4>)
	pinDef.Pin = (GPIO_PIN_2 | GPIO_PIN_3);										// switch TxD (PA2) and RxD (PA3) to UART function
 8003694:	9603      	str	r6, [sp, #12]
		if ((-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 8003696:	4e45      	ldr	r6, [pc, #276]	; (80037ac <uartForwardReprogramServoChainSpine+0x1ac>)
	pinDef.Pull = GPIO_NOPULL;
 8003698:	e9cd 3404 	strd	r3, r4, [sp, #16]
	pinDef.Alternate = GPIO_AF7_USART2;											// use AF7: USART2 RxD and TxD pins (pin swap)
 800369c:	2307      	movs	r3, #7
 800369e:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOA, &pinDef);
 80036a0:	f7fd faa6 	bl	8000bf0 <HAL_GPIO_Init>
	U3SetToReprogConfiguration();
 80036a4:	f7ff fd9a 	bl	80031dc <U3SetToReprogConfiguration>
	long timeMemory = systemTimeHalfMS;
 80036a8:	4841      	ldr	r0, [pc, #260]	; (80037b0 <uartForwardReprogramServoChainSpine+0x1b0>)
	long progDataCounter = 0;										// count how many chars are transmitted PC -> Spine -> Servo
 80036aa:	4622      	mov	r2, r4
	long ledCounter=1;
 80036ac:	462b      	mov	r3, r5
	long allowedTimeoutMS = 30000;									// allow 30000 sek until 512 chars are transmitted; afterwards "shorter"
 80036ae:	f247 5430 	movw	r4, #30000	; 0x7530
				if ((PORTA->INP) & PORTA_LED_A) {
 80036b2:	4d40      	ldr	r5, [pc, #256]	; (80037b4 <uartForwardReprogramServoChainSpine+0x1b4>)
		if ((-((DMA1_Stream5->NDTR) + uartSRXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 80036b4:	f8df c114 	ldr.w	ip, [pc, #276]	; 80037cc <uartForwardReprogramServoChainSpine+0x1cc>
	long timeMemory = systemTimeHalfMS;
 80036b8:	6a41      	ldr	r1, [r0, #36]	; 0x24
		if (timeMemory + (allowedTimeoutMS*2) < systemTimeHalfMS) {
 80036ba:	9001      	str	r0, [sp, #4]
	while (timeMemory) {
 80036bc:	b969      	cbnz	r1, 80036da <uartForwardReprogramServoChainSpine+0xda>
		}

	}	// end of while "programming active"

	// ************************************************************************ // done with reprogramming, reset Spine to reset configuration
	NVIC_SystemReset();
 80036be:	f7ff fd7b 	bl	80031b8 <__NVIC_SystemReset>
		if ((USART2->ISR) & BIT(7)) {
 80036c2:	69ce      	ldr	r6, [r1, #28]
 80036c4:	0636      	lsls	r6, r6, #24
 80036c6:	d5b1      	bpl.n	800362c <uartForwardReprogramServoChainSpine+0x2c>
			USART2->TDR = uartSTXBuffer[uartSTXReadPointer++];
 80036c8:	5cec      	ldrb	r4, [r5, r3]
 80036ca:	3301      	adds	r3, #1
 80036cc:	628c      	str	r4, [r1, #40]	; 0x28
			uartSTXReadPointer &= UART_BUFFER_MASK;
 80036ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d2:	2401      	movs	r4, #1
 80036d4:	e7aa      	b.n	800362c <uartForwardReprogramServoChainSpine+0x2c>
	while (((USART2->ISR) & BIT(6))==0) { asm volatile ("nop"); };				// wait for last character to finish transmission
 80036d6:	bf00      	nop
 80036d8:	e7ac      	b.n	8003634 <uartForwardReprogramServoChainSpine+0x34>
			if ((--ledCounter) == 0) {
 80036da:	3b01      	subs	r3, #1
 80036dc:	d107      	bne.n	80036ee <uartForwardReprogramServoChainSpine+0xee>
				if ((PORTA->INP) & PORTA_LED_A) {
 80036de:	682b      	ldr	r3, [r5, #0]
 80036e0:	f013 0f02 	tst.w	r3, #2
 80036e4:	f04f 0302 	mov.w	r3, #2
 80036e8:	d04b      	beq.n	8003782 <uartForwardReprogramServoChainSpine+0x182>
					PORTA->CLR = PORTA_LED_A;
 80036ea:	816b      	strh	r3, [r5, #10]
				ledCounter = 100000;
 80036ec:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <uartForwardReprogramServoChainSpine+0x1b8>)
		if (timeMemory + (allowedTimeoutMS*2) < systemTimeHalfMS) {
 80036ee:	9801      	ldr	r0, [sp, #4]
 80036f0:	eb01 0a44 	add.w	sl, r1, r4, lsl #1
 80036f4:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
		if ((-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 80036f8:	4830      	ldr	r0, [pc, #192]	; (80037bc <uartForwardReprogramServoChainSpine+0x1bc>)
			timeMemory = 0;
 80036fa:	45f2      	cmp	sl, lr
 80036fc:	bf38      	it	cc
 80036fe:	2100      	movcc	r1, #0
		if ((-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 8003700:	f8d6 e000 	ldr.w	lr, [r6]
 8003704:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8003708:	44f2      	add	sl, lr
 800370a:	f1ca 0a00 	rsb	sl, sl, #0
 800370e:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 8003712:	f1ba 0f00 	cmp.w	sl, #0
 8003716:	d016      	beq.n	8003746 <uartForwardReprogramServoChainSpine+0x146>
			newChar = uart3RXBufferDMA[uart3RXReadPointerDMA++];				// get from U3
 8003718:	4929      	ldr	r1, [pc, #164]	; (80037c0 <uartForwardReprogramServoChainSpine+0x1c0>)
 800371a:	f811 100e 	ldrb.w	r1, [r1, lr]
 800371e:	f10e 0e01 	add.w	lr, lr, #1
			uart3RXReadPointerDMA &= UART_BUFFER_MASK;
 8003722:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
 8003726:	f8c6 e000 	str.w	lr, [r6]
			while (((USART2->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U2
 800372a:	f8d7 e01c 	ldr.w	lr, [r7, #28]
 800372e:	f01e 0f80 	tst.w	lr, #128	; 0x80
 8003732:	d028      	beq.n	8003786 <uartForwardReprogramServoChainSpine+0x186>
			if (++progDataCounter == 512) allowedTimeoutMS = 1000;				// only one second allowed as of now
 8003734:	3201      	adds	r2, #1
			USART2->TDR = newChar;
 8003736:	62b9      	str	r1, [r7, #40]	; 0x28
			timeMemory = systemTimeHalfMS;									    // we have received data; reset time memory
 8003738:	9901      	ldr	r1, [sp, #4]
			if (++progDataCounter == 512) allowedTimeoutMS = 1000;				// only one second allowed as of now
 800373a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
			timeMemory = systemTimeHalfMS;									    // we have received data; reset time memory
 800373e:	6a49      	ldr	r1, [r1, #36]	; 0x24
			if (++progDataCounter == 512) allowedTimeoutMS = 1000;				// only one second allowed as of now
 8003740:	bf08      	it	eq
 8003742:	f44f 747a 	moveq.w	r4, #1000	; 0x3e8
		if ((-((DMA1_Stream5->NDTR) + uartSRXReadPointerDMA)) & (UART_BUFFER_MASK)) {
 8003746:	f8d8 a004 	ldr.w	sl, [r8, #4]
 800374a:	f8dc e000 	ldr.w	lr, [ip]
 800374e:	44f2      	add	sl, lr
 8003750:	f1ca 0a00 	rsb	sl, sl, #0
 8003754:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
 8003758:	f1ba 0f00 	cmp.w	sl, #0
 800375c:	d0ae      	beq.n	80036bc <uartForwardReprogramServoChainSpine+0xbc>
			newChar = uartSRXBufferDMA[uartSRXReadPointerDMA++];				// get from U2
 800375e:	f819 a00e 	ldrb.w	sl, [r9, lr]
 8003762:	f10e 0e01 	add.w	lr, lr, #1
			uartSRXReadPointerDMA &= UART_BUFFER_MASK;
 8003766:	f3ce 0e0b 	ubfx	lr, lr, #0, #12
 800376a:	f8cc e000 	str.w	lr, [ip]
			while (((USART3->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U3
 800376e:	f8df e060 	ldr.w	lr, [pc, #96]	; 80037d0 <uartForwardReprogramServoChainSpine+0x1d0>
 8003772:	f8de b01c 	ldr.w	fp, [lr, #28]
 8003776:	f01b 0f80 	tst.w	fp, #128	; 0x80
 800377a:	d006      	beq.n	800378a <uartForwardReprogramServoChainSpine+0x18a>
			USART3->TDR = newChar;
 800377c:	f8ce a028 	str.w	sl, [lr, #40]	; 0x28
 8003780:	e79c      	b.n	80036bc <uartForwardReprogramServoChainSpine+0xbc>
					PORTA->SET = PORTA_LED_A;
 8003782:	812b      	strh	r3, [r5, #8]
 8003784:	e7b2      	b.n	80036ec <uartForwardReprogramServoChainSpine+0xec>
			while (((USART2->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U2
 8003786:	bf00      	nop
 8003788:	e7cf      	b.n	800372a <uartForwardReprogramServoChainSpine+0x12a>
			while (((USART3->ISR) & BIT(7)) == 0) { asm volatile ("nop"); }		// send to U3
 800378a:	bf00      	nop
 800378c:	e7f1      	b.n	8003772 <uartForwardReprogramServoChainSpine+0x172>
 800378e:	bf00      	nop
 8003790:	08003eea 	.word	0x08003eea
 8003794:	20000244 	.word	0x20000244
 8003798:	20000240 	.word	0x20000240
 800379c:	40004400 	.word	0x40004400
 80037a0:	200036a0 	.word	0x200036a0
 80037a4:	40020000 	.word	0x40020000
 80037a8:	200005c0 	.word	0x200005c0
 80037ac:	200001fc 	.word	0x200001fc
 80037b0:	40000c00 	.word	0x40000c00
 80037b4:	40020010 	.word	0x40020010
 80037b8:	000186a0 	.word	0x000186a0
 80037bc:	40026028 	.word	0x40026028
 80037c0:	20017000 	.word	0x20017000
 80037c4:	40026088 	.word	0x40026088
 80037c8:	20011000 	.word	0x20011000
 80037cc:	20000238 	.word	0x20000238
 80037d0:	40004800 	.word	0x40004800

080037d4 <uartShowVersion>:
#include <mouseSpine.h>


// ***********************************************************************************************************************
void uartShowVersion(void) {
 80037d4:	b508      	push	{r3, lr}
	  uartSendStringDirect("\n\nHBP Mouse Spine V");
 80037d6:	480d      	ldr	r0, [pc, #52]	; (800380c <uartShowVersion+0x38>)
 80037d8:	f000 f8b4 	bl	8003944 <uartSendStringDirect>
	  uartSendStringDirect(SOFTWARE_VERSION);
 80037dc:	480c      	ldr	r0, [pc, #48]	; (8003810 <uartShowVersion+0x3c>)
 80037de:	f000 f8b1 	bl	8003944 <uartSendStringDirect>

	  uartSendStringDirect(": ");
 80037e2:	480c      	ldr	r0, [pc, #48]	; (8003814 <uartShowVersion+0x40>)
 80037e4:	f000 f8ae 	bl	8003944 <uartSendStringDirect>
	  uartSendStringDirect(__DATE__);
 80037e8:	480b      	ldr	r0, [pc, #44]	; (8003818 <uartShowVersion+0x44>)
 80037ea:	f000 f8ab 	bl	8003944 <uartSendStringDirect>
	  uartSendStringDirect(", ");
 80037ee:	480b      	ldr	r0, [pc, #44]	; (800381c <uartShowVersion+0x48>)
 80037f0:	f000 f8a8 	bl	8003944 <uartSendStringDirect>
	  uartSendStringDirect(__TIME__);
 80037f4:	480a      	ldr	r0, [pc, #40]	; (8003820 <uartShowVersion+0x4c>)
 80037f6:	f000 f8a5 	bl	8003944 <uartSendStringDirect>

#ifdef DEBUG
	  uartSendStringDirect("  DEBUG");
 80037fa:	480a      	ldr	r0, [pc, #40]	; (8003824 <uartShowVersion+0x50>)
 80037fc:	f000 f8a2 	bl	8003944 <uartSendStringDirect>
#endif

	  uartSendCharDirect('\n');
 8003800:	200a      	movs	r0, #10
}
 8003802:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	  uartSendCharDirect('\n');
 8003806:	f000 b893 	b.w	8003930 <uartSendCharDirect>
 800380a:	bf00      	nop
 800380c:	08003ef1 	.word	0x08003ef1
 8003810:	08003f05 	.word	0x08003f05
 8003814:	0800400b 	.word	0x0800400b
 8003818:	08003f09 	.word	0x08003f09
 800381c:	08003f15 	.word	0x08003f15
 8003820:	08003f18 	.word	0x08003f18
 8003824:	08003f21 	.word	0x08003f21

08003828 <uartBusyWaitForTXDone>:
//void uartIterate() {
//}

// ***********************************************************************************************************************
void uartBusyWaitForTXDone() {
	while (uart3TXWritePointer != uart3TXReadPointer) {									// UART transmit
 8003828:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <uartBusyWaitForTXDone+0x38>)
 800382a:	2000      	movs	r0, #0
 800382c:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <uartBusyWaitForTXDone+0x3c>)
 800382e:	490e      	ldr	r1, [pc, #56]	; (8003868 <uartBusyWaitForTXDone+0x40>)
void uartBusyWaitForTXDone() {
 8003830:	b570      	push	{r4, r5, r6, lr}
	while (uart3TXWritePointer != uart3TXReadPointer) {									// UART transmit
 8003832:	681c      	ldr	r4, [r3, #0]
		if ((USART3->ISR) & BIT(7)) {
			USART3->TDR = uart3TXBuffer[uart3TXReadPointer++];
 8003834:	4d0d      	ldr	r5, [pc, #52]	; (800386c <uartBusyWaitForTXDone+0x44>)
 8003836:	6813      	ldr	r3, [r2, #0]
	while (uart3TXWritePointer != uart3TXReadPointer) {									// UART transmit
 8003838:	42a3      	cmp	r3, r4
 800383a:	d105      	bne.n	8003848 <uartBusyWaitForTXDone+0x20>
 800383c:	b100      	cbz	r0, 8003840 <uartBusyWaitForTXDone+0x18>
 800383e:	6013      	str	r3, [r2, #0]
			uart3TXReadPointer &= UART_BUFFER_MASK;
		}
	}

	while (((USART3->ISR) & BIT(6))==0) { asm volatile ("nop"); };
 8003840:	69cb      	ldr	r3, [r1, #28]
 8003842:	065b      	lsls	r3, r3, #25
 8003844:	d50a      	bpl.n	800385c <uartBusyWaitForTXDone+0x34>
}
 8003846:	bd70      	pop	{r4, r5, r6, pc}
		if ((USART3->ISR) & BIT(7)) {
 8003848:	69ce      	ldr	r6, [r1, #28]
 800384a:	0636      	lsls	r6, r6, #24
 800384c:	d5f4      	bpl.n	8003838 <uartBusyWaitForTXDone+0x10>
			USART3->TDR = uart3TXBuffer[uart3TXReadPointer++];
 800384e:	5ce8      	ldrb	r0, [r5, r3]
 8003850:	3301      	adds	r3, #1
 8003852:	6288      	str	r0, [r1, #40]	; 0x28
			uart3TXReadPointer &= UART_BUFFER_MASK;
 8003854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003858:	2001      	movs	r0, #1
 800385a:	e7ed      	b.n	8003838 <uartBusyWaitForTXDone+0x10>
	while (((USART3->ISR) & BIT(6))==0) { asm volatile ("nop"); };
 800385c:	bf00      	nop
 800385e:	e7ef      	b.n	8003840 <uartBusyWaitForTXDone+0x18>
 8003860:	20000208 	.word	0x20000208
 8003864:	20000204 	.word	0x20000204
 8003868:	40004800 	.word	0x40004800
 800386c:	200016a0 	.word	0x200016a0

08003870 <uartSendChar>:

// ***********************************************************************************************************************		RPIZW
inline void uartSendChar(char c) {
//	while (((USART3->ISR) & BIT(7)) == 0) { asm("nop"); };
//	USART3->TDR = c;
	uart3TXBuffer[uart3TXWritePointer++]=c;
 8003870:	4a04      	ldr	r2, [pc, #16]	; (8003884 <uartSendChar+0x14>)
 8003872:	4905      	ldr	r1, [pc, #20]	; (8003888 <uartSendChar+0x18>)
 8003874:	6813      	ldr	r3, [r2, #0]
 8003876:	54c8      	strb	r0, [r1, r3]
 8003878:	3301      	adds	r3, #1
	uart3TXWritePointer &= UART_BUFFER_MASK;
 800387a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387e:	6013      	str	r3, [r2, #0]
}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000208 	.word	0x20000208
 8003888:	200016a0 	.word	0x200016a0

0800388c <uartSendString>:

void uartSendString(char *s) {
 800388c:	b510      	push	{r4, lr}
 800388e:	1e44      	subs	r4, r0, #1
	while ((*s) != 0) {uartSendChar(*(s++));}
 8003890:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003894:	b900      	cbnz	r0, 8003898 <uartSendString+0xc>
}
 8003896:	bd10      	pop	{r4, pc}
	while ((*s) != 0) {uartSendChar(*(s++));}
 8003898:	f7ff ffea 	bl	8003870 <uartSendChar>
 800389c:	e7f8      	b.n	8003890 <uartSendString+0x4>
	...

080038a0 <uartLSendChar>:

// ***********************************************************************************************************************		Left
inline void uartLSendChar(char c) {
	uartLTXBuffer[uartLTXWritePointer++]=c;
 80038a0:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <uartLSendChar+0x14>)
 80038a2:	4905      	ldr	r1, [pc, #20]	; (80038b8 <uartLSendChar+0x18>)
 80038a4:	6813      	ldr	r3, [r2, #0]
 80038a6:	54c8      	strb	r0, [r1, r3]
 80038a8:	3301      	adds	r3, #1
	uartLTXWritePointer &= UART_BUFFER_MASK;
 80038aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ae:	6013      	str	r3, [r2, #0]
}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	2000021c 	.word	0x2000021c
 80038b8:	200006a0 	.word	0x200006a0

080038bc <uartLSendString>:
void uartLSendString(char *s) {
 80038bc:	b510      	push	{r4, lr}
 80038be:	1e44      	subs	r4, r0, #1
	while ((*s) != 0) {uartLSendChar(*(s++));}
 80038c0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80038c4:	b900      	cbnz	r0, 80038c8 <uartLSendString+0xc>
}
 80038c6:	bd10      	pop	{r4, pc}
	while ((*s) != 0) {uartLSendChar(*(s++));}
 80038c8:	f7ff ffea 	bl	80038a0 <uartLSendChar>
 80038cc:	e7f8      	b.n	80038c0 <uartLSendString+0x4>
	...

080038d0 <uartRSendChar>:

// ***********************************************************************************************************************		Right
inline void uartRSendChar(char c) {
	uartRTXBuffer[uartRTXWritePointer++]=c;
 80038d0:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <uartRSendChar+0x14>)
 80038d2:	4905      	ldr	r1, [pc, #20]	; (80038e8 <uartRSendChar+0x18>)
 80038d4:	6813      	ldr	r3, [r2, #0]
 80038d6:	54c8      	strb	r0, [r1, r3]
 80038d8:	3301      	adds	r3, #1
	uartRTXWritePointer &= UART_BUFFER_MASK;
 80038da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038de:	6013      	str	r3, [r2, #0]
}
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000230 	.word	0x20000230
 80038e8:	200026a0 	.word	0x200026a0

080038ec <uartRSendString>:
void uartRSendString(char *s) {
 80038ec:	b510      	push	{r4, lr}
 80038ee:	1e44      	subs	r4, r0, #1
	while ((*s) != 0) {uartRSendChar(*(s++));}
 80038f0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80038f4:	b900      	cbnz	r0, 80038f8 <uartRSendString+0xc>
}
 80038f6:	bd10      	pop	{r4, pc}
	while ((*s) != 0) {uartRSendChar(*(s++));}
 80038f8:	f7ff ffea 	bl	80038d0 <uartRSendChar>
 80038fc:	e7f8      	b.n	80038f0 <uartRSendString+0x4>
	...

08003900 <uartSSendChar>:

// ***********************************************************************************************************************		Spine
inline void uartSSendChar(char c) {
	uartSTXBuffer[uartSTXWritePointer++]=c;
 8003900:	4a04      	ldr	r2, [pc, #16]	; (8003914 <uartSSendChar+0x14>)
 8003902:	4905      	ldr	r1, [pc, #20]	; (8003918 <uartSSendChar+0x18>)
 8003904:	6813      	ldr	r3, [r2, #0]
 8003906:	54c8      	strb	r0, [r1, r3]
 8003908:	3301      	adds	r3, #1
	uartSTXWritePointer &= UART_BUFFER_MASK;
 800390a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390e:	6013      	str	r3, [r2, #0]
}
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000244 	.word	0x20000244
 8003918:	200036a0 	.word	0x200036a0

0800391c <uartSSendString>:
void uartSSendString(char *s) {
 800391c:	b510      	push	{r4, lr}
 800391e:	1e44      	subs	r4, r0, #1
	while ((*s) != 0) {uartSSendChar(*(s++));}
 8003920:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003924:	b900      	cbnz	r0, 8003928 <uartSSendString+0xc>
}
 8003926:	bd10      	pop	{r4, pc}
	while ((*s) != 0) {uartSSendChar(*(s++));}
 8003928:	f7ff ffea 	bl	8003900 <uartSSendChar>
 800392c:	e7f8      	b.n	8003920 <uartSSendString+0x4>
	...

08003930 <uartSendCharDirect>:


// ***********************************************************************************************************************
inline void uartSendCharDirect(char c) {
	while (((USART3->ISR) & BIT(7)) == 0) { asm volatile ("nop"); };
 8003930:	4b03      	ldr	r3, [pc, #12]	; (8003940 <uartSendCharDirect+0x10>)
 8003932:	69da      	ldr	r2, [r3, #28]
 8003934:	0612      	lsls	r2, r2, #24
 8003936:	d501      	bpl.n	800393c <uartSendCharDirect+0xc>
	USART3->TDR = c;
 8003938:	6298      	str	r0, [r3, #40]	; 0x28
}
 800393a:	4770      	bx	lr
	while (((USART3->ISR) & BIT(7)) == 0) { asm volatile ("nop"); };
 800393c:	bf00      	nop
 800393e:	e7f8      	b.n	8003932 <uartSendCharDirect+0x2>
 8003940:	40004800 	.word	0x40004800

08003944 <uartSendStringDirect>:

void uartSendStringDirect(char *s) {
 8003944:	1e41      	subs	r1, r0, #1
 8003946:	b508      	push	{r3, lr}
	while ((*s) != 0) {uartSendCharDirect(*(s++));}
 8003948:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800394c:	b900      	cbnz	r0, 8003950 <uartSendStringDirect+0xc>
}
 800394e:	bd08      	pop	{r3, pc}
	while ((*s) != 0) {uartSendCharDirect(*(s++));}
 8003950:	f7ff ffee 	bl	8003930 <uartSendCharDirect>
 8003954:	e7f8      	b.n	8003948 <uartSendStringDirect+0x4>
	...

08003958 <uartDiscardAllIncomingData>:
// ***********************************************************************************************************************
void uartDiscardAllIncomingData(void) {

	long UART_BytesAvailable;

	UART_BytesAvailable = (-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA)) & (UART_BUFFER_MASK);				// U3 - RasPIZW UART receive (UART3)
 8003958:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <uartDiscardAllIncomingData+0x3c>)
	uart3RXReadPointerDMA += UART_BytesAvailable;
	uart3RXReadPointerDMA &= UART_BUFFER_MASK;
 800395a:	4a0f      	ldr	r2, [pc, #60]	; (8003998 <uartDiscardAllIncomingData+0x40>)
	UART_BytesAvailable = (-((DMA1_Stream1->NDTR) + uart3RXReadPointerDMA)) & (UART_BUFFER_MASK);				// U3 - RasPIZW UART receive (UART3)
 800395c:	685b      	ldr	r3, [r3, #4]
	uart3RXReadPointerDMA += UART_BytesAvailable;
 800395e:	425b      	negs	r3, r3
	uart3RXReadPointerDMA &= UART_BUFFER_MASK;
 8003960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003964:	6013      	str	r3, [r2, #0]

	UART_BytesAvailable = (-((DMA1_Stream5->NDTR) + uartSRXReadPointerDMA)) & (UART_BUFFER_MASK);				// U2 to Servo Chain Spine (UART 2)
 8003966:	4b0d      	ldr	r3, [pc, #52]	; (800399c <uartDiscardAllIncomingData+0x44>)
	uartSRXReadPointerDMA += UART_BytesAvailable;
	uartSRXReadPointerDMA &= UART_BUFFER_MASK;
 8003968:	4a0d      	ldr	r2, [pc, #52]	; (80039a0 <uartDiscardAllIncomingData+0x48>)
	UART_BytesAvailable = (-((DMA1_Stream5->NDTR) + uartSRXReadPointerDMA)) & (UART_BUFFER_MASK);				// U2 to Servo Chain Spine (UART 2)
 800396a:	685b      	ldr	r3, [r3, #4]
	uartSRXReadPointerDMA += UART_BytesAvailable;
 800396c:	425b      	negs	r3, r3
	uartSRXReadPointerDMA &= UART_BUFFER_MASK;
 800396e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003972:	6013      	str	r3, [r2, #0]

	UART_BytesAvailable = (-((DMA1_Stream2->NDTR) + uartRRXReadPointerDMA)) & (UART_BUFFER_MASK);				// U4 to Servo Chain Left (UART 4)
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <uartDiscardAllIncomingData+0x4c>)
	uartRRXReadPointerDMA += UART_BytesAvailable;
	uartRRXReadPointerDMA &= UART_BUFFER_MASK;
 8003976:	4a0c      	ldr	r2, [pc, #48]	; (80039a8 <uartDiscardAllIncomingData+0x50>)
	UART_BytesAvailable = (-((DMA1_Stream2->NDTR) + uartRRXReadPointerDMA)) & (UART_BUFFER_MASK);				// U4 to Servo Chain Left (UART 4)
 8003978:	685b      	ldr	r3, [r3, #4]
	uartRRXReadPointerDMA += UART_BytesAvailable;
 800397a:	425b      	negs	r3, r3
	uartRRXReadPointerDMA &= UART_BUFFER_MASK;
 800397c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003980:	6013      	str	r3, [r2, #0]

	UART_BytesAvailable = (-((DMA1_Stream0->NDTR) + uartLRXReadPointerDMA)) & (UART_BUFFER_MASK);				// U5 to Servo Chain Right (UART 5)
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <uartDiscardAllIncomingData+0x54>)
	uartLRXReadPointerDMA += UART_BytesAvailable;
	uartLRXReadPointerDMA &= UART_BUFFER_MASK;
 8003984:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <uartDiscardAllIncomingData+0x58>)
	UART_BytesAvailable = (-((DMA1_Stream0->NDTR) + uartLRXReadPointerDMA)) & (UART_BUFFER_MASK);				// U5 to Servo Chain Right (UART 5)
 8003986:	685b      	ldr	r3, [r3, #4]
	uartLRXReadPointerDMA += UART_BytesAvailable;
 8003988:	425b      	negs	r3, r3
	uartLRXReadPointerDMA &= UART_BUFFER_MASK;
 800398a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40026028 	.word	0x40026028
 8003998:	200001fc 	.word	0x200001fc
 800399c:	40026088 	.word	0x40026088
 80039a0:	20000238 	.word	0x20000238
 80039a4:	40026040 	.word	0x40026040
 80039a8:	20000224 	.word	0x20000224
 80039ac:	40026010 	.word	0x40026010
 80039b0:	20000210 	.word	0x20000210

080039b4 <uartShowHelp>:
#define parseHexDigit(c)  (PARSE_HEX_LOOKUP[((c) & 0x1F)])



// ***********************************************************************************************************************
void uartShowHelp(void) {
 80039b4:	b508      	push	{r3, lr}

	uartShowVersion();
 80039b6:	f7ff ff0d 	bl	80037d4 <uartShowVersion>

	uartSendStringDirect("Available Commands:\n");
 80039ba:	4814      	ldr	r0, [pc, #80]	; (8003a0c <uartShowHelp+0x58>)
 80039bc:	f7ff ffc2 	bl	8003944 <uartSendStringDirect>

	uartSendStringDirect("  :ixxx       forward xxx to servo chain i [0..2]\n");
 80039c0:	4813      	ldr	r0, [pc, #76]	; (8003a10 <uartShowHelp+0x5c>)
 80039c2:	f7ff ffbf 	bl	8003944 <uartSendStringDirect>
	uartSendCharDirect('\n');
 80039c6:	200a      	movs	r0, #10
 80039c8:	f7ff ffb2 	bl	8003930 <uartSendCharDirect>

	uartSendStringDirect("  !PS[+,-]    set power to servos\n");
 80039cc:	4811      	ldr	r0, [pc, #68]	; (8003a14 <uartShowHelp+0x60>)
 80039ce:	f7ff ffb9 	bl	8003944 <uartSendStringDirect>
	uartSendStringDirect("  !PR[+,-][D] set power to RPIZW (D:delayed by 30sec)\n");
 80039d2:	4811      	ldr	r0, [pc, #68]	; (8003a18 <uartShowHelp+0x64>)
 80039d4:	f7ff ffb6 	bl	8003944 <uartSendStringDirect>
	uartSendCharDirect('\n');
 80039d8:	200a      	movs	r0, #10
 80039da:	f7ff ffa9 	bl	8003930 <uartSendCharDirect>

	uartSendStringDirect("  !L[-,+,.]   set LED off/on/blinking\n");
 80039de:	480f      	ldr	r0, [pc, #60]	; (8003a1c <uartShowHelp+0x68>)
 80039e0:	f7ff ffb0 	bl	8003944 <uartSendStringDirect>
	uartSendStringDirect("  ?S          send all sensor values (debug)\n");
 80039e4:	480e      	ldr	r0, [pc, #56]	; (8003a20 <uartShowHelp+0x6c>)
 80039e6:	f7ff ffad 	bl	8003944 <uartSendStringDirect>
	uartSendCharDirect('\n');
 80039ea:	200a      	movs	r0, #10
 80039ec:	f7ff ffa0 	bl	8003930 <uartSendCharDirect>

	uartSendStringDirect("  RESET       restart spine\n");
 80039f0:	480c      	ldr	r0, [pc, #48]	; (8003a24 <uartShowHelp+0x70>)
 80039f2:	f7ff ffa7 	bl	8003944 <uartSendStringDirect>
	uartSendStringDirect("  BOOTL       enter boot-loader for reprogramming\n");
 80039f6:	480c      	ldr	r0, [pc, #48]	; (8003a28 <uartShowHelp+0x74>)
 80039f8:	f7ff ffa4 	bl	8003944 <uartSendStringDirect>
	uartSendStringDirect("  PROG<C><S>  reprogram servo <S>[0..4] on chain <C>[0..2,L,R,S]\n");
 80039fc:	480b      	ldr	r0, [pc, #44]	; (8003a2c <uartShowHelp+0x78>)
 80039fe:	f7ff ffa1 	bl	8003944 <uartSendStringDirect>

	uartSendCharDirect('\n');
 8003a02:	200a      	movs	r0, #10
}
 8003a04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uartSendCharDirect('\n');
 8003a08:	f7ff bf92 	b.w	8003930 <uartSendCharDirect>
 8003a0c:	0800400e 	.word	0x0800400e
 8003a10:	08004023 	.word	0x08004023
 8003a14:	08004056 	.word	0x08004056
 8003a18:	08004079 	.word	0x08004079
 8003a1c:	080040b0 	.word	0x080040b0
 8003a20:	080040d7 	.word	0x080040d7
 8003a24:	08004105 	.word	0x08004105
 8003a28:	08004122 	.word	0x08004122
 8003a2c:	08004155 	.word	0x08004155

08003a30 <uartParseCommand>:


// ***********************************************************************************************************************
void uartParseCommand(char *cmd) {
 8003a30:	b5f0      	push	{r4, r5, r6, r7, lr}

	if (cmd[0] == ':') {
 8003a32:	7803      	ldrb	r3, [r0, #0]
void uartParseCommand(char *cmd) {
 8003a34:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8003a38:	4604      	mov	r4, r0
	if (cmd[0] == ':') {
 8003a3a:	2b3a      	cmp	r3, #58	; 0x3a
void uartParseCommand(char *cmd) {
 8003a3c:	b081      	sub	sp, #4
	if (cmd[0] == ':') {
 8003a3e:	d123      	bne.n	8003a88 <uartParseCommand+0x58>
		char target = cmd[1]-'0';											// try to parse servo chain by number
 8003a40:	7842      	ldrb	r2, [r0, #1]
 8003a42:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
		if (target==0) { uartLSendString(cmd+2); return; }
 8003a46:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003a4a:	d106      	bne.n	8003a5a <uartParseCommand+0x2a>
 8003a4c:	1ca0      	adds	r0, r4, #2
 8003a4e:	f7ff ff35 	bl	80038bc <uartLSendString>
		uartShowHelp();
		return;
	}
	uartSendString("?: ");												// unknown command
	uartSendString(cmd);
}
 8003a52:	f50d 5d80 	add.w	sp, sp, #4096	; 0x1000
 8003a56:	b001      	add	sp, #4
 8003a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (target==1) { uartRSendString(cmd+2); return; }
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d103      	bne.n	8003a66 <uartParseCommand+0x36>
 8003a5e:	1ca0      	adds	r0, r4, #2
 8003a60:	f7ff ff44 	bl	80038ec <uartRSendString>
 8003a64:	e7f5      	b.n	8003a52 <uartParseCommand+0x22>
		if (target==2) { uartSSendString(cmd+2); return; }
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d103      	bne.n	8003a72 <uartParseCommand+0x42>
 8003a6a:	1ca0      	adds	r0, r4, #2
 8003a6c:	f7ff ff56 	bl	800391c <uartSSendString>
 8003a70:	e7ef      	b.n	8003a52 <uartParseCommand+0x22>
		if (cmd[1]=='L') { uartLSendString(cmd+2); return; }
 8003a72:	2a4c      	cmp	r2, #76	; 0x4c
 8003a74:	d0ea      	beq.n	8003a4c <uartParseCommand+0x1c>
		if (cmd[1]=='R') { uartRSendString(cmd+2); return; }
 8003a76:	2a52      	cmp	r2, #82	; 0x52
 8003a78:	d0f1      	beq.n	8003a5e <uartParseCommand+0x2e>
		if (cmd[1]=='S') { uartSSendString(cmd+2); return; }
 8003a7a:	2a53      	cmp	r2, #83	; 0x53
 8003a7c:	d0f5      	beq.n	8003a6a <uartParseCommand+0x3a>
		uartSendString("forward wrong id ([0..2] or 1-letter name [L,R,S])... ");		// show error
 8003a7e:	4891      	ldr	r0, [pc, #580]	; (8003cc4 <uartParseCommand+0x294>)
	uartSendString("?: ");												// unknown command
 8003a80:	f7ff ff04 	bl	800388c <uartSendString>
	uartSendString(cmd);
 8003a84:	4620      	mov	r0, r4
 8003a86:	e01a      	b.n	8003abe <uartParseCommand+0x8e>
	(void) strcpy(cmdU, cmd);
 8003a88:	4601      	mov	r1, r0
 8003a8a:	4668      	mov	r0, sp
 8003a8c:	f000 f9a6 	bl	8003ddc <strcpy>
	(void) strupr(cmdU);
 8003a90:	4668      	mov	r0, sp
 8003a92:	f000 f9bd 	bl	8003e10 <strupr>
	if (strncmp(cmdU, "!P", 2)==0) {									// POWER command
 8003a96:	2202      	movs	r2, #2
 8003a98:	498b      	ldr	r1, [pc, #556]	; (8003cc8 <uartParseCommand+0x298>)
 8003a9a:	4668      	mov	r0, sp
 8003a9c:	f000 f9a6 	bl	8003dec <strncmp>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d14d      	bne.n	8003b40 <uartParseCommand+0x110>
		if (cmd[2]=='-') {												// power ALL off immediately
 8003aa4:	78a3      	ldrb	r3, [r4, #2]
 8003aa6:	2b2d      	cmp	r3, #45	; 0x2d
 8003aa8:	d10c      	bne.n	8003ac4 <uartParseCommand+0x94>
			PORTC->CLR = PORTC_ENABLE_RPIZW_POWER;
 8003aaa:	4b88      	ldr	r3, [pc, #544]	; (8003ccc <uartParseCommand+0x29c>)
 8003aac:	f44f 7280 	mov.w	r2, #256	; 0x100
			uartSendString("-P-\n");
 8003ab0:	4887      	ldr	r0, [pc, #540]	; (8003cd0 <uartParseCommand+0x2a0>)
			PORTC->CLR = PORTC_ENABLE_RPIZW_POWER;
 8003ab2:	815a      	strh	r2, [r3, #10]
			PORTB->CLR = PORTB_ENABLE_SERVOS_POWER;
 8003ab4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003ab8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003abc:	815a      	strh	r2, [r3, #10]
	uartSendString(cmd);
 8003abe:	f7ff fee5 	bl	800388c <uartSendString>
 8003ac2:	e7c6      	b.n	8003a52 <uartParseCommand+0x22>
		if (cmdU[2]=='R') {
 8003ac4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8003ac8:	2a52      	cmp	r2, #82	; 0x52
 8003aca:	d122      	bne.n	8003b12 <uartParseCommand+0xe2>
			if (cmdU[4] == 'D') {										// delay requested? wait 30sec
 8003acc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ad0:	2b44      	cmp	r3, #68	; 0x44
 8003ad2:	d112      	bne.n	8003afa <uartParseCommand+0xca>
				uartSendStringDirect("Waiting 30sec before power change\n");
 8003ad4:	f44f 7596 	mov.w	r5, #300	; 0x12c
					PORTA->CLR = PORTA_LED_A;
 8003ad8:	4e7e      	ldr	r6, [pc, #504]	; (8003cd4 <uartParseCommand+0x2a4>)
 8003ada:	2702      	movs	r7, #2
				uartBusyWaitForTXDone();
 8003adc:	f7ff fea4 	bl	8003828 <uartBusyWaitForTXDone>
				uartSendStringDirect("Waiting 30sec before power change\n");
 8003ae0:	487d      	ldr	r0, [pc, #500]	; (8003cd8 <uartParseCommand+0x2a8>)
 8003ae2:	f7ff ff2f 	bl	8003944 <uartSendStringDirect>
					sleepMS(50);
 8003ae6:	2032      	movs	r0, #50	; 0x32
 8003ae8:	f7fe fb28 	bl	800213c <sleepMS>
					PORTA->CLR = PORTA_LED_A;
 8003aec:	8177      	strh	r7, [r6, #10]
					sleepMS(50);
 8003aee:	2032      	movs	r0, #50	; 0x32
 8003af0:	f7fe fb24 	bl	800213c <sleepMS>
				for (int i=0; i<300; i++) {										// 300 * 100ms with LED toggling
 8003af4:	3d01      	subs	r5, #1
					PORTA->SET = PORTA_LED_A;
 8003af6:	8137      	strh	r7, [r6, #8]
				for (int i=0; i<300; i++) {										// 300 * 100ms with LED toggling
 8003af8:	d1f5      	bne.n	8003ae6 <uartParseCommand+0xb6>
			if (cmd[3]=='-') {
 8003afa:	78e3      	ldrb	r3, [r4, #3]
 8003afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b00:	2b2d      	cmp	r3, #45	; 0x2d
 8003b02:	4b72      	ldr	r3, [pc, #456]	; (8003ccc <uartParseCommand+0x29c>)
 8003b04:	d102      	bne.n	8003b0c <uartParseCommand+0xdc>
				PORTC->CLR = PORTC_ENABLE_RPIZW_POWER;
 8003b06:	815a      	strh	r2, [r3, #10]
				uartSendString("-PR-\n");
 8003b08:	4874      	ldr	r0, [pc, #464]	; (8003cdc <uartParseCommand+0x2ac>)
 8003b0a:	e7d8      	b.n	8003abe <uartParseCommand+0x8e>
				PORTC->SET = PORTC_ENABLE_RPIZW_POWER;
 8003b0c:	811a      	strh	r2, [r3, #8]
				uartSendString("-PR+\n");
 8003b0e:	4874      	ldr	r0, [pc, #464]	; (8003ce0 <uartParseCommand+0x2b0>)
 8003b10:	e7d5      	b.n	8003abe <uartParseCommand+0x8e>
		if (cmd[2]=='S') {
 8003b12:	2b53      	cmp	r3, #83	; 0x53
 8003b14:	4b73      	ldr	r3, [pc, #460]	; (8003ce4 <uartParseCommand+0x2b4>)
 8003b16:	d10a      	bne.n	8003b2e <uartParseCommand+0xfe>
			if (cmd[3]=='-') {
 8003b18:	78e2      	ldrb	r2, [r4, #3]
 8003b1a:	2a2d      	cmp	r2, #45	; 0x2d
 8003b1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b20:	d102      	bne.n	8003b28 <uartParseCommand+0xf8>
				PORTB->CLR = PORTB_ENABLE_SERVOS_POWER;
 8003b22:	815a      	strh	r2, [r3, #10]
				uartSendString("-PS-\n");
 8003b24:	4870      	ldr	r0, [pc, #448]	; (8003ce8 <uartParseCommand+0x2b8>)
 8003b26:	e7ca      	b.n	8003abe <uartParseCommand+0x8e>
				PORTB->SET = PORTB_ENABLE_SERVOS_POWER;
 8003b28:	811a      	strh	r2, [r3, #8]
				uartSendString("-PS+\n");
 8003b2a:	4870      	ldr	r0, [pc, #448]	; (8003cec <uartParseCommand+0x2bc>)
 8003b2c:	e7c7      	b.n	8003abe <uartParseCommand+0x8e>
		PORTC->SET = PORTC_ENABLE_RPIZW_POWER;
 8003b2e:	4a67      	ldr	r2, [pc, #412]	; (8003ccc <uartParseCommand+0x29c>)
 8003b30:	f44f 7180 	mov.w	r1, #256	; 0x100
		uartSendString("-P+\n");
 8003b34:	486e      	ldr	r0, [pc, #440]	; (8003cf0 <uartParseCommand+0x2c0>)
		PORTC->SET = PORTC_ENABLE_RPIZW_POWER;
 8003b36:	8111      	strh	r1, [r2, #8]
		PORTB->SET = PORTB_ENABLE_SERVOS_POWER;
 8003b38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b3c:	811a      	strh	r2, [r3, #8]
 8003b3e:	e7be      	b.n	8003abe <uartParseCommand+0x8e>
	if (strncmp(cmdU, "!L", 2)==0) {									// LED command?
 8003b40:	2202      	movs	r2, #2
 8003b42:	496c      	ldr	r1, [pc, #432]	; (8003cf4 <uartParseCommand+0x2c4>)
 8003b44:	4668      	mov	r0, sp
 8003b46:	f000 f951 	bl	8003dec <strncmp>
 8003b4a:	4605      	mov	r5, r0
 8003b4c:	b9d8      	cbnz	r0, 8003b86 <uartParseCommand+0x156>
		uartBusyWaitForTXDone();
 8003b4e:	f7ff fe6b 	bl	8003828 <uartBusyWaitForTXDone>
		if (cmd[2] == '-') {
 8003b52:	78a3      	ldrb	r3, [r4, #2]
 8003b54:	2b2d      	cmp	r3, #45	; 0x2d
 8003b56:	d107      	bne.n	8003b68 <uartParseCommand+0x138>
			setLEDcounter(0);
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f7fe fae9 	bl	8002130 <setLEDcounter>
			PORTA->CLR = PORTA_LED_A;
 8003b5e:	4b5d      	ldr	r3, [pc, #372]	; (8003cd4 <uartParseCommand+0x2a4>)
 8003b60:	2202      	movs	r2, #2
			uartSendString("-L-\n");
 8003b62:	4865      	ldr	r0, [pc, #404]	; (8003cf8 <uartParseCommand+0x2c8>)
			PORTA->CLR = PORTA_LED_A;
 8003b64:	815a      	strh	r2, [r3, #10]
 8003b66:	e7aa      	b.n	8003abe <uartParseCommand+0x8e>
		if (cmd[2] == '+') {
 8003b68:	2b2b      	cmp	r3, #43	; 0x2b
 8003b6a:	d107      	bne.n	8003b7c <uartParseCommand+0x14c>
			setLEDcounter(0);
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	f7fe fadf 	bl	8002130 <setLEDcounter>
			PORTA->SET = PORTA_LED_A;
 8003b72:	4b58      	ldr	r3, [pc, #352]	; (8003cd4 <uartParseCommand+0x2a4>)
 8003b74:	2202      	movs	r2, #2
			uartSendString("-L+\n");
 8003b76:	4861      	ldr	r0, [pc, #388]	; (8003cfc <uartParseCommand+0x2cc>)
			PORTA->SET = PORTA_LED_A;
 8003b78:	811a      	strh	r2, [r3, #8]
 8003b7a:	e7a0      	b.n	8003abe <uartParseCommand+0x8e>
		setLEDcounter(1);
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f7fe fad7 	bl	8002130 <setLEDcounter>
		uartSendString("-L.\n");
 8003b82:	485f      	ldr	r0, [pc, #380]	; (8003d00 <uartParseCommand+0x2d0>)
 8003b84:	e79b      	b.n	8003abe <uartParseCommand+0x8e>
	if (strncmp(cmdU, "RESET", 5)==0) {									// RESET?
 8003b86:	2205      	movs	r2, #5
 8003b88:	495e      	ldr	r1, [pc, #376]	; (8003d04 <uartParseCommand+0x2d4>)
 8003b8a:	4668      	mov	r0, sp
 8003b8c:	f000 f92e 	bl	8003dec <strncmp>
 8003b90:	b988      	cbnz	r0, 8003bb6 <uartParseCommand+0x186>
		uartSendString("Reset\n");
 8003b92:	485d      	ldr	r0, [pc, #372]	; (8003d08 <uartParseCommand+0x2d8>)
 8003b94:	f7ff fe7a 	bl	800388c <uartSendString>
		uartBusyWaitForTXDone();
 8003b98:	f7ff fe46 	bl	8003828 <uartBusyWaitForTXDone>
 8003b9c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003ba0:	495a      	ldr	r1, [pc, #360]	; (8003d0c <uartParseCommand+0x2dc>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003ba2:	4b5b      	ldr	r3, [pc, #364]	; (8003d10 <uartParseCommand+0x2e0>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003ba4:	68ca      	ldr	r2, [r1, #12]
 8003ba6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60cb      	str	r3, [r1, #12]
 8003bae:	f3bf 8f4f 	dsb	sy
    __NOP();
 8003bb2:	bf00      	nop
 8003bb4:	e7fd      	b.n	8003bb2 <uartParseCommand+0x182>
	if (strncmp(cmdU, "BOOTL", 5)==0) {									// BOOTLOADER?
 8003bb6:	2205      	movs	r2, #5
 8003bb8:	4956      	ldr	r1, [pc, #344]	; (8003d14 <uartParseCommand+0x2e4>)
 8003bba:	4668      	mov	r0, sp
 8003bbc:	f000 f916 	bl	8003dec <strncmp>
 8003bc0:	b9c0      	cbnz	r0, 8003bf4 <uartParseCommand+0x1c4>
		uartSendString("Entering Bootloader\n");
 8003bc2:	4855      	ldr	r0, [pc, #340]	; (8003d18 <uartParseCommand+0x2e8>)
 8003bc4:	f7ff fe62 	bl	800388c <uartSendString>
		uartBusyWaitForTXDone();
 8003bc8:	f7ff fe2e 	bl	8003828 <uartBusyWaitForTXDone>
		IWDG->KR = 0x0000CCCC;			// enable IWDG (independent watch-dog)
 8003bcc:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <uartParseCommand+0x2ec>)
 8003bce:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003bd2:	601a      	str	r2, [r3, #0]
		IWDG->KR = 0x00005555;			// enable register access
 8003bd4:	f245 5255 	movw	r2, #21845	; 0x5555
 8003bd8:	601a      	str	r2, [r3, #0]
		IWDG->PR = 0xFF;				// prescaler 256 --> 32Khz/256 --> 125Hz --> 8msec ticks
 8003bda:	22ff      	movs	r2, #255	; 0xff
 8003bdc:	605a      	str	r2, [r3, #4]
		IWDG->RLR = 1;					// re-load time (~8ms)
 8003bde:	2201      	movs	r2, #1
 8003be0:	609a      	str	r2, [r3, #8]
		while (IWDG->SR != 0x00000000) { asm volatile ("nop"); }		// wait for WD to finish
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	b922      	cbnz	r2, 8003bf0 <uartParseCommand+0x1c0>
		IWDG->KR = 0x0000AAAA;			// trigger WDT
 8003be6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003bea:	601a      	str	r2, [r3, #0]
		while (1) { asm volatile ("nop"); }; // will trigger Watchdog -> go into BL
 8003bec:	bf00      	nop
 8003bee:	e7fd      	b.n	8003bec <uartParseCommand+0x1bc>
		while (IWDG->SR != 0x00000000) { asm volatile ("nop"); }		// wait for WD to finish
 8003bf0:	bf00      	nop
 8003bf2:	e7f6      	b.n	8003be2 <uartParseCommand+0x1b2>
	if (strncmp(cmdU, "PROG", 4)==0) {									// Start Reprogramming on Servo Chain
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	494a      	ldr	r1, [pc, #296]	; (8003d20 <uartParseCommand+0x2f0>)
 8003bf8:	4668      	mov	r0, sp
 8003bfa:	f000 f8f7 	bl	8003dec <strncmp>
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d154      	bne.n	8003cac <uartParseCommand+0x27c>
		if ((cmd[5] >= '0') && (cmd[5] <= '4')) {							// valid servo ID given?
 8003c02:	7963      	ldrb	r3, [r4, #5]
 8003c04:	3b30      	subs	r3, #48	; 0x30
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d84e      	bhi.n	8003ca8 <uartParseCommand+0x278>
			if ((cmd[4]=='0') || (cmd[4]=='L')) {								// chain Left?
 8003c0a:	7923      	ldrb	r3, [r4, #4]
 8003c0c:	2b30      	cmp	r3, #48	; 0x30
 8003c0e:	d001      	beq.n	8003c14 <uartParseCommand+0x1e4>
 8003c10:	2b4c      	cmp	r3, #76	; 0x4c
 8003c12:	d115      	bne.n	8003c40 <uartParseCommand+0x210>
				uartSendChar('L');
 8003c14:	204c      	movs	r0, #76	; 0x4c
 8003c16:	f7ff fe2b 	bl	8003870 <uartSendChar>
				uartSendChar('-');
 8003c1a:	202d      	movs	r0, #45	; 0x2d
 8003c1c:	f7ff fe28 	bl	8003870 <uartSendChar>
				uartSendChar(cmd[4]);
 8003c20:	7920      	ldrb	r0, [r4, #4]
 8003c22:	f7ff fe25 	bl	8003870 <uartSendChar>
				uartSendChar('-');
 8003c26:	202d      	movs	r0, #45	; 0x2d
 8003c28:	f7ff fe22 	bl	8003870 <uartSendChar>
				uartSendChar(cmd[5]);
 8003c2c:	7960      	ldrb	r0, [r4, #5]
 8003c2e:	f7ff fe1f 	bl	8003870 <uartSendChar>
				uartSendChar('\n');
 8003c32:	200a      	movs	r0, #10
 8003c34:	f7ff fe1c 	bl	8003870 <uartSendChar>
				uartForwardReprogramServoChainLeft(cmd[5]);						// call reprogramming
 8003c38:	7960      	ldrb	r0, [r4, #5]
 8003c3a:	f7ff faff 	bl	800323c <uartForwardReprogramServoChainLeft>
				return;
 8003c3e:	e708      	b.n	8003a52 <uartParseCommand+0x22>
			if ((cmd[4]=='1') || (cmd[4]=='R')) {								// chain Right?
 8003c40:	2b31      	cmp	r3, #49	; 0x31
 8003c42:	d001      	beq.n	8003c48 <uartParseCommand+0x218>
 8003c44:	2b52      	cmp	r3, #82	; 0x52
 8003c46:	d115      	bne.n	8003c74 <uartParseCommand+0x244>
				uartSendChar('R');
 8003c48:	2052      	movs	r0, #82	; 0x52
 8003c4a:	f7ff fe11 	bl	8003870 <uartSendChar>
				uartSendChar('-');
 8003c4e:	202d      	movs	r0, #45	; 0x2d
 8003c50:	f7ff fe0e 	bl	8003870 <uartSendChar>
				uartSendChar(cmd[4]);
 8003c54:	7920      	ldrb	r0, [r4, #4]
 8003c56:	f7ff fe0b 	bl	8003870 <uartSendChar>
				uartSendChar('-');
 8003c5a:	202d      	movs	r0, #45	; 0x2d
 8003c5c:	f7ff fe08 	bl	8003870 <uartSendChar>
				uartSendChar(cmd[5]);
 8003c60:	7960      	ldrb	r0, [r4, #5]
 8003c62:	f7ff fe05 	bl	8003870 <uartSendChar>
				uartSendChar('\n');
 8003c66:	200a      	movs	r0, #10
 8003c68:	f7ff fe02 	bl	8003870 <uartSendChar>
				uartForwardReprogramServoChainRight(cmd[5]);					// call reprogramming
 8003c6c:	7960      	ldrb	r0, [r4, #5]
 8003c6e:	f7ff fbdf 	bl	8003430 <uartForwardReprogramServoChainRight>
				return;
 8003c72:	e6ee      	b.n	8003a52 <uartParseCommand+0x22>
			if ((cmd[4]=='2') || (cmd[4]=='S')) {								// chain Spine?
 8003c74:	2b32      	cmp	r3, #50	; 0x32
 8003c76:	d001      	beq.n	8003c7c <uartParseCommand+0x24c>
 8003c78:	2b53      	cmp	r3, #83	; 0x53
 8003c7a:	d115      	bne.n	8003ca8 <uartParseCommand+0x278>
				uartSendChar('S');
 8003c7c:	2053      	movs	r0, #83	; 0x53
 8003c7e:	f7ff fdf7 	bl	8003870 <uartSendChar>
				uartSendChar('-');
 8003c82:	202d      	movs	r0, #45	; 0x2d
 8003c84:	f7ff fdf4 	bl	8003870 <uartSendChar>
				uartSendChar(cmd[4]);
 8003c88:	7920      	ldrb	r0, [r4, #4]
 8003c8a:	f7ff fdf1 	bl	8003870 <uartSendChar>
				uartSendChar('-');
 8003c8e:	202d      	movs	r0, #45	; 0x2d
 8003c90:	f7ff fdee 	bl	8003870 <uartSendChar>
				uartSendChar(cmd[5]);
 8003c94:	7960      	ldrb	r0, [r4, #5]
 8003c96:	f7ff fdeb 	bl	8003870 <uartSendChar>
				uartSendChar('\n');
 8003c9a:	200a      	movs	r0, #10
 8003c9c:	f7ff fde8 	bl	8003870 <uartSendChar>
				uartForwardReprogramServoChainSpine(cmd[5]);					// call reprogramming
 8003ca0:	7960      	ldrb	r0, [r4, #5]
 8003ca2:	f7ff fcad 	bl	8003600 <uartForwardReprogramServoChainSpine>
				return;
 8003ca6:	e6d4      	b.n	8003a52 <uartParseCommand+0x22>
		uartSendString("PROG: error parsing parameters\n");
 8003ca8:	481e      	ldr	r0, [pc, #120]	; (8003d24 <uartParseCommand+0x2f4>)
 8003caa:	e708      	b.n	8003abe <uartParseCommand+0x8e>
	if (strncmp(cmd, "??", 2)==0) {										// show help
 8003cac:	2202      	movs	r2, #2
 8003cae:	491e      	ldr	r1, [pc, #120]	; (8003d28 <uartParseCommand+0x2f8>)
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f000 f89b 	bl	8003dec <strncmp>
 8003cb6:	b910      	cbnz	r0, 8003cbe <uartParseCommand+0x28e>
		uartShowHelp();
 8003cb8:	f7ff fe7c 	bl	80039b4 <uartShowHelp>
		return;
 8003cbc:	e6c9      	b.n	8003a52 <uartParseCommand+0x22>
	uartSendString("?: ");												// unknown command
 8003cbe:	481b      	ldr	r0, [pc, #108]	; (8003d2c <uartParseCommand+0x2fc>)
 8003cc0:	e6de      	b.n	8003a80 <uartParseCommand+0x50>
 8003cc2:	bf00      	nop
 8003cc4:	08003f29 	.word	0x08003f29
 8003cc8:	08003f60 	.word	0x08003f60
 8003ccc:	40020810 	.word	0x40020810
 8003cd0:	08003f63 	.word	0x08003f63
 8003cd4:	40020010 	.word	0x40020010
 8003cd8:	08003f68 	.word	0x08003f68
 8003cdc:	08003f8b 	.word	0x08003f8b
 8003ce0:	08003f91 	.word	0x08003f91
 8003ce4:	40020410 	.word	0x40020410
 8003ce8:	08003f97 	.word	0x08003f97
 8003cec:	08003f9d 	.word	0x08003f9d
 8003cf0:	08003fa3 	.word	0x08003fa3
 8003cf4:	08003fa8 	.word	0x08003fa8
 8003cf8:	08003fab 	.word	0x08003fab
 8003cfc:	08003fb0 	.word	0x08003fb0
 8003d00:	08003fb5 	.word	0x08003fb5
 8003d04:	08003fba 	.word	0x08003fba
 8003d08:	08003fc0 	.word	0x08003fc0
 8003d0c:	e000ed00 	.word	0xe000ed00
 8003d10:	05fa0004 	.word	0x05fa0004
 8003d14:	08003fc7 	.word	0x08003fc7
 8003d18:	08003fcd 	.word	0x08003fcd
 8003d1c:	40003000 	.word	0x40003000
 8003d20:	08003fe2 	.word	0x08003fe2
 8003d24:	08003fe7 	.word	0x08003fe7
 8003d28:	08004007 	.word	0x08004007
 8003d2c:	0800400a 	.word	0x0800400a

08003d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d36:	e003      	b.n	8003d40 <LoopCopyDataInit>

08003d38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d3e:	3104      	adds	r1, #4

08003d40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d40:	480b      	ldr	r0, [pc, #44]	; (8003d70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d48:	d3f6      	bcc.n	8003d38 <CopyDataInit>
  ldr  r2, =_sbss
 8003d4a:	4a0b      	ldr	r2, [pc, #44]	; (8003d78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d4c:	e002      	b.n	8003d54 <LoopFillZerobss>

08003d4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d50:	f842 3b04 	str.w	r3, [r2], #4

08003d54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d54:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d58:	d3f9      	bcc.n	8003d4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d5a:	f7ff fa07 	bl	800316c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d5e:	f000 f811 	bl	8003d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d62:	f7fe faab 	bl	80022bc <main>
  bx  lr    
 8003d66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d68:	2003ffff 	.word	0x2003ffff
  ldr  r3, =_sidata
 8003d6c:	080042b4 	.word	0x080042b4
  ldr  r0, =_sdata
 8003d70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d74:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8003d78:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003d7c:	200046a0 	.word	0x200046a0

08003d80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d80:	e7fe      	b.n	8003d80 <ADC_IRQHandler>
	...

08003d84 <__libc_init_array>:
 8003d84:	b570      	push	{r4, r5, r6, lr}
 8003d86:	4e0d      	ldr	r6, [pc, #52]	; (8003dbc <__libc_init_array+0x38>)
 8003d88:	4c0d      	ldr	r4, [pc, #52]	; (8003dc0 <__libc_init_array+0x3c>)
 8003d8a:	1ba4      	subs	r4, r4, r6
 8003d8c:	10a4      	asrs	r4, r4, #2
 8003d8e:	2500      	movs	r5, #0
 8003d90:	42a5      	cmp	r5, r4
 8003d92:	d109      	bne.n	8003da8 <__libc_init_array+0x24>
 8003d94:	4e0b      	ldr	r6, [pc, #44]	; (8003dc4 <__libc_init_array+0x40>)
 8003d96:	4c0c      	ldr	r4, [pc, #48]	; (8003dc8 <__libc_init_array+0x44>)
 8003d98:	f000 f87e 	bl	8003e98 <_init>
 8003d9c:	1ba4      	subs	r4, r4, r6
 8003d9e:	10a4      	asrs	r4, r4, #2
 8003da0:	2500      	movs	r5, #0
 8003da2:	42a5      	cmp	r5, r4
 8003da4:	d105      	bne.n	8003db2 <__libc_init_array+0x2e>
 8003da6:	bd70      	pop	{r4, r5, r6, pc}
 8003da8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dac:	4798      	blx	r3
 8003dae:	3501      	adds	r5, #1
 8003db0:	e7ee      	b.n	8003d90 <__libc_init_array+0xc>
 8003db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003db6:	4798      	blx	r3
 8003db8:	3501      	adds	r5, #1
 8003dba:	e7f2      	b.n	8003da2 <__libc_init_array+0x1e>
 8003dbc:	080042ac 	.word	0x080042ac
 8003dc0:	080042ac 	.word	0x080042ac
 8003dc4:	080042ac 	.word	0x080042ac
 8003dc8:	080042b0 	.word	0x080042b0

08003dcc <memset>:
 8003dcc:	4402      	add	r2, r0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d100      	bne.n	8003dd6 <memset+0xa>
 8003dd4:	4770      	bx	lr
 8003dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dda:	e7f9      	b.n	8003dd0 <memset+0x4>

08003ddc <strcpy>:
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003de2:	f803 2b01 	strb.w	r2, [r3], #1
 8003de6:	2a00      	cmp	r2, #0
 8003de8:	d1f9      	bne.n	8003dde <strcpy+0x2>
 8003dea:	4770      	bx	lr

08003dec <strncmp>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	b16a      	cbz	r2, 8003e0c <strncmp+0x20>
 8003df0:	3901      	subs	r1, #1
 8003df2:	1884      	adds	r4, r0, r2
 8003df4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003df8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d103      	bne.n	8003e08 <strncmp+0x1c>
 8003e00:	42a0      	cmp	r0, r4
 8003e02:	d001      	beq.n	8003e08 <strncmp+0x1c>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f5      	bne.n	8003df4 <strncmp+0x8>
 8003e08:	1a98      	subs	r0, r3, r2
 8003e0a:	bd10      	pop	{r4, pc}
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	e7fc      	b.n	8003e0a <strncmp+0x1e>

08003e10 <strupr>:
 8003e10:	b570      	push	{r4, r5, r6, lr}
 8003e12:	4606      	mov	r6, r0
 8003e14:	1e45      	subs	r5, r0, #1
 8003e16:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8003e1a:	b90c      	cbnz	r4, 8003e20 <strupr+0x10>
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	bd70      	pop	{r4, r5, r6, pc}
 8003e20:	f000 f80c 	bl	8003e3c <__locale_ctype_ptr>
 8003e24:	4420      	add	r0, r4
 8003e26:	4623      	mov	r3, r4
 8003e28:	7842      	ldrb	r2, [r0, #1]
 8003e2a:	f002 0203 	and.w	r2, r2, #3
 8003e2e:	2a02      	cmp	r2, #2
 8003e30:	bf08      	it	eq
 8003e32:	f1a4 0320 	subeq.w	r3, r4, #32
 8003e36:	702b      	strb	r3, [r5, #0]
 8003e38:	e7ed      	b.n	8003e16 <strupr+0x6>
	...

08003e3c <__locale_ctype_ptr>:
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <__locale_ctype_ptr+0x14>)
 8003e3e:	4a05      	ldr	r2, [pc, #20]	; (8003e54 <__locale_ctype_ptr+0x18>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf08      	it	eq
 8003e48:	4613      	moveq	r3, r2
 8003e4a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8003e4e:	4770      	bx	lr
 8003e50:	20000010 	.word	0x20000010
 8003e54:	20000074 	.word	0x20000074

08003e58 <__ascii_mbtowc>:
 8003e58:	b082      	sub	sp, #8
 8003e5a:	b901      	cbnz	r1, 8003e5e <__ascii_mbtowc+0x6>
 8003e5c:	a901      	add	r1, sp, #4
 8003e5e:	b142      	cbz	r2, 8003e72 <__ascii_mbtowc+0x1a>
 8003e60:	b14b      	cbz	r3, 8003e76 <__ascii_mbtowc+0x1e>
 8003e62:	7813      	ldrb	r3, [r2, #0]
 8003e64:	600b      	str	r3, [r1, #0]
 8003e66:	7812      	ldrb	r2, [r2, #0]
 8003e68:	1c10      	adds	r0, r2, #0
 8003e6a:	bf18      	it	ne
 8003e6c:	2001      	movne	r0, #1
 8003e6e:	b002      	add	sp, #8
 8003e70:	4770      	bx	lr
 8003e72:	4610      	mov	r0, r2
 8003e74:	e7fb      	b.n	8003e6e <__ascii_mbtowc+0x16>
 8003e76:	f06f 0001 	mvn.w	r0, #1
 8003e7a:	e7f8      	b.n	8003e6e <__ascii_mbtowc+0x16>

08003e7c <__ascii_wctomb>:
 8003e7c:	b149      	cbz	r1, 8003e92 <__ascii_wctomb+0x16>
 8003e7e:	2aff      	cmp	r2, #255	; 0xff
 8003e80:	bf85      	ittet	hi
 8003e82:	238a      	movhi	r3, #138	; 0x8a
 8003e84:	6003      	strhi	r3, [r0, #0]
 8003e86:	700a      	strbls	r2, [r1, #0]
 8003e88:	f04f 30ff 	movhi.w	r0, #4294967295
 8003e8c:	bf98      	it	ls
 8003e8e:	2001      	movls	r0, #1
 8003e90:	4770      	bx	lr
 8003e92:	4608      	mov	r0, r1
 8003e94:	4770      	bx	lr
	...

08003e98 <_init>:
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	bf00      	nop
 8003e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9e:	bc08      	pop	{r3}
 8003ea0:	469e      	mov	lr, r3
 8003ea2:	4770      	bx	lr

08003ea4 <_fini>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	bf00      	nop
 8003ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eaa:	bc08      	pop	{r3}
 8003eac:	469e      	mov	lr, r3
 8003eae:	4770      	bx	lr
